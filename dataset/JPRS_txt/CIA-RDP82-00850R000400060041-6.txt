FOR OFFICIAL USE ONLY

JPRS L/10064
22 October 1981

USSR Report

CYBERNETICS, COMPUTERS AND
AUTOMATION TECHNOLOGY

(FOUO 23/81)

FOREIGN BROADCAST INFORMATION SERVICE

FOR OFFICIAL USE ONLY
NOTE

JPRS publications contain information primarily from foreign
newspapers, periodicals and books, but also from news agency
transmissions and broadcasts. Materials from foreign-language
sources are translated; those from English-language sources
are transcribed or reprinted, with the original phrasing and
other characteristics retained.

Headlines, editorial reports, and material enclosed in brackets
[] are supplied by JPRS. Processing indicators such as [Text]
or [Excerpt] in the first line of each item, or following the
last line of a brief, indicate how the original information was
processed. where no processing indicator is given, the infor-
nation was summarized or extracted.

Unfamiliar names rendered phonetically or transliterated are
enclosed in parentheses. words or names preceded by a ques-
tion mark and enclosed in parentheses were not clear in the
original but have been supplied as appropriate in context.
Other unattributed parenthetical notes within the body of an
item originate with the source. Times within items are as
given by source.

The contents of this publication in no way represent the poli-
cies, views or attitudes of the 0.8. Government.

COPYRIGHT LAWS AND REGULATIONS GOVERNING OWNERSHIP OF
MATERIALS REPRODUCED HEREIN REQUIRE THAT DISSEMINATION
OF THIS PUBLICATION BE RESTRICTED FOR OPTICIAL USE ONLY.
USSR REPORT
CstRNETxcs, COMPUTERS AND AUTOMATION TECHNOLOGY
(P000 23/81)

CONTENTS

WARE

Digital Conelator c.0000eeoooooeooteootoooeooec0.0000000000000000... 1

Principles of Organization of Parallel Computations. Structures
and Realization of ”miter Systems: 1118 ".10 0.90000 09.0000... 0... 1‘

SOFTWARE
Operation of Unified System Computers in SVS Hode.................... 1h
Excerpts From 'AIJJORITINS AND PROGRAIB', February 1981 .............. 16
Additional Excerpts From 'Amaums AND MRAHS', February 1981 ... 19
Excerpts From 'AIBGLITI'NS AND mm‘, March 1981 ................. 27
Excerpts From 'AmmITHHS AND mm‘, April 1981 .............-... 30
Abstracts From 'APPLIED cmrum scmcs', No 1, 1981 35

Puma, Network Data Base Hanagenmt System Based on GODASY'L
Recmendations nooeouoaaooo-ooooeeeoeeeoeooeeoooooe-cnooeeoeeeeeea 38

13? mm Processing System oeeoooeeeoeso.oncone-oooooeooeooooooooooeo 39
Virtual Storage Access Method in Yes 03 Operating System ............ hl
Implementation of APL on Unified System of Computers ................ SO

APPLICATIGJS

System for Monitoring Metal hoduct Deliveries to Major National
Economic Construction Projects .................................... 65

- a - [III - USSR - 21C SST F000]

mo Omﬁkl IICI‘ ON] V
FOR OFFICIAL USE ONLY

Processing of Online Data on Fuel Reserves at Major 08$!
Entemises and Powr Stationﬂ oeeooeeeeoeoooooo-oeoeeoeoeeoooo

PUBLICATIONS

Abstracts Prom Journal 'AUMTIGI AND comm TECHNOHBY',
July-August 1981 .0...OO...O...O..O......OOO0.00000000000COOOC.

Collection of Problems on Machine Processing of Economic

mfomtion 0.00.00...I0.0.0000.0000-0.000.oeeoooooootoooeoooon

Multifunctional Automate and the mement Base of Digital

muters OOOOIOOIOCOOOOOOOOC.OI.0.0.0.0...OIOOOCOOOOOOOIOOOOO.

Parallel Processors for Control Siam oeeoeoeconooeooo-aoeo-oOe

ob-

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

HARDWARE

DIGITAL CORRELATOR
Moscow OPISANIYB IZOBRETENIYA in Russian No 739566, 1980

[Author certificate by S. N. Britin, V. P. Ipatov, Yu. A. Kolomenskiy and
B. I. Korniyevskiy]

[Text] The invention relates to digital computer technology. It can be used
for determining the correlation functions of various processes. It can also
be used in systems and devices based on correlation methods of signal process-
ing, in particular, radar and radio navigation systems.

A previously known digital correlator contains four dynamic memory units. two
multiplication units, two accumulators, and a register (1).

This single-channel device is relatively complex and has insufficient speed.
The presence of multipliers in the correlators is the usual reason for their
relatively slow speed. The use of high-speed memory devices as multipliers is
not always possible, because the number of quantized signal levels can reach a
significant size and because this then requires an excessively large memory.

Also already known is a digital correlator containing analog-to-digital con-
verters for the input and reference signals. Their outputs are attached via
the multiplier to the adder. which serves as integrator. The signal on adder
output determines the size of the correlation of the reference and input sig-
nals (2).

The correlator's low speed is a drawback. This is caused by the following. It
is necessary to increase the number of quantization levels of the input signal
in order to increase the correlator's accuracy and to eliminate the suppression
of weak signals. In this case, the multiplication time, which is proportional
to the number of digits in the multipliers, increases. This in turn increases
the minimally permitted time quantization sample of the input processes; that
is. it lowers the correlator's speed.

The goal of this invention is an increase in digital correlator speed.
This goal is achieved as follows. The correlator contains first and second

analog-to-digital converters (their inputs are the inputs of the correlator).
umxltiplication units. accumulators and equalizer. Included in the correlator

1
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

is a switch. The number of the switch's outputs equals the number of quanti-
zation levels of the reference signal. The switch's inputs are connected to
the outputs of the corresponding analog-to-digital converters, and the outputs
are connected to the inputs of the corresponding accumulators. The output of
each accumulator is connected to the input of the multiplication unit. The
output of each multiplication unit is attached to the corresponding equalizer
input. This allows during input signal operation the execution of solely the
summing of its quantized selected values. Each value corresponds to a definite
quantization level of the reference signal. The slower multiplication opera-
tion, which limits the operating speed, is executed following the completion
of the input signal operation. '

The diagram shows the structural organization of the digital correlator.

The correlator consists of analog-to-digital converters (1 and 2) of the in-
put and reference signals, whose outputs are connected to the switch (3). The
number of switch outputs equals the number of quantization levels of the
reference signal. Each output is attached to the corresponding adder (6),
which is linked to the corresponding multiplication unit (5). All outputs from
number 5 units are attached to the equalizer's inputs (6).

The digital correlator operates in the following manner.

The input signal arrives at the analog-to-digital converter (1), where sampling
and level quantization occur. From the output of the analog-to-digital con-
verter (l) the signal, which is an n-digit number, goes to the switch (3).

The switch is controlled by signals arriving from the analog-to-digital con-
verter (2) of the reference signal. At each moment of the sampling, the selected
quantized value of the input signal (going through switch (3)) arrives at one

of the adders (a). which corresponds to a definite quantized level of the refer-
ence signal. Following completion of the input signal, amounts stored in the
adders (4) are multiplied in the multiplication units (5) by coefficients which

2
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

equal the corresonding values of the quantizatiaxlevels of the reference sig-
nals. The resulting products undergo final addition at the equalizer (6).
The result determines the desired correlation value.

Example: Signals from the outputs of the analog-to-digital converters (l and
2) are represented by lO-digit numbers.

Let the execution time for one addition operation equal t ; then, for ordinary
multiplication devices, the execution tine for one multiplication operation is
approximately tn . 20tc.

The quantized signal sample in a known correlator (prototype) must be selected
according to the condition tk g tc + tIn - 20cc, while in the described correlator
the condition is tk z tc.

The speed of the digital correlator described here is approximately 20 times
greater than the speed of the prototype.

In practice there are often cases when a digital multidigit (for example, 10
digit) correlator reference signal accepts only 2 values. Then an increase in
equipment, in comparison with the prototype, is not large. Specifically, a
switch, an adder, a multiplier and an output adder are added. When the cor-
relator's elements are implemented by integrated circuits, the increase in
equipment volume is entirely acceptable (if one considers that correlator speed
will then increase 20 times).

Invention Formula

The digital correlator contains first and second analog-to-digital converters
(whose inputs are the inputs of the correlator), multiplication units, accumu-
lators and an equalizer. The digital correlator is unique in that, in order

to increase correlator speed, it contains a switch such that: the number of

the switch's outputs equals the number of reference signal quantization levels;
the correlator inputs are connected with the outputs of the corresponding
analog-to—digital converters; and the outputs are connected to the inputs of
the corresponding accumulators. The output of each accumulator is connected

to the multiplication unit input, each of whose output is attached to the
corresponding equalizer input.

Information sources considered during evaluation
1. USSR Author Certificate No 668247, class C 06 P 15/3k, 197‘.

2. Gribamov, Yu. I. et al. "Automatic Digital Correlators," Moscow, Izdatel'
stvo "ENERGIYA," 1971, 150 pp (prototype)

CSO: 8166/1856-P

3
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

“DC 519.”?

PRINCIPLES (I? OMANIZATIQI 0!? PARALLEL CGIPUTATIGIS. STRUCTURE AND REALIZATIW
0!" OWNER SYSPDB: THE II-lO

Kiev xnsmmnu in Russian lo 2, liar-Apr 81 (manuscript received 9 Dec 79) pp 68-76

[Articl'e by Professor Hikinil Aleksandrovich Kartsev. doctor of technical sciences.
IIoscow

[Text] He will apply the tern ”cosputer system" to computer tardware intended for
the performance of parallel computations [:1].

By now at least two situations. different in principle. in which conputer systole
are used, have been fornulated. The requirenents for the structure of the conputer
systems and the pareneters on the basis of which their possibilities Inst be evalu-
ated are correspondingly different.

The first typical situation is the use of a conputer system in a shared multicon-
puter center or autonated system for the control of production, of the educational
process in a VUZ. etc. Characteristic of this situation is the passage through the
system of a large flow of tasks independent or almost independent of one another:
each of then could be solved with an ordinary caputer. The sense of using a con-
puter system instead of an aggregate of separate nohines in a stared lulticouputer
center consists in the possibility of lore effective use of collectivised resources
(professoria‘l. tine. internal memory. peripherals. etc). in an eccnow of the volume
of information stored in external senories (for exalple. general purpose progress
can be stored in exteml nemories in a single copy and copied as needed into the
internal memory several tiles in the interests of different tadts), and also in
increased reliability of the shred Iultioonputer center. When a eclputer center
is used to solve ASU tasks an additional and, possibly. a deciding argunent in favor

of use of the conputer center is the need to refer different ASU tasks to a couon
data bank.

The second typical situation is the use of a computer systen to control a conplex
teohmlogical process in real tine or to solve large-scale scientific or engineer-
ing problens. It is characteristic here that all the resources of the couputer
systen are made available if possible to a single priority task (if it can use
those resources); tint task is so labor-intensive tint no oonbinatim of separate

conputers of the ordinary type can assure the obtaining of a solution in an accept-
able title.

Also possible are situations in which the purpose of the creation of the couputer
system is the achievement of greater reliability than with an ordinary mohine or

1;
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

task. If the system is not strictly specialized. then in another time segment it
will be used to solve another large-scale task. but in that case a high rate of
solution of the given task will again be required, and not a high rate of passage
of a flow of mry relatively small-scale tasks.

When it is a nutter of some specific computer system, usually reported among its
parameters is the nominal system speed, obtained as the sum of the speeds of its
components. However, the nominal speed characterizes not so much the possibilities
of the system as the expenditures on its creation. To ctnracterize the possibili-
ties of a system in the first typical situation it is necessary to know its real

large flow of relatively small-scale independent or almost independent tasks, and
in the second, the real user speed. that is. the speed of the system during the
solution of a single separately taken large-scale task. The ratio of the real
speed of a computer system (system or user) to the nominal is called the system or
user efficiency of the computer system.

Obtaining high user productivity in the presence of adequate efﬁciency of the con-
puter system is a very complex problem. Achievement of'that goal requires a defin-
ite correspondence between the structure of the computer system and the properties
of the task to be solved. A given computer system cannot be identically efficient
in solving tadts of different classes.

1. Parallelism of independent branches of a task. Separate large sections of a
task can be solved independently of one another, only interchanging results with
one another from time to time.

2. Parallelism of related operations. The result of performance of some operation
is not used without fail as the input operand in the operation following it, and
perhaps is not used also in several subsequent operations. as a result of which
those related operations can be performed simultaneously.

3. Parallelism of a set of objects and natural parallelism. It is characteristic
of tasks in processing information on a large number of identical or almost identi-
cal objects, in other words. of tasks dealing with data files. This is a particular
case of a broader understanding of natural parallelism. when a task has been formu-
lated from the very start in terms of the processing of multidimensional vectors

or matrices, lattice functions or other objects similar to them [2, 3].

Different structures of computer systems correspond to the use of different types
of parallelism.

Parallelism of independent branches is realised either by a multimaohine complex
or a multiprocessor system with separate control, where each processor contains

5
FOR OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

an autonomous control device and works in accordance with its on independent pro-
gram (Fig l) or a system of the conveyor (Iain-line) t containing just as may
control devices in the conveyor. connected alternately on a ring) to different
stages of the conveyor. as there are stages in the conveyor. After a certain cal-
puter in the sultisachine complex (or a certain processor of the multiprocessor
system, or a certain control device in the min-line systes) has coupleted the
filling of its branch. there is a possibility of verifying sclehow whether the
other parallel branches have been coupleted, of organising, if necessary. the ex-

pectation and excl'nnge of information and of triggering the autonomous filling of
following branches.

Figure l. Eusple of construction of
a mltiprocessor syste- with separate
control

1 -~ control
2 -- aritMetic-loycal unit
3 -- individual storage device of

processors (can be absent)
1+ —~ common memory
5 -~ channel

 

Unfortunately. the parameters proposed in scientific works for minerical estimticn
of the parallelism of independent branches intrinsic to a certain task relate not
so much to the specific task being solved as to a specific program for solving it.
But even detailed knowledge of those paraseters far from always mkes it possible
to estimate the real user speed and efficiency of a computer systea oriented toward
parallelism of independent branches, in solving a given task. Therefore interest
is presented by works in which those characteristics are detenined by silulation
of confutational processes in solving real tasks. In particular, in one of those

works If! tadts of x-ray structure analysis, weather forecasting. etc, were inves-
tigated.

The results of all those works are more or less similar and are presented in aver-
aged forn on Fig 2, which shows the nominal speeds“. the real, user efficiency
sp(n) and the user efficiency of the colputer syste En are shown as"a function of

n. the number of machines in a aultinchine complex, of processors in a multipro-

cessor system with separate control or of independent control devices in a conveyor
system

It is evident from Fig 2 that. if the purpose of the creation of a caputer syste-
of the type under consideration is the achieve-eat of high user speed in solving a
broad circle of tasks. it is Minty advisable to specify n larger than 5-6. Sene-
times system of that kind are constructed with a larger number of machines (or

6
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Figure 2. Speed and user
efficiency of computer systens
using parallelisn of independent
branches.

 

processors or control devices). In that case the purpose is vainly to achieve high
system productivity. But if in the stream of tadrs a relatively large-scale task
appears, then a subsysten can be separated for it, one containing as many Iachines
(processors or control devices) as that tad: can efficiently load. A6 a result,
the system efficiency of the conputer syste- obtained is high enough, but the user
productivity in the solution of a single separately taken task. except special
cases. cannot exceed by more than 3-1), times the productivity of an ordinary single-
processor machine.

Parallelism of related operations is used differently in different developnents.
Its classical use is a multiprocessor systen with general control and vectorial
instruction. containing separate rational codes for different pzxessors (Fig 3).

It is possible to create conveyor Iain-line) systems oriented toward this type of
parallelism.

A numerical cinracteristic of the parallelisl of related operations. intrinsic to
a given task, is the indicator of connectedness of related operations a -- the
probability that the result of some operation in a program will be used in the
operation following it. The value of (1 depends not so such on the properties of
the task as on the quality of the local optinization of the progran. done in the
process of translation into machine language or, in sone cases. by apparatus
directly in the process of interpreting the program. For many tasks of a

7
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

 

Figure 3. Exelple of construction of a
multiprocessor system with canon con-
trol. oriented toward parallelisn of
related operations.

1 to 5 -- as for Figure 1

 

conpu‘itional character the value of a obtainod is more or less identical--fron 0.1
when the program is optimized very carefully to about 0.5. It is evident from

Fig it that. ins systen oriented toward the use of parallelism of related operations.
it is difficult to expect gains in user productivity as conpared with an ordinary
computer of more than 2.5-3 times; to obtain that, n (the nunber of processors in

a multiprocessor system or stages of a conveyor) must be of the order of mgnitude
of 3-50

Parallelism of a. set of objects and natural parellelisl are used in the structure
of a multiprocessor systen with general control (Fig 5). when all the processors
simltaneously perform identical operations. but on different data (relating to
different objects or different conponents of lultidimensional vectors. etc).
Analogous construction of a conveyor system also is possible. It is desirable to
supplenent tint structure with a leak mechanism a file sorting processor. and

general arithmetic circuits for performing such operations as oonputation of the
scalar derivative of vectors. finding the minimal or animal element in a file.
etc, for example.

The principal quantitative characteristic of parallelism of a set of objects or
natural parallelism is the rank of the task r--the number of objects of the same
kind in the set of objects being processed, or the dinenaionality of multidim-
sional vectors, the number of points at which the values of functions are given.
etc. It can readily be shown that the user efficiency of a multiprocessor system
oriented toward parallelism of a set of objects or natural parallelisn depends only
on the ratio r/n, and the user efficiency of an analogous conveyor system-mainly

on the ratio r/n and to a mu degree on n. Here the value of n. as previously.

8
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

   

Figure 5. Emple of conetructim of a Figure 6. Efﬁciency of a multipro-
mlticoupressor system with general con- ceesor syctel using natural parallel-
trol, oriented toward natural parallelism. isn.

lto 5--asforFigure1

in any case. This news that at a. rank of the tears. for example. of not less

It is necessary. however. to take into consideration the presence of a. large fund
of programs written in “COL-60, FORTRAN and other widespread languages. and the
presence of a. large number of programers who are well acquainted with those
languages and have experience in working with then.

9
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Let a program be written in AMOL-éo or MEAN without any sort of supplelentary
instructions; it is proposed to use parallelism of independent branches. In that
case the translator must conduct an investigation on the object of the ossibility
of parallel execution of all sections of the progra- on a single level blodte of
AmOL-éo or mam subroutines). It is not so complicated a matter to rot-mists
the rules according to which the translator would determine the possibility of
executing a pair of sections of the program in parallel. However. the work which
the translator must do in that case is char-ms for a large program, as an exlnus-
tive search is requimd for all pairs of blocks of the A1601. program or subrou-
tines of the prograu in FORTRAN. Therefore when parallel independent branches are

used it is necessary to require that the programmers lurk the program in the source
language by means of additional

If it is proposed to use natural parallelisu or parallelism of a set of objects.
and the program is written in “COL-60 or FORTRAN. for sample. then the task of
the translator consists in investigating the programming languages on the subject
of the pessibility of their parallel execution. The foml rules according to
which the translator must act prove in that case to be of ap, oxilately the same
complexity as the rules according to which the translator det :rmines the possibil-
ity of parallel execution of two sections of the progral duri mg use of parallel
independent branches. However. the work of the translator on the whole in that
case is far sinpler. since each program cycle is investigated separately (pertnps
only together with the cycles built into it) and joint investigation of several
cycles is not required.

The additional language resources which silplify this task could consist in the
introduction into the language, together with such objects as files (which already
exist in ALGOL-60 and mm). also of vectors. matrices and lattice functions

(real. purpose and Boolean) and in the deteruination of operations on those ob-
jects.

Let us note that from the point of view of the progra-ter there is a substantial
difference between those supplementary resources which are suitable for describing

execution of the program will depend to a considerable degee on how well that work
has been done (in other words. on the skill of the programmer). on the other hand.
the introduction of such objects of language as files, vectors. mtrices, functions
and the determination of operations on them greatly simplifies the work of the
programmer.

These tasks in the processing of large flows of information, which have to be
solved in practice by means of software with high productivity, in many cases luvs
to some degree all types of parallelism. To obtain high efficiency it is advan-
tageous to construct coubined systems [5]. For example. the H-lO computer (Fig 7)

lie-[oriented toward use of natural parallelism and parallelism of related operations
6 .

The main processor part of the Inchine omelets of two postal-tuned lines of pro-
cessors. Each line. depending on the operational code, represents either a

10
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

 

Figure 7. The "-10 couputer.

lé-digit figure of eight. a 32-digit tetrad or a pair of Git-digit processors which
perform one and the same operation (on different data. of course). The other line
of processors for a separate operational code contained in a vector-instruction
can simultaneously perform the same or a different operation. Definite operational
codes gather all the processors of the line in a single vectorial processor. For
exanple, during perfomnce of the operation "scalar product". in the line of pro-
cessors in the course of a single cycle eight pairs of 16-digit or four pairs of
32-digit numbers are multiplied in pairs and the obtained products: are summed with
one another and with the sun accumulated in the preceding cycle.

Sinultaneously with the pet-forums of operations on numbers. in the main processor
lines up to five lines of Boolean variables are produced in which each binary digit
corresponds to a definite sign relating to operands participating in the operation
or to the result of the operation. For exanple, during addition (of eight pairs of
lé-digit or four pairs of 32-digit. or two pairs of 6h-digit numbers). lines of
Boolean variables are produced which contain 8. It or 2 binary digits respectively:
a: --the sign of overfilling; e «the sign of equality of components with one an-
other; a --the sign that the first component? in the given pair proved to be larg-v

er than the second; 2 --the sign of equality of the result to zero: x «the sign of
obtaining a negative result.

These signs can be transmitted directly or through the memory into a special pro-
cessor for processing lines of Boolean variables which acts simultaneously with the
lines of main processors and is capable of executing the complete set of logical
operations on Boolean variables. The lines of Boolean variables obtained directly
during execution of the main arithmetic or logical operations on the nulbers or as
a result of the work of the indicated special processor, or read from the memory.
can be used further to organize provisional transmissions of control or as "masks"
to perform the basic arithmetic-logical operations. If in the operational code
for the basic line of processors it is pointed out that the operation must be car-
ried out under a mask. then in the line those processors are blocked for which the
corresponding places of the mask contain zeros (and when the operation is per-

formed under an "inverse" mask the processors are blocked for which the correspond-
ing places of the mask contain units).

11
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The mechanism of tasks is an important tool in the efficient organization of
parallel computations.

Still another specialized processor in the central part of the machine is intended
for the execution of index operations.

For tasks which have sufficient natural parallelism the mean speed of the H-lO is
more than 5 million operations per second.

The capacity of the internal memory of the Inchine is 5 Hbytes (1.310.720 words).
In that case, to provide all the processors with rands. each reference to the
memory is performed in a format of up to 64 bytesafteIp to 512 information positions)
and the machine instructions are two-address.

The operating system of the machine assures users working in an interactive mode
with time sharing access to the translators and means of debugging progress in
algorithmic languages. reference on the logical level to peripherals and standard
procedures. the use as finished modules for the charging of programs from the li-
brary of standard programs (linear algebra. approximation of functions. squaring.

the integration of ordinary differential equations and equations in partial derive-‘-
tives. etc .

External exchange of information is done through a multiplex channel with a total
throughput capacity of about 7 "bytes/second. The multiplex channel Ms 2“ duplex
subchannels. to each of which in turn up to six peripherals of the same kind can
be connected. The basic complex of the machine includes as peripherals terminals
constructed on the basis of a typewriter with punched-tape equipment. alphanumeric
line—printers. punched card equipment and an engineering panel typewriter by means
of which the apparatus Journal of the rachine is kept. Through additional coupling
devices. terminals based on hatched displays with keyboards and a light pen can be
connected to the clunnel. as well as magnetic tapes and disks and other Yes com-
puter peripherals. The channel has its own buffer memory with a volume of 61s
Kbytes. in which channel command words also are stored. but it can be addressed
directly also to any cell of the internal memory of the machine.

In the machine provision has been made for circuits which permit combining up to
seven 11-10 computers in a single synchronous complex working from a common clock
pulse generator. In each cycle the machine, working in the complex can issue to
its output lines a data file of 6'4 bytes and receive a file of the same size from
any other machine of the complex. In that case the addressing of the mchines is
Virtual [5]. Special apparatus of the descriptors of connections efficiently re-
places the virtual number of the machine. from which information is received. by a
physical number. When necessary this must permit forming several suboomplexes
within the synchronous complex. At the same time. as was supposed. together with
natural parallelism and parallelism of related operations. parallelism of indepen-
dent branches could be used in the complex. and increase of the system productivity
could also be achieved. However, the possibility of organising synchronous com-
plexes of H-lo computers has not yet been realised anywhere in practice.

In the long term. obviously. it makes sense to become oriented toward simultaneous

use of parallelism of independent branches (2 to 1. branches) and parallelism of a
set of objects.

12
FOR OFFICIAL USE ONLY

In that case the equipment of the system can be constructed so that pregrams for
the solution of various tasks. even in a machine language. do not depend at all on
the number of processors performing parallel processing of sets of objects, and
look exactly the same as programs of an ordinary (one-processor) Inchine. In this
way one achieves both complete program c tibility of systems different in their
completeness of sets (number of prom“? and high viability of the system (the
passibility of continuing to work when some of the processors fail).

BIBLIGIRAPHY

l. Kartsev. H. A. "The Problem of Organising Parallel Computations and the
Structures of Computer Systems." Naterisly Vsesoyumoy konferentsii "Vychis-
litel'nyye sistely, seti i tsentry kollektivnogo pol'zovsniys" (Materials of

the All-Union Conference on “Comter Systems. Networks and Shared Hulticom-
puter Centers”) h.1. Novosibirdt, 1980, pp 6h-77.

2. Glusﬂtov. V. H.. Kapitonova. Yu. V.. and Letichevekiy, A. A. ‘Theory of Data
Structures and Synchronous Parallel (Io-pastime.“ XIBERNEI‘IKA. 1976, No 6.
Pp 2‘15.

3. Glivenko, Ye. V. "On One Principle of Parallel Computations.” PRmRAMRO-
VANIYR. 197?. N0 1. PP 3-9~

h. Ihrtin. D. F.. and Estrig. 0. ”Experiments on Models of amputation and
games.“ 1m: TRANSAGI‘IGIS 0" me mans. Ec-16. 196?. No 1. pp
7-79.

5. Kartsev, n. A. ”Questions of the Construction of Hultiprocessor Systems.”
VOPROSY RADIOEIKTRGHKI. 1970, No 5-6. pp 3-19.

6. Kartsev. n. A. “The H-lO Couputer.” DGCLADY mum: NAUK sssn. 1979. 2%,
No 2. pp 309-312-

COPYRERI‘: IZDATEL'SI‘VO "NAUKOVA MA“. ”(HERMAN 1981

217a
cso. 1863/258

1 3
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

SOFTHIRE

UDC 681.3.06:[658.012.011.S6:6S8.7/.8]
OPERATION OF UNIFIED SYSTEM COMPUTERS IN SVS MODE

Moscow MATERIAL'NO-TEKHNICHESKOYB SNABZHENIYE, SBRIYA 6: PRIHENENIYE
HATEHKTICHESKIKH HETODOV, VYCHISLITBL'NOY TEKHNIKI I ORGTZKHNIKI V HATERIAL'NO-
TEKHNICHESKOM SRABZHENII in Russian No 5, May 80 (manuscript received 17 Jan 80)
pp 10-11

iAbstract prepared by c. S. Gradov, deputy department chief, USSR Gossnab Main Com-
‘puter Center, and V. K. Burmistrov, senior scientific associate of the NIIHS]

[Text] Operation of Yes 05 in the Mode of Hultiprogramming
with a Variable Number of Tasks that Jointly Use Virtual
Storage (SVS)

Associates of the USSR Gossnab Main Computer Center and the
NIIHS [Scientific Research Institute of Economic and
Organization of the Supply of Materials and Equipment] have
generated a specific version of Yes 08 in the SVS node for
the Yes-1055 computer. The logic of the operation of Yes OS
in this mode affords effective support in building complex
software systems for large-scale information problems for the
USSR Gossnab, such as: interoutput balances, planning of
warehouse facilities, bookkeeping reporting and other tasks
of the USSR Gossnab ASU.

Operation of Yes Computer in SVS Mode

The Yes 05 operating system of the SVS mode is a practical implementation of the
concept of virtual storage in Yes computers. It can be used on "Series-2" compu-
ters as well as on all computers with similar principles of operation.

The segment-page method of organization of virtual storage is used in Yes 03 of the
SVS mode. Segment size is 65K bytes and page size is 2! bytes. The beginning
address of a segment is an aliquot of its size. The beginning address of a page is
an aliquot of its size. The maximal size of virtual storage may reach 16H bytes.

Actual storage holds the pages of virtual storage in use at a given time. Unused
pages are stored in external storage in the system data set SYSL PACE.

The software part that defines the page replacement algorithm is called the
replacement algorithm.

1h
Two replacement algorithaa are provided in the SVS node: the standard (LRU--least
recently used) and the modified. Sometimes the guaranteed availability of a page
of virtual storage may be required in actual storage in the course of a certain

time. For this, pages are fixed that are not replaced. Pages are fixed for a
short or a long time.

Virtual addresses are converted into real by both hardware and software:
the hardware feature is the dynamic address translation feature (0A1);

the software features are address translation tables: segment tables and page
tables.

COPYRIGHT: Tsentral'nyy nauchno-issledovatel'skiy institut informatsii i tekhniko-

ekonomicheskikh issledovaniy po material'no-tekhnicheskonu snabzheniyu Gossnaha
$533, 1980.

8565
CSO: 1863/245

15
ron orncm. use om!
FOR OFFICIAL USE ONLY

EXCERPTS FROM 'ALGORITHHS AND PROGRAHS', FEBRUARY 1981

Moscow ALGORITHY I PROGRAHHY in Russian No 2, Feb 81 pp 1-132

[Excerpts]

675. Simurzin, V. N., ”Selection of Rectangular Network by Specified Irregular
Networks," in the book "Osnovnyye metody matematicheskoy geologii i resul'taty
issledovaniy" [Basic Methods of Mathematical Geology and Results of Research),
Yakutsk. 1980, pp 112-118, bibl. of 7 titles.

Gives an example of selecting a rectangular network according to the irregular net-
work of seismic stations of the Sredne-Botuobinskoye gas deposits on the M-222 com-
puter.

586. Bezruk, I. A. and Safonov, A. 8., "Principles of Constructing an Automated
System to Process Data Obtained by Using Digital Electric Geophysical Exploration
Stations," PRIKL. GBO?IZIKA. all-Union Scientific Research Institute of Geophysical
Methods of Prospecting, 1980, issue 98, pp 93-102, bibl. of 7 titles.

The basic problem is solved in three stages: preprocessing, the processing proper
and interpretation. Basic properties of the BPAK system have been formulated:
adaptation of the system on all basic types of computers; simplicity of including
new programs in the system, simplicity of operation and introduction of the system.

585. labelin, V. A. and Pystkin, V. P., "Identification of Checkpoints in Aerospace
Images," in the book "Hatematicheskiye i tekhnicheskiye problemy obrabotki
isobrasheniy" [Mathematical and Technical Problems of Image Processing],
Novosibirsk. 1980, pp 50-59. bibl. of 4 titles.

Identification of checkpoints is reduced to determining local coincidence of frag-
ments of images using a program in the FORTRAN-TsBRN language with a size of about
100 statements. Average operating time for a reference of 20 x 20 elements and a
search field of 50 x 50 elements is 3 minutes taking image rotation into account.

586. Lukasheva, 0. 8.; Pyatkin, V. P. and Shevelev, S. L., "Systems Software for

an Image Processing Complex," in the book "Hatematicheskiye i tekhnicheskiye
problemy obrabotki izobrazheniy". Novosibirsk, 1980. pp 84-96, bibl. of 6 titles.

16
The K012 image processing complex includes three DESK-6 computers operating with a
common field of disk storage. The FORTRAN, HADLEN and PASCAL languages were used
to implement the image processing complex software.

589. Sidorova, V. S., "Textural Analysis of Aerospace Images by Computer," in the
book "Hatematicheakiye i tekhnicheskiye problemy obrabotki izobrazheniy",
Novosibirsk. 1980. PP 30-36, bibl. of 2 titles.

Describes PORTRAM programs for classification of objects by two systems of textural
features based on the image processing complex of the Center for Geoinformation
Processing.

590. Toropushins. Ye. P.. "Raising the Efficiency of Primary Processing of
Tiltmeter Observations." in the book "Seysmichnost' i sovremennyye dvisbeniya
zemnoy kory vostochnoy chasti Baltiyskogo shchita" [Seismicity and Modern Movements
of Crust of Eastern Part of Baltic Shield], Apatity, 1980, pp 108-111, bibl. of 1
title.

Described are the FORTRAN programs BULL-2 and BULL-3 that speed up the process of
preparing materials of tiltmeter observations for harmonic analysis.

591. Voronin, Yu. A. and Gradova, T. A., "RBGION-kompleks programm dlya postanovki
i resheniya zsdsch rayonirovaniya" [REGION Complex of Programs for Statement and
Solution of Problems of Regionslizingl. Novosibirsk, 1980, 46 pages. Preprint/
Siberian Branch of the USSR Academy of Sciences Computer Center, No 258, bibl. of

3 titles.

REGION includes two subsystems: HOHREG and DIARBG (homogeneous and diagnostic
regionalizing) and the complex of auxiliary programs PREDAT-preliminary data pro-
cessing in FORTRAN.

706. Pokatayev, A. Yu., "Optimal Organization of Computation of Full Nor-ed
Gradients," PRIKL. GEOPIZIKA, All-Union Scientific Research Institute of Geophysical
Methods of prospecting, 1980, issue 98. pp 133-136, bibl. of 3 titles.

Author presents original construction of computational process using direct access
external storage to store intermediate results. The algorithm has been implemented
on the BBSH-G computer.

789. Hikhaylov, N. N. and Yanitskiy, P. A., "Numerical Analysis of Dynamics of
Water Saturation in Forming Zone of Penetration in Productive Strata," PRIKL.
GBOPIZIKA, All-Union Scientific Research Institute of Geophysical Methods of
Prospecting, 1980, issue 98. PP 168-178, bibl. of 13 titles.

Authors describe a physicomathematical model of penetration of filtrate of drilling
mud in petroleum and gas bearing strata. Computations were implemented on a Yes-
1060 c mputer.

795. Gubin. P. 1., "Software for Processing Frame Video Information (in DOS on Yes
Computers)," in the book "Trudy HPTI. Seriya Aerofiziks i prikladnaya metematika"
[Transactions of the Moscow Physicotechnicsl Institute: Series on Aerophysica and
Applied Mathematics], Moscow, 1980, pp 125-127.

17
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The SMOOKI program package for processing aerospace video information supports
putting information into a computer from Ml [magnetic tape], storage of it,
statistical processing and reflection of processing results in various forms.

812. Kondrat'yev. 0. K. and Orlov. V. P., "Diffraction Transformation of Seismo-
grams in the Method of Transmitted Composite Haves," PRIKL. GEOFIZIKA, All-Union
Scientific Research Institute of Geophysical Methods of Prospecting, 1980. issue
98, pp 42-53. bibl. of 13 titles.

Algorithm for construction of dynamic deep sections by seismograms of method of
transmitted composite waves (MPOV) Las been implemented on the BBSM-b computer.
Application of D-transformation in the MPOV eliminates correlation and determination
of travel time curves of waves from the procedure for construction of a deep section.
To obtain one path of a section. two-three minutes are required.

813. "Method of Calculation of Composition and Properties of Transfer of Hetero-
geneous Systems," Ye. V. Samuylov. I. B. Rozhdestvenskiy, N. N. Tsitelauri and M. A.
Budko, in the book “Oanovnyye metody matematicheskoy geologii i resul'taty
issledovaniy", Yakutsk, 1980. pp 78-82, bibl. of 13 titles.

814. "Computer Modeling of Process of Processing of Frequency Modulated Signals in
Devices on Surface Acoustic Haves," Ye. Ya. Bershadskiy, V. A. Vinogradova, V. K.
Sirotko and A. P. Fedorov, ELEXIROM. TEKHNIKA. SEX. 10. MIKROELBKIRON. USTROYSTVA,
1980. issue 5(23), pp 61-66, bibl. of 5 titles.

Technique of modeling of formation and compression of frequency modulated signals
in devices on surface acoustic waves has been implemented on the M—222 computer.
Calculation time when 1026 points are specified is about two minutes.

COPYRIGHT: Gosudarstvennays publichnaya nauchno-tekhnicheskaya biblioteka SSSR
(CPNTB SSSR), 1981

8565
C30: 1863/2b6

18
[Excerpts]

398. Gavrilov, G. K., "Efficient Programming Technology," VOPR. RADIOELEKTRON. SBR.
EVT, 1980, issue 8, pp lJS-lbl, bibl. of 8 titles.

Recommendations on imrpoving labor productivity of programmers and improving the
quality of programs.

685. Brodskeya, I. H. and Kamynin, S. 8., "Algorithm for Recognition of Partially
Visible Objects," Moscow, 1980, 34 pages, Preprint/Academy of Sciences of USSR,
1?" [Institute of Applied Hathematics], No 107, bibl. of 8 titles.

Size of training program is 1110 single-address instructions, and that of the
recognition program is 3126. About 16500 words of main storage is required to

operate the program.

505. Pikel'ner, S. L. and Romanov, V. 0., "Dynamic Display of Hultiprogramming in
YeS OS," EKBLTRON. TBKHNIKA. SBR. 9. BKONOHIKA I SISTEHY UPR., 1980, issue 3(36),
pp 31-32. bibl. of 4 titles.

A method of obtaining a graphic presentation of the multiprogramming factor as a
function of time has been implemented in the PL/l language. Program size is 76K
bytes, and time for construction and printout of daily diagram is three to five
minutes.

511. Zaytseva, zh. N., Yablonskaya, 0. V. and Bodryagin, V. 1., "Procedure for
Selection of Printed Conductors for Layout," VOPR. RADIOELEKTRON. SER. EVT, 1980,
issue 8, pp 124-126, bibl. of 3 titles.

PL/l program for selection of arrangement of conductors for layout, which supports
minimization of conflict situations in designing printed circuit boards, with a
size of 232 statements takes 22 seconds of machine time.

513. RADIOTEKRNIKA: RESP. MEZHVED. NAUCB.-TBKHN. $8., Khar'kov Institute of
Rndloelectronics, issue 55, Khar'kov, Vishcha shkola, 1980, 109 pages, hibl. at end
of articles.

19
FOR OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

From contents: V. M. Bezruk, V. A. Omel'chenko and N. A. Pederov, "Comparative
Analysis of Adaptive and Correlation Methods of Receiving Discrete Signalsl'pp 3-11;
V. A. Omel'chenko et al., "Recognition of Random Signals Based on Digital Analyzers
of the Spectrum," pp 11-17; Yu. A. Richigin. Z. N. Muzyka and S. A. Sokolov,

"Study of Statistical Characteristics of Signal-to-Noise Ratio at Output of Radio
Receiver with Nonlinear Interaction of Signal and Noise in Its First Cascades,"

pp 18-26; S. F. Simovskaya end 0. M. Lebedeva, "Analysis of Correlation Function of
Random Radio Signal by Method of Digital Modeling on Carrier Frequency," pp 79-84.

517. Brodskiy, A. Ya. and Yevseyeva, L. M., "Software for Data Retrieval System
for Scientific Research Institute,” ELEKTRON. TEKRRIKA. SER. 9. EKONOMIKA I
SISTEMY UPR., 1980. issue 3(36), pp 26-29.

528. Alekseyev, R. V.. "Subsystem for Automated Synthesis of Checking Experiments
for Discrete Devices." TEORIYA KONECR. AVTOMAIOV I YEYE PRIL., Academy of Sciences

of Latvian SSR, Institute of Electronics and Computer Technology, 1980, issue 11,
pp 79-91. bibl. of 4 titles.

Size is about 3000 instructions. Test for checking of circuit of 23 elements with
7 inputs, 7 signal branching points and 1 output, consisting of IA sets, obtained
in 6 minutes and 60 seconds.

Key words: methodology, FORTRAN-4, Nova 2/10. checking experiments, discrete
devices.

529. Grishina, I. 3., "'Library Statistics' Program Package," ELEKIRON. TEKRNIKA.
SER. 1. ELEKTRON. SVCh, 1980, issue 7(319). PP 76-75, bibl. of 3 titles.

Describes the FORTRAN program package "Library Statistics" for acquisition and
storage of statistics on use of programs from common libraries.

562. Kol'dyayev, V. 1., "Kinetics of Charge Injection in MDP [metal-insulators";—
conductor] Transistors with Floating Cate," ELEKTRON. TEKHNIKA. SER. 3. HIKROBLBKP
TRON.,]980. issue 2(86), pp 14-20, bibl. of 17 titles.

563. Kol'dyayev, V. 1.. "Kinetics of Charge Relaxation from Insulated Layers of
Polycrystalline Silicon," ELEKTRON. TEKHNIKA. SER. 3. MIKROELEKTRDN., 1980. issue
3(87), pp 14-19. bibl. of 11 titles.

Difficulties of depolarization of insulated conducting layers, prerequisites of
kinetics of charge relaxation. Mathematical model of phenomenum has been con-
structed on the assumption of Schottky and Povler-Nordheim emission. Model of
charge spread has form of a system of algebraic differential equations that are

solved with a FORTRAN program. Computation time of one integration for t from 0
to 100 years is about 2 minutes.

564. Kondrat'yev, I. 1., "Mathematical Processing of Gamma Spectra of Samples of
Aerosols Using Correlation Filtering Method," TR./DVNII, 1980, issue 91. "Problems

of Hydrometeorology of Eastern Siberia, the Far East and the Pacific Ocean," pp
78-83. bibl. of 5 titles.

20
FOR OFFICIAL USE ONLY
567. Malinovskaya, Ye. V. and Halyshev, Yu. A., "Calculation of Resistance of
Layer of Pinch-Resistor of Semiconductor Hicrocircuits," ELBKTRON. TEKHNIKA. SBR.
3. MIKROELEKTRON.. 1980. issue 3(87), pp 20—27, bibl. of 6 titles.

Algorithm forms basis of FORTRAN program that performs either "single" analyses.
i.e. calculation of resistance of layer with fixed parameters of technological
process (time is 2-3 seconds) and voltages, or calculation of dependency of
resistance of layer on minimal back bias and voltage on resistor with fixed
technological parameters (time is 1-2 minutes). Storage size is 22K bytes.

568. Han'kin, I. A., Usherovich, B. L. and Kontorin, Yu. F., "Program for Calcula-
tion of Nonlinear Conditions of LBV [Traveling Have Tuve] on Chain of Connected
Resonators." ELEKTRON. TEKHNIKA. SER. 1. BLEKTRON. SVCh, 1980. issue 7(319). pp
75-76. bibl. of 6 titles.

Described is FORTRAN program for calculation of nonlinear output characteristics of
LBVR (efficiency factor, gain factor, wave phase) in a band of frequencies as a
function of geometric and electric parameters of instrument. Calculation time for
three points of operating range of systems with number of resonators not exceeding
20 does not exceed 15 minutes.

571. Hirgorodskiy, Yu. N.; Myachin, G. H. and Rudenko, A. A., "Program for Calcu-
lation of Dynamic Characteristics of Silicon Planar Schottky Diode," ELEKTRON.
TEKHNIKA. SER. HIKROELEKTRON., 1980, issue 3(87), pp 90-92, bibl. of 5 titles.

Length of FORTRAN program is 550 conditional statements, reserved size of storage
is 32 sheets of main storage. Calculation time of one point on pulse characteris-
tic of planar Schottky diode is 20 seconds.

572. Hirgorodskiy, Yu. N.; Hyachin, G. M. and Rudenko, A. A., "Program for Calcu-
lation of Static VAKh [Volt-Ampere Characteristic] of Silicon Planar Schottky
Diode," ELEKTRON. TEKHNIKA. SER. 3. HIKROBLEKTRON., 1980, issue 2(86), pp 98-100,
bibl. of 2 titles.

S75. Pasynkov. I. G. and skoryupina, I. V., "Interactive Subsystem for Correcting
Double-Sided Printed Circuit Boards Designed by Using 'Aytomat-Z' System." Moscow,
1980. 13 pages, Preprint/IAE, No 3312/16, bibl. of 6 titles.

"Correction" subsystemforediting printed circuit boards in interactive mode using
VT-34O type alphameric display. Program package is written in PORTRAN-GDR and
NADLEN languages.

576. "Application of Method of Finite Elements to Calculation of Temperature
Fields in Assemblies of Electronic Instruments." by I. H. Bleyvas, A. I. Zhbanov,

V. S. Koshelev and V. N. Shevtsov, ELEKTRON. TEKHNIKA. SER. 1. ELEKTRON. SVCh, 1980,
issue 7(319), pp 72-74. bibl. of 1 title.

Average time for solving one problem is one to five minutes.

21
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

598. Dydychkin. A. Ye., "Method of Calculation of References of Typewritten
Characters with Computer," VOPR. RADIOELBKTRON. SER. EVT, 1980, issue 8, pp 167-174,
bibl. of 2 titles.

Describes a FORTRAN program for automatic construction of references. Program run
time is proportional to number of points approximating the character and ranges from
3 to 12 minutes.

599. Dydychkin, A. Ye. and Kalinin. A. V., "Modeling the Process of Generating
Typewritten Print," VOPR. RADIOELBKTRON. SER. EVT, 1980, issue 8, pp 161-166, bibl.
of 6 titles.

Method of reducing sample size for teaching and assessing validity of automatic
reading machines based on using FORTRAN program to generate binary images of type-
written print.

615. Yasenovets, A. V., "Software for Formatting and Editing of Text for Wang Mini-
computer," in the book "Tipovoye proyektirovaniye vtoroy ocheredi otraslavykh
podsistem ASPR" [Standard Design of Second Phase of Sector Subsystems for Automated
System of Plan Calculations], Moscow, 1980, pp 108-111.

643. Litavrina, V. N. and Nikitin, S. A., "Language for Describing Topology of
SVCh cts iSuper—High-Frequency Hybrid Integrated Circuits]," BLEKTRON. TBKHNIXA.
SER. lO. MIKROELEKTRON. USTROYSTVA, 1980, issue 5(23), pp 53-56, bibl. of 1 title.

Language for coding SHF microcircuits is used in a system for automated design of
topologies of integrated circuits and forms a part of the CRAP language for
description of graphic information.

682. Kazsnskiy, A. V.; Khaykin, A. P. and Trusenkov, S. T., “Application Program
Package for Man-Machine Analysis and Forecast of Temperature of Surface Layer of
Ocean," TR./DVNII, 1980, issue 91, "Problems of Hydrometeorology of Eastern Siberia,
the Far East and the Pacific Ocean," pp 39-63, bibl. of 9 titles.

683. Yukhnovets, B. P. and Burzayeva, Ye. 1., "Checking Topology and Complex
Patterns in Designing Hybrid Pilm Microcircuits," TR./NIITBPLOPRIBOR, 1980, collec-
tion 89, "Technology of Manufacture and Automated Design of Transducers of Heat and
Power Parameters," pp 56-63, bibl. of 6 titles.

Method of checking topological patterns for minimally permitted dimensions has been
implemented in a system for automated design of film hybrid microcircuits-SAPR
"PLATA"--MSSP. Program run time when checking topology containing 600 points on
the M-4030 computer is 15 seconds.

692. Tikhonov, Yu. V., "Software for 'INTRAS' Interactive Graphic System," in the
book "Trudy MFTI. Seriya Aerofizika i prikladnaya matematika" [Transactions of the
Moscow Physico-Technicsl Institute: Series Aerophysics and Applied Mathematics],
Moscow, 1980, pp 146-146, bibl. of 3 titles.

22
697. Mannsov, S. 0.; Kachetkov, V. I. and Cherednik, V. 1., "Second Zone of
Oscillator with Brake Field." ELEKTRON. TEKHNIKA. SER. 1. ELEKTRON. SVCh, 1980,
issue 7019). pp 21-25. bibl. of 6 titles.

Results of theoretical research of nonlinear interaction of electron flow with high-
frequency field of working interval of oscillator with brake field (01'?) in second
zone of oscillation. System of equations for nonlinear unidimensional theory of
61'? has been solved on the 38514-6 computer by the Cauchy-Euler method.

701. Karimberdiyeva, 8., "Some Studies of Daily Course of Components of Heat
Balance of Active Surface," TR./SR£DN£AZ. REGION. N11, 1980, issue 68(149),
"Problems of Hydrodynamics of Atmosphere," pp 32-42, bibl. of 14 titles.

Describes algorithm for solving equation of heat balance on DESK-6.

702. Hazilov. V. N. and Kashik, S. A.. "Application of Claatic Analysis in
Mineralogical Studies," in the book "Osnovnyye metody matematicheskoy geologii i
rcaul'taty issledovaniy" [Basic Methods of Mathematical Geology and Results of
Research], Yakutsk. 1980. pp 66-70. bibl. of 2 titles.

703. Hayorov. S. A. and Rudenko, A. A., "Method of Calculation of Dynamic Character-
istics of MD? iMaximum Dynamic Error] of Capacitor in Two-Dimensional Approximation
on Large Signal," ELEKTRON. TEKHNIKA. SER. 3. HIKROELEtTRON., 1980, issue 2(86),

pp 79—83, bibl. of 5 titles.

Exaaple of calculation on ”SH-6 computer of nonstationary distributions of potential
and carriers of charge for solving problem of calculation of dynamic VAKh [volt-
ampere characteristics] and Vl-‘Kh [expansion unknown] of MD? of capacitor in two-
dimensional approximation.

701a. Mirgorodskiy, Yu. N. and Rudenko. A. A., "Method of Calculating Static
Characteristics of Silicon Planar Schottky Diode," HIKROELEKTRON. I POLUPROVODNIKO-
WYE PRIBORY: SB. STATEY, 1980, issue 5. PP 194-199. bibl. of 10 titles.

Calculation of volt-ampere characteristics (VAKh) of Schottky planar diode is based
on solution of boundary problem of nonlinear system of equations of continuity and
Poisson in two-dimensional area for the case when width of the area of space charge
at Schottky contact is small compared to characteristic linear dimension of diode.
Cross-sect ion of Schottky diode is covered by spatial network with number of
assemblies being about 1000. VAKh calculation time for Schottky diode on “SH-6
computer is 8 minutes.

708. Vekshina, Ye. V.; Skorik, V. A. and Pursin, G. 1., "Machine Modeling of Shift
Register with Thyristors with Plasma Bond," ELEKTRON. TBKHNIKA. SER. 3. HIKROELBK-
TROR.. 1980. issue 2(86). pp 63-66, bibl. of 5 titles.

Shift register with instruments with plasma bond (PPS) is base element for develop—
ment of logic circuits, parallel adders, triggers and storage. Model of PPS for
computer design of transistorized LSI circuits allows determining extremal para-
meters of a shift register.

2’3
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

710. Nechayev, A. H.; Rubakha, Ye. A. and Sinkevich, V. P., "Modeling Tailures and
Machine Tests in Studying the Reliability of Power SVCh [Microwave] Transistors."
HIKROELEKIRON. I POLUPROVODﬂIKOVYYE PRIBORY: SB. STATEY._1980, issue 5. pp 98-117.
bibl. of 16 titles.

Discussed are machine models of main types of failures of power microwave transis-
tors: simulation model of thermal breakdown and physics-statistical model of
electrodiffusion failures. Up to 100 hours of BESH—G computer operation are needed
to implement the machine tests of transistor structures.

772. Pogodin, A. Ye., "Hays of Raising Computer Throughput," VOPR. RADIOELBKIRON.
SER. EVT. 1980, issue 8, pp 131-136, bibl. of 3 titles.

Raising throughput of software systems built with Yes computer facilities through
organization and arrangement of data on HD [magnetic disk] storage units to reduce
data access time.

792. Sunduchkov, K. S. and Leshchenko, Yu. 1., "Automation of Synthesis of
Structural Circuits of Low—Noise Receiver-Amplifier SVCh [Microwave] Devices,"
ELEKTRON. TEKHNIKA. SER. 1. BLEKTROK. SVCh, 1980, issue 7(319), pp 64-69, bihl. of
14 titles.

796. Kirillov, D. A.: Naumenko, V. I. and Skorokhodov, 0. V., "Development of
Hierarchical Models in the 'Poisk—l' Information Systel," VOPR. RADIOBLEKTROh. SER.

EVT, 1980, issue 8. pp 3-9, bibl. of 4 titles.

The Poisk-l documentary data base management system supports efficient retrieval in
large data bases. Language for defining hierarchical structures is suggested and
language for manipulating systems is expanded.

810. Belyavskiy, Ye. D. and Gel'ner, V. V., "Numerical Analysis of Nonlinear
Distortion of Shape of Nonperiodic Signal in LEV [Traveling Have Tubel," ELEKTRON.
TEKHNIKA. SBR. 1. ELEKTRON. SVCh, 1980, issue 7(319), pp 69-72, bibl. of 5 titles.

Technique for strict (unidimensional) calculation with sass-a computer of shape of
nonperiodic signal when it passes through LEV, on basis of which is made numeric
analysis of nonlinear distortion of short pulses in Lav in nonlinear mode with regard
to nonstationary effects.

836. "Modular Construction of Software for Automated Process Control System for
Production of Integrated Circuits," by V. H. Gudkov, V. I. Nadtochiy, A. L.
Shabslin and T. P. Shvankova. BLEKTRON. TEKHNIKA. 833. 9. EKONOHIKA I SISTEMY UPR.,
1980, issue 3(36), pp 29-31, bibl. of 3 titles.

Modular software construction achieves invariance of it with respect to problems and
objects of control. Implementation of principles in system for monitoring quality
of process gases, developed on the base on the Blektronika-lOOI minicomputer, has
shown their high efficiency.

eh
:m. use ONLY
83S. Holchanova, L. P. and Ostrovskiy. V. I., "Algorithm for Identification of
Process Defects in Microcircuits," BLEKTRON. TBKHNIKA. SER. 10. HIKROELEKIRON.
USTROYSTVA, 1980, issue 5(23), pp 49-52, bibl. of 2 titles.

Algorithm has been implemented in the form of two programs for the Elektronika-IOOI
computer. Time for analysis of one microcircuit with dimensions of l x 1 cm is
about 7.5 seconds.

836. Osetinskiy, L. G. and Osetinskiy, H. 6., "Software Controlled Process System
for Manufacture of Photographic Masks for Large-Scale Integrated Circuits,"

ELEKIRON. TEKHNIKA. SBR. 9. EKONOHIKA I SISTEHY UPR.. 1980, issue 3(36), pp 23-25,
bibl. of 4 titles.

Organization of storage on ML [magnetic tape] of control information for generators
of images--file as [operating system] that supports control of photocomposition
equipment from the Elektronika-lOOI minicomputer.

860. Astsaturov, R. H.; Nikolayeva, G. V. and Sigalov, G. 6., "Study of Algorithms
for Control of Heirarchical Storage of Microprograms," VOPR. RADIOELEKTRON. SBR.
BVT, 1979, issue 12, pp 3—16, bibl. of 8 titles.

Using analytic and simulation models, study is made of a number of algorithms that
support fetching microinstructions for execution from fast and slow section of
control storage.

879. Samarskiy, A. 3.; Pykhtin, V. Ya. and Vasilevich, V. V., "Estimating Complex
Throughput of Computers by Analytic Methods," VOPR. RADIOBLBKTRON. SER. EVT, 1979,
issue 12, pp 69-79, bibl. of 8 titles.

Analytic model for estimating complex throughput, basic elements of which are the
processor and selector channels; procedure for calculating level of multiprogramming
with regard to computer resources. Gives an example of calculating throughput for
the Yes-1022, -1033 and -1035 medium class computers.

880. Sigalov, G. G. and Kur'yanova, N. I., "Estimating Computer Operation with
Separation of Input-Output from Job Processing," VOPR. RADIOELKKTRON. SER. BVT,
1979, issue 12. pp 41-47, bibl. of 4 titles.

Technique of using model of computer operation under conditions of separating input-
output from process of job processing together with estimate of maximum possible
factor of combining operation of devices for selection of number of input-output
devices, degree of multiprogramming and maximum size of job queue on disk.

882. "Structure of Collective-Use Automated Design System," by A. V. Grekovich,
A. A. Bozhko, A. B. Trofimov and N. A. Pederov. VOPR. RADIOELEKTRON. SBR. EVT, 1979.
issue 12, pp 53-59. bibl. of 2 titles.

Principles for development of structure of INTER-SAPR system, problems of organiza-
tion of exchange of application program facilities, trilevel principle of system
coordination.

25
won OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

887. Shklyar, V. B. and Ystsevich, P. F., "Model of Functioning of Heirarchical
Storage of Hicroprograms," VOPR. RADIOELEKIRON. SER. EVT, 1979. issue 12. pp 15-19.
bibl. of 2 titles.

Probabilistic model has been built on basis of Markov model of rsndon process.

COPYRIGHT: Gosudsrstvennays publichnsys nsuchno-tekhnichesksys biblioteks SSSR
(GPNTB SSSR). 1981

8545
080: 1863/266

26
[Excerpts]

920. "Territorially Distributed Multimachine Collective-Use Computer Center," by
c. I. Marchuk, Yu. I. Yeremin, G. I. Karpachev et a1., Novosibirsk, 1980, 59 pages,

(Preprint/Siberian Branch of USSR Academy of Sciences Computer Center, 245).

1036. Zarin'sh, A. Ya., "Noise Resistant Method of Filtration of Satellite Laser
Observations," IAUCH. INPORH./AN SSSR. ASTRONOH. SOVET, AN LAIVSSR. RADIOASTROPIZ.
OBSERVAIORIYA, 1980, issue 66, "Use of Satellite Observations in Geodesy and
Geophysics," pp 60-b3, bibl. of 2 titles.

1076. Vitrichenko, E. A.; Prokhorov, A. M. and Trushin, Ye. V., "Metody
izgotovleniya astronomicheskoy optiki" [Methods of Manufacturing Astronomical
Optics], Moscow, Nauka, 1980. 196 pages, above the title: Academy of Sciences of
USSR, Institute of Space Research, bib1.: pp 138-142.

Describes the American CAOS and CC? and the domestic ZEBRA automated process sys-
tems in the FORTRAN language. The ZEBRA system consists of two subsystems: check-
ing and technology. The checking subystsm has been implemented by the Hartman
method. Gives texts of programs of instructions for operator and checking examples.

1084. Mironov, N. T. and Bogatyrev, K. A., "Calculation of Ephemeris of Satellites
for Observations with First-Generation Laser Ranger," ASTROMETRIYA I ASTRO?IZIKA:
RESP. MEZHVBD. SB./AN UkSSR, CL. ASTRON. OBSERVAIORIYA, 1980. issue 42, pp 83-89.

bibl. of 4 titles.

1097. Trifonov, M. M., "Translator that Forms Programs of Base Elements of GIS
SVCh [Microwave Hybrid Integrated Circuits] Based on Experimental Data," ELEKTRON.
TEKHNIKA. SER. 1. ELEKTRON. SVCh, 1980, issue 8(320), pp 67-69, hibl. of 7 titles.

Describes FORTRAN program package that by matrices of scattering S or matrices of
conductivity Y, specified in band of frequencies, forms program of base element

in autocode of BBSM-6 MADLEN.

27
FOR OFFICIAL US: ONLY
FOR OFFICIAL USE ONLY

1098. Fialovskiy, A. T.; Zaytsev, S. V. and Hikheyev. A. 6., "Calculation of
Constants of Propagation and Diffraction Losses of Higher Type of Waves in
Nonsymmetrical Band Lines," ELEKTRON. TEKHNIKA. 823. l. ELBKTRON. SVCh. 1980. issue
8 (320). p 66, bibl. of 3 titles.

Iteration algorithm with number of variations of field by thickness of dielectric
basis greater than or equal to l in the FORTRAN language. Average calculation
tine of one variant is about 0.08 second.

1115. "Software for Subsystems to Process Images and Charts in Isolines and
Numeric Data," Moscow, 1980, 68 pages, (ALGORITHY I PROGRAHMY/AN SSSR. BIEHS, GIVTS
ASU - GEOLOGIYA, issue 6 (61)).

Described are FORTRAN programs for systems that process multispectral photographs,
halftone images, binary images of schemes of lineaments and erosion networks, and
charts of relief in isolines and numeric data.

1146. Batyrev, Ye. V.; Ocheretyannyy, A. N. and Sazonov, A. A., "On-Line Monitor-
ing of Operating Capability and Diagnostic Checking of Systems for Synchronization
of Checking and Measuring Systems," BLEKTRON. TBKHNIKA. SEE. 3. MIKROELBKTRON.,
1980, issue 4 (88), pp 65-76. bibl. of 3 titles.

Algorithm for checking efficiency of H-6000 computer Assembler language takes no
more than 300 instructions, and execution time including printout is no more than
2 seconds. The algorithm for diagnostic checking has been implemented in the BASIC
language, and execution time with printout of results is no more than 5 minutes.

lZlh. Rebrik. S. 3., "Movement of Eyes and Processes of Organization of Sensori-
motor Activirfy," BRGONOHIKA. TR./VNIITBKIN. ESTETIKI, 1980, issue 19, "Studies of
Functional Structure of Actuating Activity,” pp 75-89.

Studies to define the functional relationship berueen processes of organization of
instrumental activity and eye movement activensss accompanying it were performed
on the “-6000 computer.

1215. Sirotkins, Ye. B. and Apipova, A. 1., "Study of Temporal, Preciseness and
Spatial Characteristics of Movement under the Effect of Stresses," ERGONOHIKA. TR./
VNIl TEKHN. ESTBTIKI, 1980. issue 19, "Studies of Functional Structure of Actuating
Activity," pp 38-43.

Study of method of microstructure analysis with M4000 computer to find out selective
effect of medicinal preparation of (kavinton) on structural components of whole
activity.

1224. Grigor'yev, A. D.; Sipsyev, S. A. and Yankevich, V. 3., "Computer Design of
Ring-Type Resonators," ELEKTRON. TERENIKA. SER. l. ELBKTRON. SVCh, 1980, issue
8 (320). PP 66-67, bibl. of 2 titles.

Described is an algorithm for calculation of uorking B-type of oscillations in ring-
type resonators (coaxial) using condition of orthogonality of eigen functions.
Results of solving test-problems on the BESH-6 are given.

28
1237. "Operating Instructions for the CRJE System for Local Displays of s Yes-7906
Complex," by R. S, Triandofilidi, Heston, 1980, 89 pages (HETOB REKOHENDATSII P0
PROGWIR. NA YES EVM/AN SSSR. TSM, issue 18), bibl. of 1. titles.

Instruction on preparing jobs for the system, examples of use of job input contends,
job editing during debugging, obtaining results of an executed job and
conversation with central computer operator.

1262. Prahiyalkovskiy, V. V. and Lomov, Yu. 8., "Tekhnicheskiye i programmnyye
sredstva Yedinoy sistemy BVH (Yes EVE-2)" [Unified Computer System Hardware and
Software (Yes Computer-2)], Moscow, Statistika, 1980, 230 pages, bibl. of 21 titles.

1259. Andreyev, G. G. and Koptseva, N. N., "Machine Method of Smoothing Out
Average Photo Tone over Area of Aerial Photographic Image," TR./GOS. N.-I. TSENTR
IZUCH. PRIROD. RESURSOV, 1980, issue 10, "Some Results of Natural Resource Research
Using Aircraft and Polygon Facilities,“ pp 30-61, bibl. of 1 title.

Flowchart of program for Yes-1022 computer to correct photo tone of aerial photo-

graphic images to eliminate distortions ate-ing from nonuniformity of function of
distribution of illumination of lens.

1263. Arifov, P. 0.; Zakirov, T. A. and Nasirov, A., "Construction of Hultimachine
System to Automate Experiments on Emission Electronics," VOPR. KIBERNETIKI, UzSSR
Academy of Sciences, Institute of Cybernetics and Computer Center, 1980, issue 110,
VT V UPR.: SB. NAUCH. TR., pp 8-13, bibl. of 6 titles.

Problems of developing a multimachine system based on the Yes-1022, the Elektronika
K-200 and CAMAC standard equipment using the principles of unified bus system for
exchange of information.

1273. Platonov, A. V., "Complex of Problems of Accounting of Traffic of Physical
Assets," VOPR. RADIOELEKTRON. SIR. A80, 1980, issue 1, pp 57-63, bibl. of 3 titles.

1311. Vayda, F. and Chaksn', A., "Microcomputers,“ translated from Hungarian,
Moscow. Bnergiya, 1980, 359 pages, bibl. of 32 titles.

Organization, principles of operation and fields of application of microprocessors
Intel 8008, 8080. 3000, PPSZS, PPSb, ucsa, and questions of designing microcomputers
based on microprocessors.

COPYRIGHT: Gosudarstvennaya publichnaya nauchno-tekhnicheskaya biblioteka SSSR
(GPNTB SSSR), 1981

8545
C50: 1863/246

29
FOR 0F?ICIAL USE ONLY
FOR OFFICIAL 083 ONLY

EXCERPTS FROM 'ALGORITHMS AND PROGRAHS', APRIL 1981

Moscow ADCORIM 1 PROGRAM in Russian No 4, Apr 81 pp 1-112

[Excerpts]

1462. Batalov, A. F.; Bobkov, V. A. and 0vchinnikova, L. 8.. "Program Package for
Operating with the UGD-ﬁa-l Graphic Display," ELEKIRON. TEKHNIKA. 838. l. ELBKTRON.
SVCh. 1980, issue 4. p 112. bibl. of 4 titles.

The 808 program package is designed for operating with the UGD-43-1 display, working
under control of the Blektronika-lOOI ainicomputer connected to a DESK-6 by communi-
cation channel in DISPAK D08.

1470. Bogdanov, R. B. and Kupenova, T. R., "Programs for Analytic Continuation of
Holomorphic Functions beyond Linear," Dubna, 1980. 13 pages (SOOBSBcn./OIYAI. No
Rll-80-621). bibl. of 4 titles.

NAC program package is written in FORTRAN-4 for the CDC-6500 (with conventional pre-
cision) and text is given for the Yes and 138 computers (with double precision).

1486. Aahkenazi, I. D. and Korolev, A. N., "Program for Calculating Dispersion
Characteristics. Have Impedance and Width of Microband Line," ELEKIROU. TEKHNIKA.
SER. l. BLBKTRON. SVCh, 1980. issue 1, pp 122-126, bibl. of 5 titles.

Described is the FORTRAN program STRIPl for calculation of base elements in a system
for machine design of microwave hybrid integrated circuits. Calculation time for

one set of input parameters varies from a hundred microseconds to three milliseconds
with a known linewidth; with a known wave impedance, it is three to fivefold greater.

1488. Bunimovich, B. F. and Sharayevskiy, Yu. P., "Program for Analysis of Frequency
Responses of Hultisectional LBVO [expansion unknownl," ELBKTRDR. TEKHNIKA. SER. l.
ELBKTRON. svch, 1980, issue 1. pp 119-121, bibl. of 3 titles.

Description of FORTRAN program to calculate time lag and coupling impedance of sec-
tions of a slow-wave system and gain factor for LBVO with various values of geometric
and electrical parameters, varying with the design. Calculation time for one fre-
quency response depends on number of sections and number of discrete points within
the frequency band (one frequency point is about one second).

30
1492. Kabakov, L. T. and Rukomoyeva, A. 1., "Calculation of Coupling of Two Rectang-
ular waveguides through a Rectangular Aperture in a Common Hide Hall of Finite
Thickness," BLEKTRON. TEKHNIKA. SER. l. ELEKTRON. SVCh, 1980, issue 1, pp 121-122,
bibl. of 3 titles.

The program has been implemented in the FORTRAN language. Calculation time for one
alternative is no more than 20 seconds.

1494. "Program Package, 'Analysis of Linear Transistor Microwave Amplifiers'." by
V. Yu. Yakovenko, S. V. Dvornikov, V. G. Volnistyy and N. N. Perestyuk, BLEKTRON.
TEKHNIKA. SER. 1. ELEKTRON. SVCh, 1980, issue 2, pp 112-116, bibl. of b titles.

The program package was written by using the FORTRAN-d and Assembler languages.
Main storage size is 64K bytes. Analysis tine for one alternative of a two-stage
transistor amplifier at 10 frequency points is 2 to 3 minutes.

1696. Nemirovskiy, E. 2., "Reed-Solomon Codes, Resistant to Phase Inversion in
Channel," BLEKTRON. TBKHNIKA. SER. 10. HIKROELEKTRON. USTROYSTVA, 1980, issue 3 (21),
pp 60-63, bibl. of 3 titles.

Described is a FORTRAN program that includes arithmetic of finite fields and takes
about 1.5 minutes of machine time to check for the field or (23).

1498. "Program for Approximate Analysis and Optimization of LBVO [expansion unknown]
in Specified Band of Frequencies," by V. G. Borodenko, V. P. Kiryushin, A. S.
Krasil’nikov et a1., ELBKTRON. TEKHNIKA. SER. l. BLBKTRON. SVCh, 1980, issue 2,

pp 105~110, bibl. of 9 titles.

Program was compiled in FORTRAN. Calculation time at one point of band for electric
length v - 10 is about 1 second. Problem solving time is 35 minutes.

1525. "Program Package for Sorting Special Type Information," by V. V. Vishin, S. A.
Zaytsev, A. H. Maslennikov et al., ELEKTRON. TEKHNIKA. SER. 1. ELBKTRON. SVCh, 1980,
issue 6, pp 110-111, bibl. of 2 titles.

1526. Haslennikov. A. H., "Programs for Checking Information Being Processed,"
ELEKTRON. TEKHNIKA. SER. l. ELEKTRON. SVCh, 1980, issue 4, p 110. bibl. of 2 titles.

1611. "Matematicheskoye obespecheniye gibidnoy vychislitel'noy sistemy 'Rusalka'.

Gibridnyy assembler. Gibridnyy dialogovyy otladchik" ["Rusalka" Hybrid Computer Sys-
tem Software: Hybrid Assembler, Hybrid Interactive Debugger], Institute of Control
Problems, Moscow, 1980, 63 pages.

The hybrid assembler includes the H-AOO computer ASSAOOA assembler and the hybrid
superstructure that supports communication between the converter and interface de-
vices and digital and analog parts of the CVS [hybrid computer system], and operates
in the real-time mode.

31
ron OFFICIAL use omx
FOR 0!?ICIAL USE ONLY

1613. "Blektronnays vychislitel'naya mashina H—4030: Posobiye pol'zovatelyu"
[H-6030 Computer: User Handbook], by K. N. Belousov, N. V. Plakhotnyy, V. S.
Hokhonchuk et al., Kiev, Tekhnika, 1980, 267 pages.

Information needed for independent solution of practical problems on the H—6030 com-
puter. Discussed are questions of H—6030 hardware, Job control, library utilities,
main operator commands and systen messages. Problem solving process is described

in Assembler, FORTRAN and PL/l.

1615. ”Computer Terminal Software," by A. R. Zakharova, L. S. Ovchinnikova, L. F.
Pozdnyakova and T. N. Romanova, ELEKTRON. TBKHNIKA. SER. 1. ELEKTRON. SVCh, 1980,
issue 4, p 113, bibl. of 6 titles.

Purpose of the user station (AV?) is to organise input of user problems and sending
them over communication line to BBSHoé for solving. User station includes the
Elektronika-lOOI and various peripherals. «

1617. "'TBST-3' Program for Checking Serviceability of BBSH-6 Equipment for Communi-
cation uith Hinicomputers by Seventh Direction through Computer Switch," by A. N.
Zakharova, S. A. Zaytsev, Ye. I. Kat-asina et al., BLEKTRON. TEKHNIKA. SER. l.
ELEKTRON. SVCh, 1980, issue 2. pp 110-111, bibl. of 7 titles.

See abstract No 1662.

1618. Sakharchuk, V. I. and Serebrennikov, P. 1., "Program for Checking Service-
ability and Finding Defects in DESK-6 and 'Blektronika 100/16-1' Interface ﬂatware:
Engineering Test of Communications," ELBKTRON. TBKHNIKA. $33. 1. BLEIIRON. SVCh,
1980, issue 4, pp 105-106, bibl. of 1 title.

1619. Sorokin, A. 6., "Subroutine for Drawing Text Characters." KLEKTRON. TEKHNIKA.
SER. 1. ELEKTRON. SVCh, 1980, issue 4, pp 106-107, bibl. of 5 titles.

Subroutine run time for BBSH-6 for one access is independent of length of specified
character string and is greater than or equal to 5 seconds.

1620. Bryunin, V. N.; Bulatov, H. lb. and Galitakiy, A. V., "Automation of Relia-
bility Design of Microelectronic Apparatus with Redundancy," ELBKIRON. TEKHNIKA.
SER. 10. NIKROELEKTRON. USTROYSTVA, 1980, issue 3 (21); PP 90-102, bibl. of 9
titles.

Automated system for assessing and optimizing reliability (ASON) of modeling and
computation of theoretical functions of reliability of complex systems with various
types of redundancy has been implemented on the DESK-6. Described is YaONS special-
ized language for describing and automating synthesis of mathematical reliability
models of redundant structures.

32
1621. Dashkovskiy, A. A., "Panel method Calculation of Flow about Hing Profile by
Flow of lncompressible Liquid," TR./TsAGI, 1980, issue 2089, "Methods of Calculating
Aerodynamic Characteristics of Profiles, Bodies of Revolution and Systems of Bodies:
A Collection of Articles," pp 3-18, bibl. of 3 titles.

BESH-6 computer calculation time for a profile whose surface is subdivided into
100 panels is about 2 minutes; for 60 panels, time is 50 seconds; and for 30 panels,
time is 16 seconds.

1623. Il'inskiy. A. S. and Zarubanov, V. V., "Program for Calculating Distributions
of Currents of Normal Haves of Nonsymmetrical Band Line (HSTRIP)," BLEKTRON.
TEXHNIKA. $88. 1. BLEKTRON. SVCh, 1980, issue 1, pp 126-128, bibl. of 5 titles.

Program for calculating distributions by band of longitudinal and cross currents of
basic and higher types of nonradiating waves of partially screened nonsymmetrical
band line. Obtaining all graphs took about 2.5 minutes of BBSH-é central
processor operation.

1624. Oleynilov. V. 1.. "Technique for Calculating in Three-Dimensional Approxima-
tion Nonlaminar Elliptic Electron Beams in Transit Channels of 0 and H Types of
Microwave Instruments," ELEKTRON. TEKKNIKA. 538. l. BLEKTRO“. SVCh, 1980, issue 1,
pp 51-61, bibl. of 8 titles.

1628. "Machine Design of Electronic Optical Systems Using Optimization Method," by
I. I. Colenitskiy. I. B. Grishina, T. P. Kutsevskaya et al., BLBKTRON. TEKHNIKA.
SER. 1. ELEKTRON. SVCh. 1980, issue 4. pp 98-105, bibl. of 6 titles.

Examples of solving problems based on a software package that includes a program for
analysis of two-dimensional electronic optical systems (£08), a standard program for
optimization for the BESH-6 and developed program modules that interpret user
language in which problem is formulated.

1641. Takhtamyshev, G. 6.. "'Tvist' Modeling Program," Dubna, 1980, 8 pages,
(SOOBSHCH./01Yal. Ho 1-80-660), bibl. of 12 titles.

Description of program for determining characteristics of magnetic spectrometers and
checking programs of geometric reconstruction on CDC-6500 and Yes-1040 computers.
The program traces tracks, belonging to the physical process, through the spectro-
meter and forms a unified array of all tripped wires. Program site (together with
user programs and package for histograms) is 552008 words.

l6a3. Shemyakin, V. V. and Krasil'nikov, D. P.. "Experimental System for Acoustic
Emission Monitoring Based on Yes-1010 Computer: HO [Software]," Moscow, 1980, 24
pages. (Preprint/IAE. No 3333/15), bibl. of 6 titles.

1653. Rabinovich, Ye. 8.; Sinitsyna, G. B. and Peynberg, V. 2., "Determining
Optimal Parameters of Complex Hark of Matching of Drawings of Integrated Circuits,"
ELBKTRON. TBKHNIKA. SER. 7. TEKHNOLOGIYA, ORG. PR-VA I OBORUD., 1980, issue 1 (98),
pp 73-76, bibl. of 6 titles.

H-222 computer was used to obtain table of optimal parameters of complex marks that
are used in settings for automatic matching of [C drawings.

33
ron orncm. use ONLY
FOR OP?ICIAL USE ONLY

1662. Zakharova, A. N. and Ovchinnikova, L. 8., "Program 'Test of Complex of
On-Line Craphic Station'," BLEKTRON. TEKBNIKA. 88R. 1. ELBKTRON. SVCh, 1980, issue
1, pp 118-119, bib]. of 1 title.

On-line graphic station (POGr) has been developed on base of Elektronika computer
with display and connected to BESH-6 and Videoton VT-340. Program is intended for
checking servicesbility of POCr hardware and communication line between the
Elektronika-lOO/I and BBSH-6 computers. Program is written in SLENG-3 autocode.

1663. Pozdnyakova, L. P., ”Program for Checking Serviceability of Card Input Unit
(UVVK-60l) in the 'Elektronika-IOOI' Computer," ELEKIRON. TEKHNIKA. SBR. l.
ELBKTRON. SVCh, 1980. issue 6, p 109, bibl. of 1 title.

1679. Lazutin, Yu. M., "Struktura matessticheskogo obespecheniya displeynoy
stuntsii, sopryazhennoy s EVM BBSH-6" [Structure of Software for Display Station
Interfaced with BESH-G Computer], Moscow, 1978, 50 pages, (Preprint, USSR Academy of
Sciences, IPH [Institute of Applied Mathematics], No 110), bibl. of 7 titles.

Describes satellite computer software, part of display system software; system con-
sists of main BESH-6 computer that performs large volume of calculations and the
small SOS-910 satellite computer connected to it by communication channel; graphic
display is connected to the 808-910. To increase display system throughput, infor-
mation coming from the DESK-6 and peripherals is buffered, and requests for opera-
tion with the devices are queued. Information is reduced to form ready for use by

the FORTRAN program.

COPYRIGHT: Gosudarstvennaya publichnsya naucbno-tekhnicheskaya biblioteka SSSR
(GPNTB SSSR), 1981

8545
C50: 1863/246

3b
ABSTRACTS FROM 'APPLIEI COMPUTER SCIENCE', N0 1, 1981

Moscow PRIKLADNAYA INPORMATIKA in Russian No l, 1981 (signed to press 20 Feb 81)
pp 229-230

METHOD OF MATRIX IDENTIFICATION AND GOAL ANALYSIS OF AUTOMATED DESIGN SYSTEMS IN
INDUSTRY

[Abstract of article by V. N. Vasil'yev and V. N. Lashkov]

[Text] L. Zadeh's conceptsof fuzzy sets are used in the work to derive an algorithm
for identification of elements of source information.

EVALUATION OF QUALITY OF OPERATIVE-CALENDAR PLANS
{Abstract of article by A. N. Klinov]

[Text] Method of checking plans worked out to perforn construction work using
production-technological models is described.

AUTOMATION OF PLANNING 0F TECHNOLOGICAL PROCESS MONITORING SYSTEM USING LOCAL
CRITERIA 0F OPTIMIZATION

[Abstract of article by Yu. N. Shchepin and V. I. Ostrovskiy]

[Textl Problen of siting of monitoring operations in a technological process is
solved according to criterion of average cost of item. The developed method
achieves reduction in number of considered alternatives of monitoring plan based
on local criteria of optinization.

INTERACTIVE IMAGE-TYPE DATA BASE MANAGEMENT SYSTEM (91TH EXAMPLE OF 'ACCOUNTING'
PROBLEM)

[Abstract of article by V. I. Shakhmatov, A. A. Senchuk, B. A. Vorob'yev, M. Yu.
Kanshitskiy, V. P. Timoshchenko and T. N. Bol'shakova]

[Text] Interactive automated system for creating and updating data bases on lini-
conputers is described. Example of wage calculation is given.

35
FOR OFFICIAL us: om:
FOR OFFICIAL USE ONLY

DESCARTES LANGUAGE AS SOURCE LANGUAGE FOR SPORA SYSTEM
[Abstract of article by I. O. Babayev, F. A. Novikov and T. I. Petrushina]

[Text] SPORA [Specialized Software for Work in Astronomy] is a software system for
work in the applications program field that includes archives (data bank), a number
of PPP [applications program packages], monitor and translators for the basic pro-
gramming languages. The system is developed for the BBSM-é but is easily
transferable to another machine.

F-LANGUAGE, FORMALISM FOR REPRESENTATION 0F KNOHLEDGE IN INTELLIGENT INTERACTIVE
SYSTEM

[Abstract of article by V. M. Bryabrin]

[Text] Formal language for representation of knowledge in an interactive system is
described; it is based on user communication in natural language. This formalism
has been implemented within the bounds of the DILOS [Dialogue Information Logical
System] system at the USSR Academy of Sciences Computer Center.

PARMA. NETHORK DATA BASE MANAGEMENT SYSTEM BASED ON CODASYL RECOMMENDATIONS
[Abstract of article by V. P. Kosso, I. Ye. Kuznetsov and T. N. Sumarokova]

[Text] Described are the architecture, functional capabilities and service facili-
ties of the network SUBD [data base management system] developed in 1976-1979 on
the basis of CODASYL [Conference on Data Systems Language] recommendations

(YaOD [Data Description Language] of 1973 and YaMD [Data Manipulating Language] for
Cobol in 1975).

DSP DATA PROCESSING SYSTEM

[Abstract of article by V. A. Ivanov, V. A. Kondratenko and V. I. Buyanov]

[Text] Described is a data processing system oriented to data processing in an
ASUP [automated production control system]. Given are basic system functions.
principles of implementation as well as the system language. Some evaluations of
system use are given by results of industrial operation.

VIRTUAL STORAGE ACCESS METHOD IN YES OS OPERATING SYSTEM

[Abstract of article by G. N. Staroverova and T. V. Korotayeva]

[Text] Described are data set structure. capabilities of access method and data
set service program with VSAM [virtual storage access method] organization.
QUESTIONS OP COMPLEXING OF PROGRAMS IN YES 08 IN ASSEMBLER AND PL/l LANGUAGES
USING HULTITASKING FACILITIES

{Abstract of article by V. H. Halyahev]

[Text] Author discusses problems arising for progruners in joining subroutines in
the Assembler and PL/l languages into a canon program for execution of it in Yes
OS.

IMPLEMENTATION or m on YES commas

[Abstract of article by I. I. Halashinin and A. I. Kononov]

[Text] Described is inpleuentation of AH. interactive interpreter on terminal
system for Yes computers.

APPLICATION OF BINARY TREES T0 ORGANIZATION OF LARGE FILES OF INFORMATION (SURVEY)
[Abstract of article by V. A. Yevstigneyev]

[Text] Author surveys foreign publications on organization of information and
searching in it by using binary trees.

HUSSON HULTIPDDEL DATA BASE MANAGEMENT srsm

[Abstract of article by H. R. Kogalovskiy, V. V. Kogutovskiy, K. I. Makal'skiy and
H. H. Vinogradov]

[Text] Authors discuss main concepts of implementation of the multilevel data base
management system HUSSON [Multilevel Self-Describing General-Purpose System]. its
architectural features and interfaces to exteer level. Major concepts of the
conceptual model of data and the mechanism of maintaining it are considered.

COPYRIGHT: Izdatel'stvo "Pinansy i statistika". 1981

8545
CSO: 1863/229

3?
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

PARHA, NE‘NORX DATA BASE MANAGEMENT SYSTDI BASED ON CODASYL RBCWDATIONS

Moscow PRIMNAYA INFORMATIKA in Russian No 1, 1981 (signed to press 20 Feb 81)
pp 104-117

[Article by V. P. Kosso, I. Ye. Kuznetsov and 'I‘. N. Sumarokova from collection of
articles "Applied Computer Science", edited by V. H. Savinkov, Izdstel'stvo
"Pinansy i statistika", 15,000 copies, 232 pages]

{Excerpt} Initial Specifications

The PARHA data base management system (DBMS) was developed at the NIIUHS [Scientific
Research Institute of Control Computers and Systems] (in Perm') in the period 1976
to 1979. Development was based on the concepts for building data bases (BD) worked
out by the Conference on Data Systems Language (OODASYL). The versions of the
Data Description Language (YaOD) of 1973 [l] and the Data Manipulating Language
(YaHD) for Cobol of 1975 [2] were taken as bases; Cobol and Assembler were taken as
the languages included in the system. In developing the DBMS, decisions made in
similar foreign systems were taken into account and additional sources were used
[3]. English mnemonics were kept for all language facilities. Since OODASYL
developments are rather well known [7], special terms are used below without strict
definition.

The DBMS is designed for operation in the environment of Yes OS, versions 4.0 and
higher with any configuration of the operating system except RSR; control tables of
Yes 08 declared in versions 6.0 and 4.1 are used as the monitor. The system is
programd in Assembler and has about 80,000 instructions. About 1000 tracks of
5050 ZUPD or 200 tracks of 5061 ZUPD, respectively, are required for the DBMS
libraries. Data bases may be created on computer systems with 256K or more of main
storage.

Additional facilities are provided by an interface with the ”Kama" system which

provides the capability of operating in the teleprocessing mode; in this case,
512K of main storage is required.

COPYRIGHT: Izdatel'stvo "Finansy i statistiks". 1981

8545
cs0: l863/229

38
son orncm. use 0111.!
DSP DATA PROCESSING SYSTEM

Moscow PRIKLADNAYA INPDRMATIKA in Russian No 1, 1981 (signed to press 20 Feb 81)
pp 117-135

[Article by V. A. Ivanov, V. A. Kondratenko and V. I. Buyanov from collection of
articles "Applied Computer Science", edited by V. H. Savinkov, Isdatel'stvo
"Finansy i statistika", 15,000 copies, 232 pages]

[Excerpt] The DSP system is an applications program package oriented to programming
and organization of data processing in the sphere of production control.

Purpose of the DSP System

DSP operates on Yes computers under control of the operating system (08) and supports
the full technological cycle of data processing:

creation and maintenance of a data base, including input and update, conversion of
structures and types of data, monitoring of input data and changes;

search and extraction of data according to specified conditions of selection;
arithmetic and logic processing of data; and

generation of responses (documents) with rather complex structural and sophisticated
design components.

The following factors were taken into consideration in developing the DSP system.

1. To one extent or another, the specific facilities for implementation of the
capabilities listed above are offered by the DBHS's that are more widespread in our
country. however, the advantages of a DBMS are achieved to the fu1l extent only
when the direct access storage size connected simultaneously to the computer system
is sufficient to hold the entire data base. The now widespread disk storage units
with a capacity of 7.25 Hbytes for medium and large systems are not very suitable.

Thus, the extensive distribution of Yes computers, on the one hand, and the lack of
supporting them with direct access storage units with a large capacity (29, 100 and
200 Mbytes), on the other hand, maintain the relevance of the current use of magne-
tic tapes as media for storage and processing of data in computer systems based on
Yes computers.

2. Maintenance of continuity of management systems created (transferred) for the
Yes computers with systems on the high-volume second-generation computers-the
“Minsk—32."

39
ms orncm. uss ONLY
FOR OFFICIAL USE ONLY

3. Necessity of creating simpler facilities, compared to existing ones, for man-
computer communication which will silou enlisting for practical programming of A80?
[automated production control system] problems lav-skilled specialists (including
even non-programmers), reducing personnel training time and problem program-dag and
debugging time.

4. Providing the capability of direct use of data stored on magnetic tspss for the
"Minsk-32" computers together with dsts in the Yes computer formats uithout
preliminary conversion.

COPYRIGHT: Izdstel'stvo "Pinsnsy i ststistiks", 1981

8565
680: 1863/229

hO
VIRTUAL STORAGE ACCESS METHOD IN YES 05 OPERATING SYSTEM

Moscow PRIKLADNAXA INFORMATIKA in Russian No l, 1981 (signed to press 20 Feb 81)
pp 135-145

[Article by G. N. Staroverova and T. V. Korotayeva from collection of articles
"Applied Computer Science", edited by V. H. Savinkov, Izdatel'stvo "Pinansy i
statistika", 15,000 copies, 232 pages]

[Text] In this article, we discuss the basic principles of operation and service
capabilities of a new method of accessing data on direct access devices developed
within the framework of the Yes 05 operating system. This method of access, called
the virtual storage access method (VSAH) is used in the virtual method of operation
of the Yes 08 (svs mode) and achieves a high rate of data processing.

All earlier access methods existing in Yes 08 are designed for direct access
devices oriented to processing data in computers with a limited amount of main
storage. Therefore, the entire data base management system, and access methods in
particular, were oriented to minimizing the size of main storage required to support
a specific type of access to achieve a sufficiently high rate of data access. The
physical record-the smallest processing unit for a direct access device--was
adopted as the unit of exchange between external (storage on a direct access device)
and main storage. To access a record, the programmer used the address of the
physical record on the device in the form of the cylinder and track address; there-
fore, for certain types of processing, the progranner was tied to the physical
characteristics of the devices. The access methods developed earlier (38AM, QSAH,
QISAH, BISAH, BDAM and DRAM) are possible in Yes OS for the NWT and HVT modes and
are intended for operation of computers without virtual storage.

In operating systems with virtual storage, the computer user has a considerably
larger amount of storage to solve his problems; therefore, the capability of orga-
nizing a new method of access--virtual (VSAH)--has emerged. In this method, the
unit of exchange between external and main storage is the control interval consist-
ing of a certain number of physical records specified by the programmer. Physical
records with a length of 512, 1024, 2068 and b096 bytes are used in the VSAH method.
Within the limits of a data set, the physical record length is fixed, which allows
more efficient use of sector organisation of direct access devices. The user of
the VSAH access method actually has nothing to do with the physical records; he
works with either the logical records or the control interval. Therefore, a new
method of addressing records is used-by the relative displacement of the beginning

bl
ma orncm. use ONLY
FOR 0F?ICIAL USE ONLY

of a record from the first record in the data set in bytes. This method is easier
for the programmer to understand and is absolutely independent of the physical
characteristics of the direct access device. A four-byte value, designated an REA
[relative byte address], is intended for addressing, and this method of addressing
allows access to any record in the data set. The address of the first record in a
data set equals 0. the address of the second equals the length of the first logical
record, etc.

The record format in a data set with VSAH organization differs from that of other
access methods. The programmer in general does not specify whether his records will
be fixed, variable or undefined length since the structure of the control interval
allows determination of the address of the next logical record. The control inter-
val consists of a certain number of logical records and their descriptors. Several
control intervals are grouped into a control area, a larger unit of storage of a
data set.

Data set records are key- or entry-sequenced. In the key-sequenced data set, the
computer user can obtain access to a record by its key or by the relative byte
address (RBA). If a data set is entry-sequenced, access to the record is possible
only by the RBA.

A key-sequenced data set has two componenta--an index and data. The data component
contains the logical records themselves, while the index component establishes the
correspondence between the record keys and their addresses. The index has a multi-
level structure. For the index component, the length of a physical record always
equals the length of a control interval.

The data component and the index component (if it exists) describing it are called
the structure group. The structure group for a key-sequenced data set consists of
the index and data components, while that for an entry-sequenced set has only the
data component.

Organization of a data set in ascending key sequence is similar to index sequential
organization, while that in entry sequence is similar to sequential and direct
organization.

In index sequential organization that provides access to a physical record by its
key, hardware facilities in the direct access devices are used to search by record
key for one greater than or equal to the key. From this stems the necessity of
positioning records in sequence of ascending physical addresses on the medium.
when new records are added in the middle of the data set, the later records are
transferred from the tracks to an overflow area so as to not disrupt the sequence
of ascending addresses.

In VSAH organization, no keys of physical records are used at all and the possibili-
ty emerges of more efficiently including new records in the data set organized in
ascending key sequence. If there is free space in the control interval, the record
is inserted in the space needed; if there is not enough free space for the new
record, the control interval is divided in half, half of it is written into a new
control interval, and the new record is inserted in the needed space. If there is
no free interval in the control area, the control area is also divided in half and
half of its control intervals are transferred to a new control area. In the process,

h?
only the indexes have to be copied, establishing correspondence between the record
keys and their new addresses. Thus, the overflow areas inherent to index sequen-
tial organization do not occur, and all the shortcomings of index sequential organ-
ization are eliminated.

In later versions of the VSAH access method, there will be a capability for multi-
key structure of a data set, when in addition to a key for the data set, additional
keys may be inserted without recopying the data records, but only after building
additional indexes that establish the correspondence between the new keys and
addresses of the records.

The VSAH method provides for both sequential and direct processing of records, and
also implements all the capabilities offered by the other access methods for direct
access devices.

For data sets organized in ascending key sequence, VSAH allows obtaining direct
access to a record by its key or address, adding a new record, erasing a record and
changing record length.

For data sets organized in entry sequence, each new record is added at the end and
insertion of records in the middle, changing record length and obliteration of
records are not permitted.

The VSAM method allows sequential, partially sequential or the direct type of data
processing, and at the same time combining the different types of data set process-
ing is permitted. In sequential or partially sequential processing, the programmer
may specify the beginning of processing in the form of a key or address of a record,
and the key may be incomplete. Partially sequential processing is used for a data
set organized in ascending key sequence when not all records in the data set have
to be processed, but the required records can be requested in ascending order of
their keys and retrieval at the index of the lower level, beginning with the key of
the preceding record, can be performed faster than direct retrieval of the key
beginning at the index of the higher level.

Sequential processing of a data set may be performed by key and address.

The VSAM method in operating with data sets supports one language of access—-macro-
instructions for building control blocks and obtaining from them information and
macroinstructions for processing requests.

The macroinstructions for building control blocks are:

ACB. used to build the access control block during program translation;

EXLST, designed to build an exit list for user programs during program translation.
One can specify an exit to a program for processing logical input-output [10] errors,
a program for processing Io errors associated with equipment functioning, a program
for checking access permission and a program for recording events;

RPL, which organizes the request parameter list during program translation;

CENCB, which builds the request control block. a list of exits or a list of request
parameters during program execution;

143
ton orncm. usa om:
FOR OFFICIAL USE ONLY

FDDCB, used to modify the access control block, exit list or request parameter list
during program execution;

SHOHCB, used to read the fields of the access control block, exit list or request
parameter list during program execution; and

TBSTCB, designed to test the fields of the access control block, exit list or
request parameter list during program execution.

Request processing macroinstructions are used to write, read or erase data records
in the data set. The main macroinstructions in this group are:

GET -- for reading data records;

PUT -- for writing data;

ERAS! - for erasing data records;

POINT - for setting at the record needed;

CHECK -- for suspending execution of processing before completion of request; and
ENDREQ -- for ending the request.

To establish a link between the processing program and a specific data set, the
programmer has to build in his program an access control block (AC!) which in the
VSAM is used instead of the data control block (DC!) used by other access methods.
In the access control block, the name of the DD statement of the job control
language is assigned, and in the DD statement when.the job is started, the data set
name that will be processed is indicated. Before starting processing of a data set,
the ACE must be opened using the macroinstruction OPEN and closed at the end of
processing by using the macroinstruction CLOSE.

Access to indexes in a data set organised by ascending keys is performed in one of
two ways:

the structure group is opened and the macroinstructions GETIX (read index) and
PUTIX (write index) are used;

one index component is opened and the macroinatructions for ordinary data processing
are used (GET, PUT, etc.).

Processing of one index component is identical to processing of a data set in entry
sequence. The index component itself has no indexes and therefore may not be
processed by the access method by key.

The user may not duplicate or replace the index processing performed by VSAH during
ordinary processing of data records.

To provide for standard operation with data sets, instead of a large number of
utility programs used for operating with data sets of a different organization,
VSAH has a multifunction utility program (ANS) which has its own function request
language.

ANS defines VSAH data sets, loads records into them, converts sequential or index
sequential data sets into VSAH format, lists the VSAH catalog or data records,
copies data sets, creates copies of catalog and data set, facilitates data set
portability between operating systems and erases data sets.

uh
The programmer requests the desired function of the multifunction utility program
using instructions of this program and their parameters. The ANS program instruc-
tions are divided into two types: functional and modular.

The main functional instructions that define the operation to actually be performed
are:

DEFINE -- for organization of VSAM catalogs, catalog elements describing a data set,
and zones of external storage on direct access devices that will be used by the
VSAM access method to allocate storage from them for data sets;

DELETE -- for deleting elements in a catalog;

ALTER -- for changing elements in a catalog;

LISTCAT -- for listing catalog elements;

PRINT —- for printing a VSAH data set, as well as index sequential data sets;

REPRO -- for copying data sets, converting sequential and index sequential data sets
to VSAH format, converting a VSAH data set and index sequential data set to a
sequential data set, organization of backup copy of catalog and restoration of the
catalog from the copy;

VERIFY -- used in detection of an error when the data set is closed to guarantee
the correctness of elenents of the catalog that describes the data set;

CHKLlST —- defines the volume of magnetic tape for the checkpoint program;

EXPORT -- for creating a backup copy of a VSAH data set and preparing a VSAH data
set and user catalogs for use in another operating system; and

IMPORT -- for restoring a VSAM data set from its copy and for providing the capabil-
ity of using in another operating system the VSAN data sets and user catalogs pre-
pared using the EXPORT instruction.

The functional instructions DEFINE, ALTER, DELETE, LISTCAT, REPEO and PRINT may be
used for processing data sets with an organization differing from VSAH.

The modular instructions allow creating conditions for execution of functional pro-
grams. The main instructions of this type are:

sequence of instructions IE ... THEN ... ELSE which check the completion code of
the preceding functional instruction and as a function of its value bypass or in-
clude execution of the sequence of functional commands;

SET -- changes the completion code; and

D0 ... END defines the start and end of a sequence of instructions.

The completion code is set when each functional instruction is executed and has the
following value:

0 -- complete execution of the instruction;

A -- instruction was executed, but a warning was made about the peculiarity of the
execution; for example, the required element was not found in printing a catalog
element;

hS
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

8 -- instruction was executed, but some of the requested functions were not execu-
ted, for exasple. in deleting a catalog element, the required element was not found;

12 - instruction not executed due to logic error; and

16 -- error in execution. which causes a halt in execution of the entire stream of
instructions. This code may be set, for example, when the system could not open a
data set for system output or a permanent IO error was detected in system output.

In the IF instruction, one can check the actual completion code of the last instruc-

tion, designated LASTCC, or the maximum permitted value of the completion code,
designated HAXCC.

An example of the use of the instruction sequence IF ... TEEN ... ELSE is:

l? uaxcc ‘< 8
THEN
DO
instruction sequence
3ND
ELSE
DO

instruction sequence
END

The multifunction utility program may be executed as a job or job step, and also
may be called from another program.

Each data set that is to be processed by the VSAH access method must be defined in
a catalog by using the multifunction utility program, i.e. catalog elements must be
created for it that describe the occupied zone, name and other characteristics.

In the VSAH access method. catalogs are used as the basic source of information on
VSAH data sets and the volumes on which they are located. There are two types of
catalogs--master and the user catalog. A master catalog is required for VSAH; user
catalogs are optional. Bach VSAH catalog contains records defining it. System

catalog contents point to master catalog contents. and the contents of the latter
to user catalogs.

A catalog includes information on the space occupied by a data set, indicates data

set access restrictions. contains usage statistics and links the RBA byte address
to physical addresses.

All data sets located on a volume must be cataloged in one master or user catalog.
A data set is defined only in one catalog.

The master catalog may not be located on the main resident volume for the system
since if it is damaged it would not be possible to restore it.

If a VSAH data set is cataloged in a user catalog, this catalog must be assigned by
the statement DD JOBCAT or STEPCAT. The STBPCAT statement defines the catalog used
in executing this job step, and the JOBCAT statement in executing the whole job.

If several catalogs are needed, they are described as ordinary concatenated data
sets in Yes [Unified Series) 05.

1:6
The use of user catalogs raises the reliability of system operation. Catalogs may
be located on each volume instead of one common catalog. This reduces the number
of accesses to a given catalog to the minimum and if some catalog is destroyed the
others are still available.

when a catalog is created, the programer may specify a special facility that makes
it possible to restore it. In this case, a special area is allocated on a volume
for records that contain the information required to restore the catalog when there
is a system or equipment malfunction.

VSAH obtains storage on a volume and manages it in units called zones. A zone
occupies a certain number of tracks and cylinders. One zone may have one or more
data sets, and in turn a data set may occupy several zones. Zones are described
in a VSAH catalog.

A catalog manages the volumes containing VSAH data set defined in this catalog.
All VSAH structural groups and all zones on a volume must be cataloged in the cata-
log that manages the volume.

A tag is set in a volume table of contents to indicate that this volume is managed
by a VSAH catalog. The latter contains the volume entries for each volume that it
owns. Each entry describes the characteristics of the volume, all zones and
objects of VSAH that use storage on the volume. Only one VSAH catalog may own a
volume.

Volume management using a VSAM catalog does not affect data sets on this volume
that have an organization different from VSAH. These data sets may be located on a
volume managed by a VSAH catalog and may be cataloged not in this catalog. An OS
catalog can be considered an ordinary data set and it may be located on a volume
managed by a VSAM catalog.

To free a volume from management by a VSAH catalog, one has to get rid of all VSAH
objects on the given volume by using the multifunction utility program. Then the
DELETE SPACE instruction of the multifunction utility program is used to delete all
zones and remove the entries of this volume from the catalog and remove the tag of
ownership of this volume from the table of contents.

A user may process a VSAH catalog as a data set or in a special way. To process a
catalog as a data set, a user has to link his processing program with this catalog
and use the VSAH macroinstructions (GET, PUT, etc.) for processing. To obtain
access by the method special for the catalog, a programmer has to use the special
multifunction utility program for data sets (ANS). Thanks to the use of the multi-
function utility program for processing a catalog. the capability of performing the
following functions is available:

creating a catalog (instructions DEFINE HASTERLATALOG and DEFINE USERCATALOG);
including records in a catalog (DEFINE);

changing records in a catalog (ALTER);

deleting records in a catalog (DELETE); and

listing the records of a catalog (LISTCAT).

’17
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Catalog infatuation pertaining to a specific data set may be obtained by a process-
ing program by using the macroinstruction SHORCAT irrespective of whether or not the
given data set is opened. Information is issued from the catalog specified by the
DD statements with the names STEPCAT or JOBCAT, or from several catalogs if the
given DD statements define concatenated data sets, or from the master catalog if the
JOBCAT or STEPCAI statement is missing or a catalog description is not found in them.

To obtain access to a catalog as to a data set. it has to be described by a DD state-
ment of the job control language (not JOBCAT or STEPCAT), an access control block
(ACE) has to be built for it in the program and it has to be opened by the macro-
instruction OPEN. Catalog records may be accessed by key or address. In this opera-
tion, it is recommended that catalog records only be read and updated. Since cata-
log records have a complex interrelationship, including new records or deleting
records from a catalog is not recommended. To add or delete catalog records, it is
recommended that the multifunction utility program be used.

VSAH affords a greater capability for restricting access to data sets compared to
other access methods.

A programmer may restrict access to structural groups, data or index components,
VSAH catalogs and catalog entries for data sets. The capability exists to specify
the following levels of data access restrictions:

restriction of any access which requires confirmation of permission for execution of
all operations (reading, updating. adding and deleting) with a data set, any index
and records of the catalog that correspond to this data set;

restriction of access by control interval;

restriction of access for updating. This allows reading, updating, adding or delet-
ing of records in a data set only with confirmation of permission for execution of
these operations; and

restriction of access for reading. This allows reading of data and catalog records
with confirmation of permission, but does not allow adding. changing or deleting
them.

To restrict access to a data set. one must also restrict access to the catalog in
which the given data set is defined. Each higher level of access restriction
allows execution of a lower level operation.

When Yes 05 requests permission for access to a data set from the computer operator,
a code can be assigned to be used instead of the data set name, so that the computer
operator will not know the data set names to which access is restricted. One can
specify the number of attempts which a computer operator may use for permission of
access to a data set.

In addition to the standard check for permission to access a data set, VSAM allows
a programmer to use an additional check for access permission by using a user pro-

gram. This program is called after Yes as obtains permission for the given type of
access.

The VSAH access method permits a programmer to specify permission to access a data
set in his program which frees him from a message to the computer operator with
information on his data sets. VSAH requests access permission from the computer
operator only when access permission is not specified in the program.

A great advantage of the VSAH access method is the simplicity of its use. The pro-
grammer has to be familiar with just several macroinstructions and has to indicate
a minimum of information on the data set in the program and job control language
(substantially less than for other Yes OS access methods). For example, in the DD
statement for VSAM, one has to specify only the set name (DSNAHE) and its disposi-
tion (DISP). The programmer does not have to describe record formats or know the
physical organization of the data set; his programs are device independent and he
need not be concerned about blocking of records and bufferization. This reduces
outlays for programming and the possibility of errors.

The VSAH method exceeds the capabilities of all Yes OS access methods used for
direct access devices in providing faster access to data. Therefore, in systems
with virtual modes of operation, it will replace all other access methods except
the library. Since many programs have now been developed with index sequential
organization of data sets, the VSAH access method includes programs called ISAM
interface with VSAH that permits a program written by using the ISAH access method
in fact to process a data set with VSAM organization. All that is required are
minor changes in the job control language statements and a description of the data
sets by using the multifunction utility program.

If there is a good algorithm of randomization for a data set with direct organiza-
tion. the use of BDAH may be retained.

***

Since the experience of operating with other access methods was taken into account
when the VSAM access method was developed. certain shortcomings and inconveniences
of the other access methods were eliminated in the design of VSAM. The process of
writing reenterable programs carrying on processing of data was made easier; the
capability of different simultaneous processing of data sets was introduced, which
eliminates the need of repeatedly opening and closing a data set when switching from
one form of processing to another, for example from direct processing to sequential;
new capabilities for protecting data sets were introduced; and access to information
on access restriction is not authorized for even the systems programmer and computer
operator, but only for the programmer himself.

Therefore, the VSAM access method should find extensive application in data
processing systems using the Yes 08 operating system in the virtual mode of opera-

tion.

COPYRIGHT: Izdatel'stvo "Pinansy i statistika", 1981

8545
C50: 1863/229

h?
FOR OFFICIAL use ONLY
FOR OFPICIAL USE ONLY

IMPLEMENTATION OF APL ON UNIFIED SYSTEM OF COMPUTERS

Moscow PRIKLADNAYA INPORHATIKA in Russian No 1, 1981 (signed to press 20 Feb 81)
pp 155-170

[Article by l. I. Malashinin and A. I. Kononov from collection of articles "Applied
Computer Science", edited by V. H. Savinkov, Izdatel'stvo "Finansy i atatistika",
15,000 copies, 232 pages]

[Text] The extensive attraction to using computers of specialists in various fields
of knowledge has required offering them convenient and on-line facilities for man-
machine communication. This pertains to both language and the form of intercourse.
In this article, we discuss questions of implementing a terminal system with the
APL language which has become widespread abroad and which affords direct user
access to allocated computer resources throngh terminals and software facilities.
The simplicity of the language syntax, brevity and precision of expressions, power-
ful facilities for operating with multidimensional arrays (vectors, matrices, etc.),
and the capability of on—line computations and creation of programs (functions)

make APL attractive for a broad range of users [1, 7].

This article focuses on APL notation and use of terminals. Also covered are the
principles of building the systems and operating it under the control of Yes 08.

System Concepts

The APL system implements time sharing among a group of remote or local terminals.
The terminal is an electric typewriter or console typewriter with a control unit,
such as for example in AIL \360 [5].

In the APL system, a user exchanges information with the system only through a user
terminal. All statements entered by the user from a terminal are divided into sys-
tem commands and APL statements. All information Output to the user consists of
system messages, computation results and program texts [5, 5].

Time sharing is implemented by the system supervisor, and the APL interpreter iden-
tifies and processes information coming in from the terminals.

The system operates under the control of Yes OS of the NWT or HVT type and takes up
one partition or zone of main storage. The APL system functions the following way.
Upon connection to the system, the user is allocated workspace of fixed size de-
fined at system generation. This space can be named and kept in the user's

50
personal library. It can subsequently be called into the active zone for further
work. The active zone includes part of main storage and storage on direct access
devices used for the swapping [svoping] process. In addition to personal libraries,
the capability exists to create connon libraries accessible to all system users.

Storage extents on disk units designed in the standard of sets of Yes OS are used
to store user libraries and organize swapping of active work areas.

By using a special utility, there is the capability of creating transportable copies
on magnetic tape of individual work areas and libraries for storage or transferring
them to other installations.

Users in the APL system work independently of each other while under supervision of
the APL operator. The latter, in addition to the usual user capabilities in the sys-
tem, is given privileged facilities to control the system.

The APL system provides an adequate level of security and reliability.
The APL Language

APL (A Programming Language), developed by K. E. Iverson [3], is designed for engi-
neers and scientific and technical calculations although its field of activity is
not limited to these areas. The language is unconventional for professional compu-
ter users, but easily mastered by nonprofessional computer users since it is almost
devoid of those auxiliary details that any user has to know to solve problems on
computers [7, 8].*

The wealth of language symbols minimizes terminal input to execute particular opera-

tions. APL offers more than 60 built-in functions which substantially eases
programming.

An important place in this language is allocated to facilities for working with

vectors and matrices of nuubers and symbols. There are facilities for operating
with text constants.

The mode of immediate interpretation allows the user to use the terminal as a calcu-
lator. and the program definition mode allows input, correction and reproduction of
a program text.

In executing programs (functions), AP]. allows following the course of their execu-
tion and stopping it.

In the APL system, there is the capability of writing interactive problems. The
main set of functions offered by APL are called primitive functions. Based on them,

it is possible to create any number of additional functions; thus, the language is
easily expanded.

Shirokov, F. V., "Basic Concepts of APL," in the book "Algoritmy i organizatsiya
resheniya ekonomicheskikh zadach" [Algorithms and Organization for Solving
Economic Problems], Moscow, Statistika, issue llo, 1980.

5".
son orncm. use can
FOR OFFICIAL USE ONLY

A distinguishing feature of APL is the simplicity of data representation and the
absence of specifications in defining a variable, since the value assigned to it
characterizes the variable. In addition, there is no traditional prioritization of
operations in APL expressions—all operations are of equal priority, and an expres-
sion is computed sequentially from right to left. The number of messages to the
user has been held to a minimum and does not exceed 40.

The APL Language for the Unified System of Computers

The main difficulties in using APL for the Yes computers are the lack of a domestic
terminal with the proper keyboard and means of couunication. Therefore, in using
APL on domestic equipment. there arose first of all the problem of changing its
symbolic notation. O

The symbol of the most widespread version of APT.“ is described in Backus normal form
the following way [6]:
API. symbol : : - letter I number

I special symbol I blank | '

- 2 . Mk 1' VIII x v 2|
19”" ’ A'BIccllrgnéa'FIGI'I5'I'I'I'JJI'I5I'LLI'MI IOII 9'3“ lssIlrIbI VIM duh
number 3 ‘ ' 0'12 3N W7 3|9
special symbol ::: '°|-|<|$|=|2|>|#|lel—i{.|+|x|
?|(A>|€|P|~H|il2|°|*|"|"IGIFIL|—IVIAI°|DICI )IEIJ ICIDI
mwunuuuuJﬂw*WMWWDbmmunHﬂﬂn

blank : : - vacant position
Thus, the APL alphabet consists of 131 symbols.

All AP]. symbols are divided into simple and combined (ligatures). Simple symbols
are input fro. the APL terminal by one press of the keys, combined—by printing a
simple symbol over another.

When input from the terminal keyboard, each APL symbol is converted into a single
value in the internal representation of the APL system. from which it is recoded
into the external representation only when output to the terminal. The APT. terminal
keyboard contains 88 simple characters (table 1). ‘
The majority of the special symbols have a specific functional purpose. The
symbols C 3 n U -- (o a do not define internal functions of the APL interpreter
and are intended for subsequent implementations of AFL. The illegal symbol obtained
by a combination of the characters 0. U and T has a special meaning.

The combination symbols include: ABCDEFGHIJKLMNOPQRSTUVWXYZ

vavwooelmzwvﬁ- inputof

which is effected by entering the first simple symbol, backspacing and entering the
second simple symbol (table 2).

52
Table 1. Correspondence between Simple Symbols of AP]. Language and Its Modifica-
tion for Unified System of Computers and Yes-7077 Type Terminals

DKOI Replacement
APL 822201 Symbol Name Symbol

A - 2 letters of alphabet A - Z

0 - 9 numbers 0 - 9
.. double period none

— superscript 1

< less than <

S; less than or equal none

- equal -

;; greater than or equal 5 [B]
> greater than >

f not equal )K [Zh]
v logical on n [L]
/\ logical AND H [I]
— minus -

:- divide X

+ plus +

X multiply I

? question ?

u omega none
d epsilon 3 [E]
p Th0 lb ['1
~ tilde u [1‘s]
T up arrow K) [Y0]

53

Main Use of Symbol in APL
________E52££§§$222______

identifiers of work areas,
functions (programs) and
variables

numeric values
symbol
sign of negative number

operation of checking for
correspondence to "less than“

operation of checking for
correspondence to "less than
or equal"

operation of checking for
correspondence to equality

operation of checking for
correspondence to "greater
than or equal"

operation of checking for
correspondence to "greater
than"

operation of checking for
correspondence to inequality

logical "0R" operation
logical "AND" operation
subtraction operation
division operation

addition operation
multiplication operation
generation of random numbers
symbol

determination of coincident
elements of two vectors or
matrices

operations with dimensionality
of vectors and matrices
logical "NO'I‘" operation

selection of vector elements

FOR OFFICIAL USE ONLY
DKOI Replacement Main Use of Symbol in API.

SE01 [aggressions
none dropping of vector elenents
n [Y] generation of sequence of

integers, determining coordi-
nates of elements of one
vector in another

6 trigonometric functions and
operations with pi

* raising to power operation

a [Y] jump to marker or exit from
progra-

3 [z] assignment of value to
variable

none symbol

'l‘ [G] finding largest of two
quantities

‘1 [Ch] finding smallest of two
quantities
see table 2

'y' [U] beginning and ending of
function (program) definition

11 [D] see table 2, tracing of

program
a outer product of matrices
’ definition of character string
II [P] request for data input into
progra-
( changing order of computation
in AP]. expression
)
[ enclosure of subscripts
] (coordinates) of elements of
a vector or matrice
none sylbol
none syﬂaol
3| [Ya] symbol
none symbol

:11 [sh] recoding of vector into scalar
Ill [Shch] recoding of scalar into vector
: colon : label separator in program

\ backward slash 0 [F] "expansion" of matrix across
last coordinate

/ slash / "compression" of matrix across
last coordinate

. comma , "merging" of matrices, revel-
ing of matrix into vector

. period . separator of whole and frac-

tional part of a number,
generalized product of
matrices

when a combined character is entered, actually three code combinations are sent to
the channel: the first symbol, the backspace and the second symbol. The same
occurs when a combined symbol is output to the terminal.

In addition to the codes for the set of simple APL symbols and the [BS] (backspace)
code, the APL interpreter distinguishes the code combinations between the special
keys [LP] (line feed) and [CR] (carriage return) which are used in correcting text
and completing entry of information from the APL terminal.

The majority of Yes computer terminals based on the "Konsul-260.l" typewriter con-
tain the following set of DKOI symbols [2]:

The Latin alphabet: ABCDEFGHIJKLMNOPQRSTUVHXYZ;

the Russian letters that differ from the Latin:
BFRX3HHHUYOquuHHSDﬂ:

[B G D zh z I Y L P U P ' Ts Ch Sh Shch B Yu Ya];
the numbers:

0 l 2 3 a 5 6 7 8 9;
and the special symbols:

+—#%*HD&WH-3U<>j-@“smu

Based on this set of symbols, the notation for the Yes APL language was built for
the Yes-7077 type terminal.

55
FOR OFFICIAL use om:
FOR OFVICIAL US! OILY

Table 2. Correspondence between Combined Symbols of APL Language and Its Modifica-
tion for Unified System of Computers and Yes-7077 Type Terminals

Main Use of Symbol in APL Language
IIiIIIIIIIIﬂIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
logarithm function

 

 
 

T factorial function, combinations function

    
  

 

[L 5 Ta] logical NOR operation
[I 6 Ta] logical RAND operation

"compression" across first coordinate

 

[F a -} "expansion" of matrix across first
coordinate
rearrangement of matrix elements across

first coordinate
rearrangement of matrix elements across

last coordinate
[0 a F] matrix transposition

. [D a !] ascending sort
_ [U a !] descending sort

 

 

 

 

 

 

 

 

    
  

, [P 6 1] matrix inversion, solving a system
of linear equations
(P a '1 literal input into program

 

[Ya 8 w couent line in program

to a To] lock to inhibit printout of
program text
[Shch a Sh] system dependent functions

underscored alphabet

 

 

 

 

   
   
 
  

identifiers of variables

............................

 
    

special symbol

symbol for rejection of literal input into
program

Key: 1. Component symbols 4. Component symbols for input
2. Combined symbols 5. APL symbols
3~ Combined SyﬂbOIB "he“ output 6. Symbols of modified APL language

56
FOR OFFICIAL use ONLY
Table 3. Correspondence betueen APL Symbols and Symbols on the Keyboard of the
"Videogon-340" Display

‘ ‘ [Pl
1:; g E [Ya]

. Sh]
E E El
; g . _ f‘ [Shch]
6 G 5 6‘-
u u “6.
I I It-
I J J‘.
K K - K6-
L L Le. a
M M N“. .
z a :2-
P P n: ‘1‘ 5 T3]
0 0 0t- [1 6 Ts]
R R 36..
S S 56.
r- 1' Ta...
(III e 9:. D I

—- " G o
W W W W‘- [u 8 o]
X x g X‘— P & .
y v u- 5. ¥

[U'& Ts]

o l [Shch & Sh]
1 1 4
2 2 input
2 2 output
5 5 in at
s 6 on put
z 3 input
9 9 output

 

Key:
1. APL Symbol 5. uppercase
2. "V1deoton-340" display symbol 6. lowercase
3. superscript 7. space
4. underline
57

FOR OFFICIAL USE ONLY
FOR OPPICIAL USE ONLY

In doing so, these were the guidelines followed:

keep the visual perception of the modified language program close to that of the
APL program;

wherever possible, give a meaningful value to the special symbols;
keep the combined symbols in the language;
expand the language with the capability of using the Cyrillic alphabet; and

keep the continuity of the libraries of programs written at existing installations
in the standard APL language.

Table 1 shows the correspondence of the simple APL symbols to the symbols in the
modified language; table 2 shows the correspondence between the combined symbols
and their component elements.

From these tables it is evident that no change was made to the majoirty of symbols
coincident in graphic design. The Yes APL language contains all the Russian let-
ters, which allows use of then in literal constants and comments. but in other
cases they have a special meaning. Thus. the letter [I [P] (fgechatayte" [type!])
is used to request data input into the program; bl [Y] (" ti [to exit]) is used
to jump to the marker or exit the program; 3 [z] (fishesti' [to make an entry)) is
used to assign values to variables; and ii, 11 and 11 [1, L and To] are used to
define the logical operations AND. OR and NOT ("otritganiye" [negation]) [i - and;
iii - or].

The combined symbols in the language are implemented the following way: On input,
one types the triads of symbols of the first simple symbol. the symbol 6 instead of
the backspace and the second simple symbol; on Output, the symbol a is replaced by
the backspace code and the actual image of the combined symbol is printed out. The
correspondence between the APL combined symbols and those used in the Yes APL
modified language is shown in table 2. To generate the carriage return code (since
no code combination is generated when the carriage return key is pressed on the
"Konsul-260.l"), the key is used which does not cause printing of the symbol. but
sends the corresponding symbol code to the computer [2].

The APL symbols .- m l n c 3 U g have no equivalent in the modified language.

but since they are rarely used. their absence has almost no effect on the capabili-
ties of the language. "hen a program written at another installation is printed
out, these symbols are replaced by blanks.

The modification, discussed above. to the APL notation was also used in implement-
ing the display version of the terminal system. In doing so, the restrictions men-
tioned were eliminated and the language wss given a number of important additional
facilities for communication with a terminal. In this case, the terminal used can
be either the Yes-7066 display from the Yes-7906 complex. connected to the multi-
plexer channel. or the "Videoton-360" display.

The "Videoton-340" as an APL Terminal

Interest in using the "Videoton-340" display as an APL terminal arose due to a num-
ber of factors: high output rate. no mechanical elements, high quality, broad

58
capabilities in text editing and input-output management, standard set of Latin and
Russian characters and special symbols, large information capacity of the screen,
and the capability of printing information from the screen on a special alphameric
device. In addition, the technical capabilities of the display allow using it at a
considerable distance away from the computer without special software or hardware
for communication [9].

The main obstacle to using the "Videoton-3bo" displays (or the "Videoton-YeS-7168")
with Yes computers beginning with the model Yes-1020 and up is the impossibility of
connecting them directly to the computer channel. This required development of a
special group switch that allows connection of up to 48 displays to the Yes computer
multiplexer channel. In doing so. the instruction set corresponding to the YeS-7077
console was selected as the most suitable; this afforded continuity with the APL
implementation for the Yes-7077 and compatibility with the subset of instructions
for the Yes-7906.

The group switch is the control unit for the displays connected to it; it also con-

verts information coming in from DKOI code into ROI-7 code for the “Videoton-360"
unit and vice versa.

Since the APL system does not use a Yes OS access method, terminals engaged with the
APL system are not distributed by the OS scheduler and do not require description
when OS is generated. However, it makes sense to describe them anyway as devices of
the Yes-7077 or Yes-7066 type with addresses of the multiplexer channel from the
interval of 050 to 07?.

Such substitution allows employing software, which uses the subset of instructions
for the Yes-7077 and Yes—7066 devices, for operation with the "Videoton" displays.
Thus. when a "Videoton" is described as a Yes-7077, it can be defined as a Yes com-
puter operator console, and if described as a Yes-7066, it can be used as a terminal
for the interactive systems "Kama," SRV [time-sharing system], SPOK [system of pro-
gramming of teaching courses] and certain others.

The "Videoton" display keyboard connected through the group switch allows transmis—
sion of 99 code combinations. These are the codes of the 26 Latin letters, the 20
Russian letters drawn differently from the Latin, the 10 numbers, 28 special symbols
including the space, and the 15 control symbols for the terminal.

The APL language notation for Yes-7077 type terminals, shown in table 1, was revised
to account for the capabilities of the "Videoton" terminal and became that shown in
table 3. The modified version of the language was given the working name of
APLVIDEO.

Since it is not possible physically to display the combined characters on the screen,
they are represented in APLVIDEO by triads of symbols both on input and output.

Some of the APL symbols were replaced by the symbols (code combinations) of the ter-
minal control keys that are shown in table 3 as rectangles with the corresponding
letters.

For convenience of operation from the terminal, a number of the APL control symbols
are interpreted differently on input and output to the terminal. Thus, the symbol

59
ton orncm. US: ONLY
FOR OPIICIAL USE ONLY

[BS] for the lower case of the prototype terminal at input is represented by the
character a or the [<?-] of the "Videoton"; when this symbol is output, the backr
space situation is simulated: the cursor is shifted to the left one position
which is equivalent to using the [(y-] key.

The symbol "blank" corresponds to pressing the special key [ l on the display key-
board. It is shown as a space on the screen. However, when correcting function
definitions, the [-€>] key must be used; pressing this key generates the "blank" code
too, but in doing so the symbols above the cursor are not replaced by spaces: the
entire line being corrected remains visible while the cursor is moved below it to
the position to be corrected.

Features of User Operation from the "Videoton-360" Terminal in the APLVIDEO System

The user operating procedure from the "Videoton" terminal is somewhat different from
user operation with a special APL terminal.

The display is ready for operation in the system when it is in the ONLINE status.
To put the display in operation, the keys [ ON ] are used.
"0““ “‘1 [mm]

Information input operations from the display depend on whether a given terminal is
a user terminal or an APL operator terminal (when only one terminal is connected in
the system, it is automatically considered the APL operator terminal). A user begins
text input directly at the place indicated by the cursor. But the operator has to
first send an interrupt to the system using the key [RETURN] and only after this can
he begin input of text. In both cases, information input has to be ended by
sequentially pressing the keys [LINE] [BT31

[FEED] '

This mode of terminal input can be called direct input. In the process, each symbol
that appears on the screen is sent through buses to the computer channel. Thus, it
is not possible to correct input text by replacing and inserting. However, APL
offers its own capabilities for correction of text just input if the input end
signals [LINE] [ETX] have not yet been sent to the system. For the display, this

[FEED]
capability is used as follows: When an error in text is detected, the cursor is
moved by the [<?-] key to the first incorrect symbol from the left; it is then erased
by the [DC] key; then the corrected remainder of the text is again input from this
position.

In addition to direct input, using the “Videotan” display as a terminal for an APL
system allows composing text in the offline mode. For this, the display is placed
OFFLINE by pressing the appropriate key. Then text may be composed starting from
any line. In the process, one can make use of all the offline editing facilities
by using the keys [(—1 [—9] [N N) [mass] [01.] m.) [Dc] [1c]. and the symbols
corresponding to them are not considered part of the text. Text composition is
ended by the combination [LINE] ET 3 then the cursor is set under the first line
of text and the [SEND] key is pressed. This operation causes sequential reading of
the composed text and sending it into computer storage; in doing so, the display is
put into the ONLINB state. “hen the symbols [LINE] are encountered in the composed
[FEED]

60
text, the first such symbol in the line, reading from the left, is considered the
end of input from the given line.

To correct programs by APL facilities using the "Videoton," the keys [-4)] and [+1
or [Dc] are used. The cursor is moved by the [-)] key to the position to be cor-
rected for insertion of the necessary symbols in the line. Pressing the [DC] key
right after the number of the program line to be corrected causes this line to be
removed from the program text and the line numbers to be renumbered.

In correcting lines containing combined symbols, remember that they occupy three
positions on the screen, but Just one position as a language symbol; consequently,
in moving the cursor, it is necessary to bear in mind the actual number of APL
symbols passed over by the cursor.

Output to the screen from the system starts, as a rule, at the position where the
cursor is set. In doing so, the amount of output may exceed the space remaining to
the end of the screen, and also in general may exceed the size of the whole screen.
In this case, after the last line of the screen is filled, output continues on the
first line, wiping out the information already on the screen.

The following facilities are available to prevent this. First, the iROLL] key can
be used to shift the text up a line when the last line on the screen is filled. In
the process, the very top line on the screen is lost. This procedure is convenient
with small amounts of input-Output, for example when working with an interactive
program in the "question-answer" mode. Second, the information on the screen may be
printed out on the special “VT-363" ATsPU [alphameric printer] or one similar to it
by pressing the [PRINT] key (the display is placed OFFLINE), and then the screen is
erased by the [BRASE] key in expectation of output. And third, when programming
problems that give output, output size limitations can be considered and the output
control facilities discussed below can be used.

Expanding the Capabilities of Programs for Input-Output Control

Since certain "Videoton" display control symbols are fully legitimate symbols in the
APLVIDEO language. they may be used in text constants and programs, which yields new
capabilities for controlling input-output and graphic programming.

Let us discuss several examples. In the examples, we use the following text varia-
hles to control the screen to which values have previously been assigned:

ERASE - erase screen and set cursor at home;

HOME - set cursor at beginning of screen;

LF - line feed (blinking symbol J);

ETX - end of text (blinking symbol C);

CD - cursor down one position;

CU - cursor up one position;

CL - cursor left one position; and
CR - cursor right one position.

61
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Example 1. Output text and erase screen
[3- Z - symbol for specification or assignment; see table 3]

TXT 3 '*--SAHPLE 0F OUTPUT TEXT—4'
ERASE, TXT

in the process on a clear screen on the first line will appear the information:
*—-SAHPLE OF OUTPUT TEXT-m“!

Example 2. Output text at screen line desired without erasing screen

[Russian 5 - nabla, function definition symbol;
Russian b - rho, shape/reshape; see table 3]

3 LINE N

[1] HOME - return cursor to hone position;

[2] (N-3)bCD - move cursor down needed nulber of lines taking autonatic line
feed into account;

[3] TX'l‘ - output of text;

3

LINE 8 - call of function which outputs value of variable m on line 8
of screen.

Example 3. Input of text on any screen line and output with storage of line feed

[3 - blank]
POINTER 3'bﬂll<---INPUT m' input pointer
LIST 3" empty vector of list of names
9 INPUT N
[1] BRASE

[2] (II-3) 5 CD

[3] POINTER. CU

mums W I na'-t51

[5] LIST 3 LISTJMHLLF

S
Cements on statements:
POINTER and LIST are variables defined in the node of inediate execution of APL;
N is the screen line meter, reading from top, on which will be output the
phrase POINTER and in the first position of which will be input the

name NAME;
I - 2 -- setting cursor at needed line;
3 -- output of text-pointer of input and conpensation for automatic line
feed; '
a -- input of text information in field on screen indicated by pointer and
entering of it in NAME;
5 -- adding to list of names by next name with storage of line feed.

With repeated operation of the program, a list of names is filled in that can be
output in the torn of a colum of names of operations: LIST

62
run onmm. use can
Example

4. Input of information from display screen using SEND mode

Let SCREEN be a text variable containing several lines of information which have

to be correcced to suit the Job requirements.

The program CORR will make it possible to do this operation:

coax "GREEN
3! com rx;sc [Y - nabla, v 1
[1] SC 3 TX [3 ' 4.— l
[2] msa,sc,Lr,mx
[3] HOME
[1.] 12 b ca [5 - rho, P 1
[5] 'wumrr DISPLAY OFFLINE, ransom comcuou AND sum non FIRST LINB'JiOHE
[6] sc 3 115' [na' - u l
[7] 1‘x s sc
[8] ERASEJX

3!

Comments on statements:

1
2
3-5
6

7
8
Example

[1]
[2]
[31
[lo]
[5!
[61
I7!
[81
[91
[10]

- copy text information into temporary variable SC;

- output text, which is text-sample to be corrected, to screen;

- Output message on line 16 and set cursor home;

- stop program for input. At this time, display is put OFFLINE, offline
correction is made, and then screen is read in SEND mode;

- return value to initial variable;

- check reproduction of corrected variable on screen.

5. Random walk of cursor over screen starting in its center

y RANDCR N;I;CONTRL;COHPAS [y a V]

I 3 0 [3 -‘§.]

CONTRL 3"

corms 3 CL,cn,cu,co ~
count 3 courRL,mast?l.],'+'

1 3 1+1

or um: < u) [u - a; a - x (multiplication); x7: -
BRASE:'NUHBBR 0F MOVEMENTS 0F CURSOR-'3" iota]
HOME

7 b co [b - rho]

(40 b'-'),CONTRL

!

Comments on statements:

1-6

8-10

- form control vector CONTRL which includes symbols for cursor movement,
and character '+' for indication of its positions on screen;
- set cursor in screen center and control walk.

Implementation of Working Version of APL System

The APL

system in the initial version was implemented on a Yes-1022 computer with

Yes OS in the MFT mode. A Yes-7077 console was used as the system terminal; during
operation with APL it was not used as the computer operator console.

63
FOR OFFICIAL use ONLY
FOR OF?ICIAL USE ONLY

The display version of the system was implemented with the group switch and 15
"Videoton-3bo" terminals. The APLVIDED system operates under Yes OS control in the
MVT mode. In both cases, the system uses one priority partition (MET) or region
(MVT) with a size of 180K. The Yes-5050 and Ye55061 devices have been used as ex-
ternal storage. In doing so, for the Yes-5061, 2 extents of sets were used for user
libraries with a size of 20 cylinders each and 8 cylinders for the swapping support
set.

Practice of operating with the APL system oriented to the Yes-7077 terminals has
shown that these devices can be used for APL without alteration. However, the
existing restrictions in the modified version of the language could be reduced if
use of the keys VSh (backspace), NS (new line) and PS (line feed) caused generation
of the appropriate code cambinationa.

When operating with 15 users, the APLVIDEO system in the majority of cases provides
a response time on the order of 3 seconds with a 36K-workarea for each user; in
doing so. use of processor time is negligible and the capability exists for parallel
batch processing of user jobs for Yes 05.

In addition to those sentioned, other possible terminals for Yes APL are the Yes-
8570 subscriber stations connected by communication lines to a data transmission
multiplexor.

References

1. Grenander, U. and Faryberger, V., "Kratkiy kurs vychislitel'noy veroyatnosti i
statistiki" [Short Course in Computational Probability and Statistics], Moscow,
Mauka, 1978. '

2. Petrova, Ye. P. and Saplin, M. 8., "Ustroystvo obmena informatsiyey operatora
s protsessorom" [Operator-Processor Communication Device], Moscow, Statistika,
1976.

3. Iverson, K. 3., "A Programming Language", New York, 1962.
A. Katzan, H. J., "APL User’s Guide", New York, 1971.
5. APL\360 User's Manual, IBM, “20-0683, 1969.

6. Everett, P. A., "A Formal Definition of APL Statement Syntax". APL-75 Congress.
Riza, 1975.

7. Gilman, L. and Rose, A.. "APL: An Interactive Approach“, Moscow, Mir, 1979.
Pratt, T., "Programming Languages", Moscow, Mir, 1979.

9. Ketkov, Yu. L., "Programairovaniye na BEYSIKE” [Programming in BASIC], Moscow
Statistika, 1978, pp 113-116.

COPYRIGHT: Izdatel'stvo "Finanay i statistika", 1981

8545
C50: 1863/229

6b
. USE ONLY
APPLICATIONS

UDC 658.815:681.32.06

SYSTDi FOR MONITORING METAL PRODUCT DELIVERIES 1'0 MAJOR NATIONAL ECONGiIC
CONSTRUCTION PROJECTS

Moscow MATERIAL'NO-TEWICHESKOYE SNABZHENIYE, SERIYA lo: PRIHENENIYB HATDiATICHBS-
KIKH METODOV, WCHISLITEL'NOY TEKHNIKI I ORGI‘EKHNIKI V MATERIAL'NO—TEKHNICIESKOH
SNABZHENII in Russian No 8, Aug 80 (manuscript received 1!. May 80) pp 8-9

[Article by I. B. Ayngorn, deputy department chief, USSR Gossnab Main Computer
Center]

[Text] The task "Monitoring of Metal Product Deliveries for Construction of Enter-
prises for Ferrous Metallurgy, Enterprises for Production of Fertilizer, and
Facilities Constructed on the Basis of Compensation and Integration Agreements" has
been developed by the USSR Gossnab Main Computer Center and the N118!) [expansion
unknown] and put into industrial operation at the USSR Gossnab Main Computer Center.

Product nomenclature now monitored includes four classes of metal products: rolled
ferrous metal products, steel pipes, iron pipes and industrial metal goods. Data
on the amounts of resources actually received are sent monthly by union republic
gossnab information centers and those of the main territorial administrations of
USSR Gossnab from the construction sites to the USSR Gossnab Main Computer Center
over communication lines.

The “Minsk-32" computer is used to receive the data from the communication lines
and monitor teletype messages, while data processing is done on the Yes-10140 conu-
ter. Three data bases have been built with the Yes-1050 computer, maintained by
the "Oka" DBMS: "Catalog," "Projects" and "Ministries." The "Catalog" data base
holds permanent data for the task, "Projects" holds planned and actual data on
metal product deliveries to each site, and "Ministries" holds summary data on plans
for delivery and actual deliveries of metal products by target functions, construc-
tion ministries and main territorial administrations of the USSR Gossnab.

The 08 input generator is used to monitor data and convert the files into a form
conVenient for loading into the data base.

"Oka" DBMS facilities were used to build programs to load the information into the
data base, summarize it by target functions, ministries and territorial administra-
tions and printout the output form. The output document for each target function
contains summary data on the delivery of each type of resource for all projects of
the target function, including by each ministry, and within a ministry-41y each
territorial administration and by projects. In the output document are given data

65
FOR OFFICIAL USE ONLY
FOR OFPICIAL USE ONLY

on the plan for deliveries for the year and for the reporting period. and also data
on the actual delivery for the reporting period. Planned for the future is expan-
sion of the nomenclature of monitored products, development of new output forms

and tying this task to other tasks associateu with supply of materials and equipment
for capital construction.

Solving this problem achieves elimination of manual monitoring of the fulfillment of
assignments, establsihed annually by the USSR Gossnah, to the territorial agencies
for delivery of physical resources to the major projects of the national economy.

Address for inquiries: Moscow. Orlikov per.. 5, Ms Goasnaba SSSR [USSR Gossnab
Main Computer Center].

COPYRIGHT: Tsentral'nyy nauchno-issledovatel'skiy institut infornatsii i
tekhniko-ekonomicheskikh issledovaniy po material'no-teklmicheskom snabzheniyu
Gossnaba SSSR, 1980.

85(05
C80: 1863/265
UDC 681.32:[339.6:662.6/.7]

PROCESSING 0? ONLINE DATA ON FUEL RESERVES AI MAJOR USSR ENTERPRISES AND POWER
STATIONS

Moscow MATERIAL'NO-TEKHNICHESKOYE SNABZHENIYE, SERIYA 6: PRIMENENIYE HATEMATICBES-
KIKH HETODOV, VYCHISLITEL'NOY TEKHNIKI I ORGTEKENIKI V MATERIAL'NO-TEKHNICHESKOH
SNABZHENII in Russian No 4, Apr 80 (manuscript received 29 Dec 79) pp 2-3

[Article by Ye. G. Torchinskiy. deputy department chief , Main Computer Center for
USSR State Committee for Material and Technical Supply]

[Text] The task on processing of online data on fuel reserves at major power sta-
tions and enterprises in the country has been worked out and placed into industrial
operation at the USSR Gossnab Main Computer Center. The task is designed to
receive. process on a computer and output to receivers reports on the availability
of fuel reserves at more than 600 major enterprises and power stations of 16
ministries.

This problem is solved in two stages: in the first, special forms of normative
provisions containing a list of the enterprises and types of fuel used by them are
circulated.

The forms of normative provisions are formatted and printed on the Yes-1000 computer
at the USSR Gossnab Main Computer Center. Based on the filled-out forms received
from the ministries in September of each year, correction and forming of the library
of normative provisions and dictionaries of enterprises and types of fuel is per-
formed on the "Minsk-32" computer. Processing of the online information and report
formatting is performed in the second, main stage.

Information is acquired from the enterprises and power stations by the information
centers of the territorial agencies of the USSR Gossnsh. The information received
is recorded on the special form for online reporting. The data on the form is
punched on perforated tape and transmitted by teletype to the USSR Gossnab Main
Computer Center. The information goes directly into the “Minsk-32" computer and is
checked; when errors are detected, information on the errors is printed on the
subscriber's teletype.

After the information is received and checked, an information file is formatted and
processed and the output documents are printed.

67
FOR OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

The "Dialog" software system, developed by the Information Dispatch Center of the
USSR Ministry of the Coal Industry, the "Minsk-1560" commmication channel
interface apparatus and the "Minsk-32" computer are used to receive, check, output
error information to the subscriber. record on magentic tape and form intermediate
files. A C0801. software system for the "Minsk-32" computer, developed at the Main
Computer Center, is used to form thk main information files and library of
normative provisions and dictionaries, to process information and print the output
documents. Data for the problem are also used by the Information Center of the
USSR Gossnab Hain Computer Center to submit information to the Central Staff of the
USSR Gossnab by the "Hang-2200" minicomputer. The "Minsk-32" computer magnetic
tape is recopied into the Yes computer codes and then recorded on the MD [magnetic
disk] of the "Wang-2200" minicomputer. Consolidated data are output to a video
terminal and for printing.

The result of solving the problem is a report on fuel reserves consisting of two
parts: consolidated data on fuel reserves for the entire list of enterprises and
power stations and types of fuel by each ministry; a list of enterprises and power
stations with a critical fuel reserve (three days for the Hinistry of Power and
Electrification, five days for the others).

Implementation of the task has made it possible to intensify monitoring the
development of fuel reserves and to improve expeditious management of the process
of distributing fuel to the major enterprises and power stations in the country.

Address for inquiries: Moscow, Promyshlennyy proyezd. 3, WT: Gossnaba SSSR
iUSSR Cossnab Main Computer Center].

COPYRIGHT: 'rsentral'nyy nauchno-issledovatel'skiy institut informatsii i
tekhniko-ekonomicheskikh iasledovaniy po material'no-tekhnicheskom snabsheniyu
Gossnaba SSSR, 1980.

85105
680: 1863/2453

68
PUBLICATIONS

ABSTRACTS nos JOURNAL 'Auromrrou AND coupons rtcunomcr'. JULY-AUGUST 1981
Riga AVTOMATIKA I WCHISLITEL'NAYA rmmrn in Russian No 6, Jul-Aug 81 pp 97, 99

UDC 681.3.06:519.872
SOME RESULTS 0? ANALYSIS OF A PROBABILISTIC MODEL OF TELEPROCESSING SYSTEMS

[Abstract of article by S. F. Yashkov]

[Text] A complete analysis of teleprocessing systems described by the system

H ] c I l is given with a discipline of a uniform partition of the processor in
which each request present in the system is serviced simultaneously with the others
at a variable rate equal to l/k in the case of k requests at the given time. A new
analytic method of studying a system is developed; it is used to derive stationary
distributions and features of basic characteristics. A number of practically im-
portant characteristics is presented in a form convenient for calculations. New
regularities of system behavior are established that substantially expand the
capabilities of applying the dervied results for analysis of computer network
models. Bibl. of 9 titles. 1 table.

UDC 681.324
STRUCTURE OF A SYSTEM FOR DATA EXCHANGE BETHBBN PROCESSES IN COMPUTER NETWORKS
[Abstract of article by J. Nemeth]

[Text] Computer network services are effected by processes that exchange data
with each other. In a hierarchical system, data exchange between processes has
been studied less than at the other levels. This effort is devoted to a study of
this question. The model is based on the principle of the "meeting place" both to
effect switching and to fully establish communications. "Meeting place" location
does not depend on terminal location. Conanndcation control system does not depend
on the system effecting data exchange. Practical use is illustrated by examples.
Bibl. of 12 titles. 8 figs.

69
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

UDC 681.324:519.872
MODEL OF A DISTRIBUTED TELEPROCESSING SYSTEM

[Abstract of article by A. A. Amosov]

[Text] Analytic model of the transport level of a teleprocessing system is dis-
cussed that considers the topology of the communications network and the system of
information transmission matrices. The com-unications network is represented as a
system of interacting transmission paths (virtual connections) modeled by queueing
networks of s special structure. A precise analytic solution is given to the prob-
lem of finding the final vectors of states of the paths using the principle of
semilocal balance. Bibl. of 6 titles.

UDC 681.32:519.7l3

CALCULAIION 0P LOVER-BOUND ESTIMATE 0? NUMBER OP TERMS IN ON? SYSTEM DESCRIBING
LOGIC STRUCTURE OF AUTOMATON

[Abstract of article by B. E. Lange]

[Text] A simple procedure is proposed for calculating the loner-bound estimate of
the number of different terms in a system of DR? [disjunctive normal form] of
Boolean functions that describes the logic structure of a finite automaton. The
calculated estimate is the best in the sense of achievability. The calculation pro-
cedure consists in constructing some finite undirected graph and determining its
chromatic number. Reducing graph dimensions in constructing it is considered to
siaplify determination of the chromatic number. The procedure can be used to esti-
mate the possibilities of implementation of an automaton to be synthesized Iith a
progranmable logic array vith specfied dimensions and to estimate the quality of
solutions to the problem of optimization of the logic structure of an automaton
that are derived by using approximation methods of logic synthesis. Bibl. of 7

tiltes. 3 tables.

UDC 681.323:518.S.001
IMPLEMENTATION 0? PARALLEL POLYNOHIAL APPROXIMATIOH IN HDLTIPROCBSSOR STRUCTURE
[Abstract of article by 0. N. P'yavchanko, Ya. Ya. loam and I. P. Surshenko]

[Text] A method is proposed to implement in a multiprocessor structure a parallel
polynomial approximation in a time proportional to the logarithm of the degree of
the polynomial, uith a proportionality factor equal to the time of one multiplica-
tion. Applications to implementation of functions, division and linear differential
equations are given. Variants of apparatus isplementation are given. Bibl. of 16
titles, 2 figs.. 1 table.

70
MICROPROCESSOR IMPLEMENTATION OF DIGITAL CONTROL AUTOMATA

[Abstract of article by B. H. Kagan. 6. Kb. Novik, V. G. Persheyev and M. I.
Shamrov]

[Text] Discussed are features of implementation oriented to logic control of digi-
tal control automata with microprocessor systems (H—systems). Different approaches
to construction of H—system programs are given. Methods of program implementation
of logic converters are analyzed. Bibl. of 5 titles, 5 figs.

UDC 519.873:681.324

APPLICATION OF RELIABILITY THEORY T0 PROBLEM OF EXPERT EVALUATION OF COMPUTER
SYSTEMS
[Abstract of article by V. I. Levin]

[Text] Discussed is the problem of aggregating individual orderings Y1 of one and

and the same set of objects by different experts i - l, ..., n. In contrast to the
classic statement, the author considers the link between Y1 and the "true" ordering

of objects Y (by introducing the probability q of error by an expert in evaluating
the relationship [:Jij between two objects). The author suggests aggregating the

evaluations D11 according to the 01-majority rule (when a. - 0.5 -- according to

the majority rule). It is shown that for ¢>q all these rules when n -) 00

are asymptotically devoid of errors, but only the majority rule with the probability
of l precludes contradiction or uncertain situations. Aggregating the evaluations
Y1 into the evaluation Y is done by summing the collective evaluations of the

paired relationships for all pairs of objects. It is shown that for that rule of
aggregation, the probability of a collective error of the first kind (transposition
of objects in Y) and of the second kind (formation in Y of loops) approaches zero
when n —->oo. Bibl. of lo titles, 1 table.

UDC 681.326.76.06:621.3.049.774.2

METBOD OF CONSTRUCTING CHECKING EXPERIMENTS FOR LARGE-SCALE INTEGRATED CIRCUITS
0? MAIN STORAGE

[Abstract of article by V. C. Totaenko and 3. v. Strelyayev]

[Text] A method is suggested for constructing checking experiment (PT) for Hos LSI
memory based on a general approach called "checking the hierarchy of properties."
The checking experiment is specified by two sections of input-output sequences
(VVP), one of which is designed to check the electronic framework (E0), and the
other to check the memory matrix and read/write amplifiers. when building the first
section of the input-output sequences, assumptions are made on the possible nature
of manifestation of any malfunctions of the electronic framework. The second sec-
tlon of the input-output sequences is not built in advance: in building the first
section, consideration is given to the necessity of including in it sections of the

71
FOR OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

checking experiment that test the storage elements of the matrix. Completeness of
the proposed test is shown. Length of the suggested test for the memory equals

6N + 21: (IE + 1) where u is memory size. 3151. of 9 titles. 1 £13.

unc 631.321.
mumsanon or ELEMENTARY sac-nous nu A comm-m cmicmos amour
[Abstract of article by Yu. K. Apraksin]

[Text] Discussed is the problem of finding the set of all elementary sections in
a computer communication network. Used as a model of the computer communication
network structure is a graph of communications; its structure is specified by a
matrix of incidences. The suggested algorithm for finding the elementary sections
between two apexes of the graph is based on using a graph contraction operation and
is a simple procedure for transforming the matrix of incidences into the matrix of
elementary sections. Bibl. of 7 titles. 3 figs.

UDC 621.376
SIGNAL PROCESSING IN DISCRIMINATOR SYSTEMS CONSIDERING NOISE
[Abstract of article by G. E. Vasarin'sh and E. Kh. Khermanis]
[Text] Discussed are probability aspects of signal processing in discriminator
systems with regard to intrinsic noise. Assumed as known are the laws of distribu-
tion of additive noise of each discriminator. Probable characteristics of applica-

tion of discriminator systems are dervied. Examples are cited. Bibl. of 4 titles,
5 figs.

UDC 621.391.256:517.S87
SIGNAL ANALYSIS IN TERMS OF REAL EXPONENTS
[Abstract of article by A. A. Kochetkov, V. V. Krylov and D. H. Ponomarev]
[Text] Signal analysis by exponents with real indexes is discussed. Described is
a method of determining the signal relaxation spectrum based on constructing an in-
verse filter in aggregation with a Fourier transformation. The method permits
relatively simple construction of a digital analyser of the relaxation spectrum.
An algorithm is given to calculate spectral.dsnsity of a signal specified by its
discrete samples using a fast Fourier transform. Bibl. of 6 titles, 3 figs.

unc 681.326

RATE CAPABILITIES 0F SYNCNRONOUS INFORMATION TRANSMISSION BY 'CHANNEL—TO-CBANNEL'
ADAPTERS

[Abstract of article by V. A. Red'ko and P. A. Sklyarsvich]

[Text] Discussed is synchronous process of indormation transmission using a
"channel-to-channel" adapter having a sectionalized buffer with limited storage.

72
The mathematical model of the system in question is an 8H0 [queueing system] in
which request service time and time between sequential entries of requests have
constant components. A technique is offered for approximate analysis of such
queueing systems to derive estimates of rate capabilities of synchronous informa-

tion transmission. Example of application of technique is given. Bibl. of 5
titles. 6 figs.

UDC 681.324
SYNTHESIS OF HULTIHACHINE STRUCTURES FOR AUTOMATION 0F SCIENTIFIC RESEARCH

[Abstract of article by G. P. Vasil'yev. 6. A. Yegorov and V. I. Shyaudkulis]

[Text] Based on an example of a specific multimachine hierarchical complex,
authors discuss solution to problems of synthesis of logic and physical structures
of such systems. They substantiate cosposition and structure of system software
and organization of interaction of its various elements. They discuss interfaces
between user programs and system software. They point out the possibility of using

the suggested logic structure in complexes of various configurations. Bibl. of 8
titles, 7 £138., 1 table

COPYRIGHT: Izdatel'stvo "Zinatne", "Avtomatika i vychislitel'naya tekhnika", 1981

8545
C50: 1863/268

73
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

COLLECTION OF PROBLEMS 0N MACHINE PROCESSING OF BCONMC INFORMATION

Moscow SBORNIK ZADACH P0 HASHINNOY 0mm: MMMSKOY MOMSII in Russian
(signed to press 23 Feb 81) pp 2. 109. 132-133. 135

[Annotation, table of contents, tables 18 and 36 from book "Collection of Problems
on Machine Processing of Economic Information", by Gerta Kirovna Eegotskaya,
Vasiliy Petrovich Kosarev, Boris Hikhaylovich mdsitakiy and nuns Alekseyevna
Umnova, Izdatel'stvo "Finansy i statistika". 10,000 copies. 136 pages)

[Excerpts] This book contains the problems associated with the design of systas
for machine processing of economic information—83031: design of codes, source
documents and machine media. The main emphasis is on development by design of com-
puter installations (estimate design work). The varieties of information proces-
sing systems are treated and problems on evaluating the efficiency of different
computer data processing system are elaborated.

This book is intended for students in van: specializing in economics.

Table of Contents Page
Introduction 3
Chapter 1. Economic Information 5
1.1. Classification of Economic Information 5
1.2. Economic Problems and Properties of Economic Information 9
1.3. Requirements for Economic Information 12
Chapter 2. Structure and Evaluation of Economic Information 16
2.1. Identification of Units of Information 16
2.2. Structure of Economic Information 17
2.3. Determining Volumes of Economic Data 23
2.6. Qualitative Characteristics of Economic Information 25
Chapter 3. Information Procedures and Kathematical Apparatus for
Description of Economic Information 28
3.1. InformatiOn Procedures 28
3.2. Algorithuization of Economic Problems 32
3.3. Mathematical Apparatus for Description of Economic Intonation 39
Chapter 4. Organization of Design of Hachine Processing Systems for
Economic Information as
4.1. Design of Nomenclature Codes 65

7h
4.2. Design of Source Documents and Machine Media 59
b.3. Design of Media of Result Information 79

6.6. Design of Technological Processes for Machine Processing of
Economic Information 88

Chapter 5. Organizational Hardware for Machine Processing Systems for

Economic Information 109
5.1. Characteristics of Computer Installations 109
5.2. Building Computer Networks and Centers 111
5.3. Organization of Computer Installations 115

5.6. Efficiency of Systems for Machine Processing of Economic Information 124

Table 18. Table of Computer Center Categories by Staff Wages
Number of Points

0uantitative and Qualitative Characteristics 2 4 6 8 10 12
_______________________________________________________________________________.___
Volume of work performed. 1. to 200 X
thousands of rubles 2. 200-500 X

3. 501-800 x

4. 801-1200 x

5. over 1200 X
___________________________________________________..._.__________._________.______
Problem composition by 1. unlimited X
performance schedule 2. current X

3. on-line X
____________________________________________._________________________.____________
Functions performed 1. problem programming and

algorithmization x

2. automation of programming
and introduction of
economic-mathematical
methods x
3. organization of ASOD
[automated data
processing system].
methodological directiOu
and coordination of work
of related computer centers x

   
       
     

   

Classification of
computer center to
rage groups

to group I
to group II
to group III

over 18 points
from 11 to 18 points
to 10 points

     

75

FOR OFFICIAL USE ONLY
iype oi

 

zxpe of Operation Bguipgggt
1 2
1. Document reception
2. Pricing Iskra-lll
3. Pricing supervision "
b. Check pricing by
supervisory tabular form
"Correction of Errors" "
5. Automatic pricing EVPBO-Z
6. Autoaatic card
selecting or merging RPHSO-ZH
7. Card punching P80-6
8. Alphameric card punching PA80-6
9. Check card punching by
verification KOO-2
10. Check alphameric card
punching by verification KARO-2
11. Addition on tape SDV-107
12. Counting method of
verifying punched cards-
comparison of totals,
correction of errors SUV-107
13. Counting method of card
punching verification-
combination of operations
11 and 12 SUV-107
16. Reproduction and
duplication of cards 2380.2
15. Interpretation of cards RHBO-l
16. Perforation by
graphic marks 9880-1
17. Rapunching of
erroneous cards POO-6
18. Balancing tabulation T-SH

"for printing"
19.
20.

21.

22.
23.
l

26.
25.
26.
27a
28.
29.

30.

31.
32.

33.
36.
35.

Note.
way.

Balancing tabulation

with pricing T-SM "
Balancing tabulation

”for total" T-SH "
Checking of balancing

tabular forms and

entry of check sums batch of
in journal lskra-lll documents
Card sorting 880-5“ card column
Card sorting 8880-3 "
Tabulation of summaries

"for printing" T-SH card
Same. with total

punching P180-1 "
Tabulation of summaries

"for total" T-SH "
Same, with total

punching P180-l "
Tabulation of alpha-

meric summaries TABO-l "
Same, with total PI80-l,

punching TABO-l. "
Output of tabular form tabular
summaries Iskra-lll form
Tape punching STArZH word

Automatic collation of

two tapes KSU-l "

Automatic copying from
tapes to cards BLP-l card

Card input to computer Yes computer "

Card output from computer Yes computer "

6,000

6,000

50
20.000
28,000

3,100
2,800
3,500
3.200
6,200
3,900

1
2,800

15,000

6,800
30,000
6,000

0.6

0.6

0.6
0.36
0.36

0.6

0.6

0.6

00‘

0"

0.4

0.6
0.6

0.6

0.6

0.5

0.15

0.02
0.19
0.055

0.15

0.207

0.15

0.207

0.35

0.607

0.007
0.025

0.068

1.125

In operations 12, 21 and 30, the models of the machines are used in a limited

But in estimating their amortization, it is necessary to account for full labor
input of the operations since at this time they are not used for other operations.

For all machines, except the rcproducer, collating and interpreting machines, elec-
tronic computer perforator, reading perforator and devices for compying from perfor-
ated tapes to cards, the hourly amortizatioa norm is based on tHO‘shift operation.

COPYRIGHT: Izdatel'stvo "Finansy i statistika", 1981

8565

C80:

1863/257

77

FOR OFFICIAL USE ONLY
P03 0P?ICIAL USE ONLY

UDC 681.32:621.32
HULTIFUNCTIONAL AUTOMATA AND THE ELEHBRT BASE OF DIGITAL COMPUTERS

Noscou HNOGOFUNKTSIONAL'NYYE AVTOHATY I ELBHENTNAYA EAZA TSIFROVYKH EVH in Russian
1981 (signed to press 18 Dec 80) pp 2-4, 239-240

[Annotation, foreword and table of contents from book "Multifunctional Automate
and the Element Base of Digital Computers", by Valentin Aleksandrovich Hishchenko,
Valeriy Dmitriyevich Kozyuminskiy and Aleksandr Nikolayevich Semashko. Izdatel'stvo
"Radio 1 svyaz'", 6,000 copies, 260 pages]

iText] Presented systematically in this monograph are the theoretical and practi-

cal aspects of the synthesis of general-purpose and multifunctional digital auto-
mata--a new class of digital devices that permit implementation of specific func-

tions based on the principle of multifunctionality. The element base, implemented
on the basis of these automata, permits building high-speed computers and homo-

geneous computing media. Described in the book are methods for synthesis of these
automata, and numerous examples of implementation of concrete structures are given.

The monograph is intended for scientific workers, engineers, post-graduate students
and those in upper-level courses of VUZ's studying the questions of computer
technology and electronics.

Foreword

The great and critical problems facing domestic computer engineering are forcing
specialists in this field to look for new methods of synthesis of computer struc-
turcs. It is now clear that the future belongs to multiprocessor computer systems
for parallel processing of information, in which the questions of regularity of the
medium play an essential role, affecting the durability, reliability, adaptability
to manufacture and a number of other practically important indicators of computer
structures.

The abundant possibilities of contemporary and future microelectronics are setting
an economically important task for theoreticians and practitioners: development of
a set of LSI circuits that will meet the needs of a broad range of users and take
into account the future development of computer structures. In extensive use now
as these LSI circuits are microprocessors in combination with programmable logic

arrays.

78
In this book. the authors offer the reader another class of automate that can be
used both in cornbination with programmable logic arrays and microprocessors and as
stand-alone units. These are general-purpose and multifunctional automata with
practically unlimited functional capabilities that permit building super fast com-
puters and homogeneous computer media. Preliminary studies made by the authors of
this book have indicated their practical implementability [57—60].

The very problems of general-purpose and multifunctional structures cannot be
called absolutely new. In the domestic and foreign literature, there are a number
of largely theoretical works on this topic. These are the works of Soviet experts:
E. V. Yevreinov, I. V. Prangishvili, E. A. Yakubaytis et al., as well as of
foreign authors [53-56]. Nevertheless, the authors believe that this relatively
new direction is in need of certain popularization and deserves greater attention
from developers.

In this book, the authors present their own original conception of general-purpose
and multifunctional structures and cite fundamentally new provisions and results
of synthesis of general-purpose and multifunctional automate. In contrast to
known works, the authors have set themselves the task of bringing theoretical
results to practical schemes and techniques for their synthesis that can be used
in dcsign work. At the same time. the book has a clearly expressed monographic
nature since it generalizes a number of known works by the authors listed above
and prt :ents systematically the main achievements in this field.

The features 0‘ general-purpose and multifunctional automate that afford a strict
mathematical description of the process of their synthesis permit solving a number
of known problems that now bother computer designers and developers. Here are
some of than:

1. The large nomenclature of 1.51 circuits required for building modern computers.

General-purpose and multifunctional automate permit reducing this nomenclature to
the mlnimn- for many ideologies for building architectures for fiture digital con-

put-rs. solving this problem has a clearly upressed economic nature since deve-
lopment of modern LSI circuits is rather expensive.

2. Increasing the output of suitable circuits in series production. This problem
is solved by the broad functional capabilities of the element base, which permits
improving the technology of production that does not vary over an extended period
and thereby increasing the output of suitable circuits.

3. Sharply reducing the volume of reserve components and raising the repairability,
durability and reliability of computers. This probl- is solved by developing
interchangeable modules of minimal nomenclature with controllable functionality
with invariable structure and links, which ultimately permits putting reserve
t'lt‘ﬂ’lt‘ﬂth‘ in the machine itself.

I'n. Lochine synthesis of elements and devices for computers. This probI- may be
ssolwd on the basis of the theory of general-purpose and multifunctional automata
through the properties of universality of these automata, since a general-purpose
module muy "generate" a large number of digital microstructures.

‘i‘. - reader will find in this book a more detailed presentation of the individual
parts of these problems.

7‘)
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

This book was written by u team of authors. The foreword and sections 1.1. 2.4,
2.5. 5.7 and 10.3 were written by T. A. Nishchenko, V. D. Kozyuminskiy and A. N.
Semashko; chapters 2, 3 and 7-10 were written by V. A. Hishchenko and V. D.
Kozyuminskiy; and chapters 1 and 4-6 were written by V. A. Hishchenko and A. N.
Semashko.

The authors and publisher will be very grateful for comments and remarks on the
book's content; these should be sent to: Hoskva, Glavpochtamt, s/ya 693
[Hoscow, Main Post Office. Box 693], "Sovetskoye radio".

Table of Contents Page
Foreword 3
Hultifunctionality and Some Problems of Co;_uter Technology
1.1. Problems of Development of Computers and Their Element Base 5
1.2. Main Trends in Element Base Development 9
1.3. Analysis of State of Theory of Multifunctional Automate . 12
1.4. Discussion of Results 13

General—Purpose and Multifunctional Digital Automata
2.1. General-Purpose and Multifunctional Autonata. Concepts and Definitions 14

2.2. Mathematical Models of U- and H-Automata 16
2.3. Structural Synthesis of U-Automata 20
2.4. hain Characteristics of U- and H-Automata 26
2.5. Classification of M-Automata 31
2.6. Discussion of Results 34
Two Hethods of Synthesis of H-Automata
3.1. Structural Synthesis of H-Automata by Canonical Method 36
3.2. Synthesis of H-Automata Based on Source Model 45
3.3. Comparative Evaluation of H-Automata Synthesis Methods 51
3.4. Discussion of Results 54
Synthesis of Trivial u: - Automata
4.1. Analysis of Functional Capabilities of Logic Elements 55
4.2. Statement of the Problem of Synthesis of Trivial Un-Automata 61

4.3. Synthesis of Trivial U1

4.4. Synthesis of Trivial 02
4.5. Synthesis of Trivial Ui-Automata in the Class of Tuning Alphabet B 65

4.6. Synthesis of Trivial Ui- Automats in the Class of Tuning Alphabet c 70

-Automaton 63
1-Automata in the Class of Tuning Alphabet A 64

4.7. Synthesis of Trivial ui- Automata by Cascade Methods 75
4.8. Synthesis of Trivial Ui-Automata by Isolation Method 80
4.9. Transformation of Trivial Automata in Various Classes of Tuning

Alphabet 1 86
4.10. Synthesis of Trivial Un-Automata with Arbitrary Inputs of Tuning 89
4.11. Discussion of Results 92

Synthesis of Trivial M-Automata

5.1. Statement of Problem of Synthesis of Trivial M-Automata 93

80
5.2.

5.3.
5.5.
5.5.
5.6.
5.7.

5.8.
5.9.

Elements of Theory of Selecting Functions in Solving the Problem of Synthesis

Questions of Analysis of Functional Capabilities of Trivial

1

Un—Autonata for Realization of Logic Functions g n Variables

Method of Synthesis of Trivial Ml-Automata on Basis of Ul-Automata

hethod of Constructing Networks.8 Switching M:-Automats
Synthesis of Trivial Ml-Automata by Diagram Methods

Synthesis of Trivial

nMl-Automata by Fitting Method

Synthesis of Trivial III-Automate by Method of Optimization of

Starting Model

Synthesis of Trivial M:-Automata

Discussion of Results

of Trivial U- and M-Automata

6.1.

6.8.

1

Statement of Problem of Synthesis of Trivial 01- and Mn -Automata on
Basis of Selecting Functions

Types of Selecting Functions. Their Interrelation and Properties
Presentation of Logic Functions by Sections of Selection

Logic Aspects of Selecting Functions of the Form sc (.) when omega - 1

Logic Aspects of Selecting Functions of the Form sc (-) when

omegaz - 2"-1

Questions of Hardware Implementation of Selecting Functions of the

Section of the Form sc ( ) U1

Synthesis of Trivial

- and Mi-Automata on Basis of Selecting

Functions of Section of Form sc (.)

Discussion of Results

Synthesis of M-Automata on Basis of Initial General-Purpose Digital Model
Definiticn of Parameters of Structural Schemes That Realize

7.1.

Transformation of A1

Selection of Structural Scheme for Initial Digital Model
Definition of Logic Functions and Adjustments of Initial Model
Optimization of Initial Model

Discussion of Results

Questions of Automation of Synthesis of Discrete Devices on Basis of U-Mndel
General Structure of System for Machine Synthesis of M-Automata

8.1.
8.2.
8.3.

l.

o a
a o
s o

8

8 5

8 6
Examples

9.1.

9. 2.

Algorithm for Selection of Initial Ut-Automaton
Algorithm for Definition of Logic Functions Realized by Trivial

Ui-Automata of Model

Algorithm for Search of Adjustments of U—Model
Algorithm for Optimization of Structure of U-Model

Discussion of Results

of Synthesis of M-Automata by Method of Optimization of Initial Model
Synthesis of Single—Digit Adder-Subtracter with Adjustment of Class C

Synthesis of Digit of ALU [Arithmetic and Logical Unit] with

Adjustment of Class C

81
FOR OFFICIAL USE ONLY

95
96
109

113
120

127
130

132

133
133
135
137

141

144

165
149

150

152
166
170
178

180
182

185

188
191
198

199
203
FOR OFFICIAL USE ONLY

9.3. Synthesis of Digit of ALU with Adjustment of Class A 1 206
9.4. Synthesis of H-Autonata with Memory on Basis_of Trivial U -Automata
with Feedbacks “ 209
9.5. Synthesis of Digit of ALU of Accumulator Type 216
9.6. Questions of Synthesis of Tabular Devices for Information Conversion 218
9.7. Discussion of Results 222
Evaluation of Efficiency of H—Automsts
10.1. Evaluatioa of Complexity of H—Autonsts 223
10.2. Reliability of H-Automata and Systems Based on Them 226
10.3. Evaluation of Cost of H-Automats 232
10.5. Discussion of Results 234
Conclusion 235
Bibliography 236

COPYRIGHT: Izdstel'stvo "Radio 1 svysz'", 1981

8545
C80: 1863/257-A

82
FOR OFFICIAL use ONLY
PARALLEL PROCESSORS FOR CONTROL SYSTEMS

Moscow PARALLBL'NYYB PROTSBSSORYDLYA UPRAVLYAXUSHCHIKH SISTEH in Russian 1981
(signed to press 3 Apr 81) pp 2-11, 1&2-158

iAnnotation. table of contents, preface, introduction, chapter 9 and bibliography
from book "Parallel Processors for Control Systems", by Yakov Il'ich Pet,
Energoizdat. 12,000 copies, 160 pages]

[Text] Author deals with questions associated with algorithmic and logic struc-
tures of parallel processors. He covers various types of homogeneous processors
that make it possible to substantially raise the speed of systems in solving large-
scale computational and informational-logic problems.

The processors described can be used for hardware implementation of software func-
tions and for developing various functional-oriented systems.

For engineers and technicians engaged in design of computers and systems, as well
as students in VUZ's of the corresponding specialties.

Table of Contents Page
Preface 3

Introduction. Control Systems and Problems of High-Volume Processing of
Information 5
Ohapter i. Specialized Homogeneous Processors 12
1. Basic Concepts 12
2. Some Examples of Special-Purpose Homogeneous Processors 21

Chapter 2. Special-Purpose Homogeneous Processors Oriented to High-Volume

Retrieval Operations 31
3. Definition of Search Operations 31
a. Processor Oriented to Maximum Search Operation 33

5. Processor Oriented to Retrieval Operation for All Greater and All
Lower Numbers 36
6. Processor Oriented to Search Operation by Interval 40
7. Processor Oriented to Search Operation for Nearest Number 42
8. Basic Operations of Special-Purpose Homogeneous Processors 47
Chapter 3. Ordering of Information in Special-Purpose Homogeneous Processors SO
9. Some Ordering Algorithms 50

83

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE DULY

lO. Ordering Based on the Basic Operation PNB [Maximum Search]
(PNM) [Minimum Search]

11. Ordering Based on the Basic Operation PVB [Search for All Greater]
(PVM) [Search for All Lover]

12. Ordering in Specified Limits

13. Component Comparison of Two Arrays

14. classification of Numbers

Chapter 6. Link between Special-Purpose Homogeneous Processors and Other
Types of Parallel Processors
15. Principle of Associative Processing
16. Other Variants of Parallel Processing

Chapter 5. Associative Parallel Processors
17. Associative Processor with Expanded Functions (1: -Processor)
18. Some Information on APL Language
19. Microprogramming for Special-Purpose Monogeneous Processors
20. High-Volume Computations in then -Processor
21. Component Multiplication of Two Vectors
22. Accelerated Component Multiplication of Two Vectors

Chapter 6. Orthogonal Parallel Processors
23. H. Shooman's Design
24. OMEN [Orthogonal Mini Embedmeﬂt] System
25. Orthogonal Processors Based on Special-Purpose Homogeneous Processors

Chapter 7. Dynamic Parallel Processors
26. Structure of Dynamic Parallel Processor
27. Dynamic Processors Based on Special-Purpose Homogeneous Processors

Chapter 8. Data Structure Conversion in Parallel Processors
28. Data Structure Conversion Operations
29. Some Devices for Data Structure Conversion
30. Use of Special-Purpose Homogeneous Processors for Data Structure
Conversion

Chapter 9. Possible Applications of Parallel Processors in Control Systems
31. Autonomous Special-Purpose Processors
32. Special-Purpose Attachments
33. Functional Modules
34. Possibilities of Practical Implementation of Special-Purpose
Homogeneous Processors

Bibliography

Preface

55
56

63
65

67
67
69

72
72
76
81
85
88
92

96
96
98
100

101
101
112

120
120
126

132

142
162
166
166

169
153

In modern control systems, the amount of information and requirements for fast pro-

cessing of it are continually increasing.

One important reserve for increasing the efficiency of control systems is the use

of special-purpose digital devices and. in particular, parallel processors.

81:
The achieve-eats of modern microelectronics are turning parallel computations and
parallel processors into reality. A number of efficient associative and conveyor
type parallel prOcessors have emerged. Use of them shows that the effective speed
in solving suitable problems is increased several orders.

The heightened interest in special-purpose and parallel processors has also been
reflected in the increasing number of articles published in Soviet and foreign
scientific and technical journals.

In this book, special attention is paid to one type of parallel computing device--
the so-called special—purpose homogeneous processors, covered in the first four
chapters. Each special-purpose homogeneous processor is a two-dimensional combina-
tional iterative array, matched with matrix storage. The processor is oriented to
execution of some group (large-block) operation on an array stored in its storage
elements. These basic operations can have independent value (for example, in infor-
mation rctrieval problems) or serve as the basis for microprogram implementation

of various algorithms.

Also discussed are other types of parallel processors, in some sense "related"
special-purpose homogeneous processors, namely: associative (chapter 5),
orthogonal (chapter 6) and dynamic (chapter 7).

In connection with organization of parallel processing of large arrays of informa-
tion in modern control systems, assuming great importance are questions of rearrange-
ment of arrays and conversion of their structure. The possibility of using some
special-purpose homogeneous processors for data structure conversion is shown in

chapter 8.

The description of the specialized processors is illustrated by examples of solving
individual large-scale problems that are typical for control systems. Questions of
application of parallel processors in control systems are also discussed in
chapter 9.

The author is sincerely grateful to L. V. Kantorovich and D. A. Pospelov for the
great interest and attention shown to this work.

The author thanks V. N. Aleyeva, N. A. Zosimova and Ye. V. Suvorov and the editor,
Ye. I. Piyl', for their valuable comments that facilitated improving the content of

the book.
The Author

Introduction. Control Systems and Problems of High-Volume Information Processing

The modern scientific and technical revolution is inconceivable without the wide-
Sprend application of various automated control systems. The necessity of continual
development of control systems, and increasing their functional capabilities, pre-
cision and reliability of operation makes enhanced demands on digital computing de-
vices--the major component of these systems.

The requirement for enhanced efficiency of computers is closely tied to the features
of the problems solved in control systems [1].

8')
FOR OFFICIAL use ONLY
FOR OFFICIAL USE ONLY

Typical for automated sys.-ms of organizational control is the extremely large
volume of information (data bases used in large control systems are continually
growing and may reach 1010 to 1011 bytes). Modern computers (third-generation
machines), as a rule, raunot adequately handle the processing of such large files.

in automated and automatic process control systenm. the volume of information to be
processed is relatively not large, but usually processing of control actions is
required in the real-time mode. With the large rate of flow of processes in the
controlled object, this ezceeds the capability of existing machines.

Finally, special-purpose automated systems can make very high demands on the
volume and speed of processing. An example of a special problem with such demands
is air traffic control at a modern airport (recall that the STARAN special-purpose
processor, the most powerful of digital machines now in operation, was developed
Just to solve such problems [2]).

Thus, there is now a discrepancy between the requirements of the problems to be
solved in control systems and the capabilities offered by computers in series
production.

Practical ways of raising computer efficiency are well known: these are raising
the speed of the elements, improving software and developing the logic structure
and architecture of the machines.

As for element speed, almost all possibilities have been exhausted (discounting
optical elements that may emerge in future generation systems). Experts believe
that we can expect only a one-two order of magnitude further increase in computer
efficiency by increasing the speed of the electronic elements.

Software improvement is aimed basically at speeding up preparation of the problems
(automation of programing, application of problem-oriented languages), but not the
solution of them. Actually, on the one hand, the modern operating system facili-
tates fuller use of computing system resources, and as a consequence of this, an
increase in its efficiency. 0n the other hand, complex software systems require
for their "own" purposes considerable consumption of storage and time, which
reduces the overall positive effect. Also, development of these systems entails
large inputs of human labor which leads to high cost of them (especially compared
to the rapidly falling cost of hardware).

The most important reserve for raising the efficiency of computers is, apparently,
the evolution of their architecture. This stems from the majority of problems to
be solved in control systems having a special nature; the initial information of
these problems is organized into special structures (arrays, tables, etc.). In
solving these problems on general-purpose machines having classical architecture
that are oriented to a standard set of basic instructions and operate sequentially
with scalar values, it is not possible to take advantage of the specific nature of
the data and types of processing.

Proposals on developing special-purpose software and hardware to solve complex prob-
lems with a special nature have been made relatively long ago [3, b].

86
FOR orncm. use ONLY
The question of expanding the internal machine language by raising the hardware
level of interpretation and matching computer instructions with high-level language
statements was considered in detail in [5].

Applying the terminology introduced in [6], one may say that machines with classi-
cal architecture have an "elementary education"--within the limits of arithmetic in
the early grades. Machines will operate considerably more efficiently if their
"education" level is raised-~if they are taught hardware execution of the more com-
plex and special functions from among those now executed by software (for example,
calculation by formulas, implementation of cycles, retrieval of information,
editing of data, execution of some functions of operating systems).

improving machine architecture and including special-purpose devices oriented to
execution of various complex functions (in particular, parallel processes) in the
makeup of the machines entails substantial hardware outlays. Until recently, this
was an obstacle to practical use of this important reserve for increasing efficiency.
However. the rapid development of integrated circuit technology is creating

practical prerequisites for the design and manufacture of machines with a new
architecture.

It is well known that the degree of LSI doubles every one to two years while cir-
cult cost goes down annually by abOut 30 percent. This makes it possible to produce
very complex hardware with very small dimensions at low cost. Thus, in 1978,

21103 Inc. began marketing a 16-bit single-chip microprocessor, the 28000, with
about 17,500 transistors on a chip the size of 6 x 6.5 mm [7]. Other firms produce
similar microprocessors also. By the mid eighties, forecasters expect development
of a 32-bit computer with a degree of integration of 100,000 tranristors per chip
is]. Even greater densities are being achieved in storage devices. A number of
firms are already producing random-access memory of 64K bits on a single chip, and
by the mid eighties. lH—bit units are expected [9].

Microprocessor LSI circuits will apparently become the main element base for compu-
ters in the next few years.

It is necessary to note that in an ideological, structural sense, all microproces—
sor sets (microcomputers) now being produced remain rachines with classical archi-
tecture--serial operation. The majority of them are relatively simple devices,
approaching in the best case in characteristics third-generation minicomputers.

In the process, the very conservative structural solutions used in the machines
made with the new elements do not permit taking advantage of the great possibilities
contained in the new technology.

Evidently, favorable conditions have arisen for a serious reexamination of computer
architecture. The possibilities of raising the "education" level of the machines
by raising the hardware level, specialization of individual devices and application
of high-volume, group and piraliel processing have become concrete.

Compared to the other ways of improving computers, development of architecture is
especially important since it affords new possibilities for construction of algo-
rithms and stimulates development of better mathematical approaches to solving

8?
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

problems. The emergence of the first parallel processors has led to a considerable
number of efforts in which computational methods and algorithms are being revised
to fit the capabilities of the new machines [10]. The importance and promise of
such efforts are noted in [10]. Experts believe that coordinated. interrelated
development of computational methods and structures of computers can lead to a
three-four order of magnitude increase in efficiency of solving many problems, in-
cluding the major problems to be solved in control systems.

What place in the development of computer architecture do the parallel processors
discussed in this book hold? To answer this question, we have to make some sort of
classification of digital systems. H. Flynn [11] singles out four types of systems
in his classification that has received wide dissemination:

1. Hith one stream of instructions and one stream of data (OKOD); classical single-
processor machines (von Neumann architecture).

2. With one stream of instructions and many streams of data (OKHD). The same se-
quence of instructions is executed simulataneously on many sets of arguments.

These systems are best adapted for execution of component-by-component vector oper-
ations. lhis type includes the majority of the so-called "matrix" and "vector"
processors (array processors).

3. With many streams of instructions and one stream of data (HKOD). The single
stream of data is moved along a "conveyor." at each position of which is executed
one instruction (operation) from the specified sequence. The stream of results is
removed from the output of the "conveyor." HKOD systems have been termed mainline
nr conveyor systems.

4. with many streams of instructions and many streams of data (HKHD). In this sys-
tem, several programs are executed simulataneously with independent data (although
exchange of information between inidvidual elements of the system is also possible).
The HKHD type includes multiprogram multiprocessor systems, computer networks and
some array proeessors.

Of these four types of systems. the OKOD are sequential types of machines; the
others employ various forms of parallelism.

In accordance with this classification, the parallel processors given further con-
sideration here are of the OKHD type. Machines of this type. however. can be

built differently. Thus, for example, a homogeneous computer system (network) con-
sisting of a number of general-purpose computers executing the same program may
also fall within the OKHD type. we are interested in a particular type of parallel
processor--proces-ors with a homogeneous internal structure (microstructure). Each
of these processors is based on some special-purpose homogeneous processor-a two-
dimensional homogeneous structure oriented to implementation of a particular
special function and an information processing algorithm. From the viewpoint of
the microstructure, a special-purpose homogeneous processor is a variety of a homo-
geneous computer environment [12]. As a rule. it is a two-dimensional combination
iterative array [131 matched with two-dimensional storage.

In a functional sense. a special-purpose homogeneous processor is a problem-
oriented digital device (automaton). After the source information (arguments) is
input into the processor storage elements and the boundary constants are fed to its
external inputs. results are generated after some time (depending on the duration
of the transient processes) at specific external outputs.

88
Let us call the operation-that the special-purpose homogeneous processor executes
in similar fashion (in one cycle) a basic operation. and the set of control signals
that implement this basic operation a micro instruction. It will subsequently be
shown that the same special-purpose processor may execute several basic operations
(micro instructions). From these micro instructions, micro programs are compiled
to solve various problems more complex than those embedded in the processor struc-
ture as its basic operations.

Since each basic operation is an operation on an entire array of data, the micro
programs of special-purpose homogeneous processors in their speed are considerably
more efficient than standard subroutines by which data is similarly processed in
OKOD type machines.

Thus. a special-purpose homogeneous processor consists of an operating unit (the
two-dimensional homogeneous structure proper) and a microprogram control unit.
When operated within a control system. it can be considered a special-purpose
peripheral. in the process of executing some complex program, the central machine
in the system (the general-purpose computer) sends to the special-purpose homo-
geneous processor specific group statements and corresponding arrays-arguments.
After receiving the task, the special-purpose processor executes it autonomously
and outputs the results.

Given in {14] is a detailed classification of parallel processors, according to
which devices similar to special-purpose homogeneous processors (in particular, the
so-cailed Kautz arrays) are classed as associative processors with a high degree of
parallelism.

It is shown in chapter a that there is another link between special-purpose homo-
geneous and associative processors (associative storage units), and with that it is
suggested that an associative processoy be considered a special case of a special-
purpose homogeneous type.

In addition to associative, we shall also discuss other variants of parallel pro-
ccssors-vertical, orthogonal and dynamic, and the links between them and the
corresponding special-purpose homogeneous processors will be shown.

Chapter 9. Possible Applications of Parallel Processors in Control Systems
31. Autonomous Special-Purpose Processors

From the preceding chapters, it is evident that special-purpose homogeneous proces—
sore and the other parallel processors can efficiently solve the various problems
that are typical for control systems.

Special-purpose processors are now used as autonomous special-purpose computing and
control units, as special-purpose attachments operating in a complex with a standard
(general-purpose) computer and as funcrional modules within multiprocessor data
processing systems.

Lrl uc discuss in more detail some features of these applications of special—
pnroose proressors.

39-
FOR OFFICIAL USE ONLY
FOR OFVICIAL USE ONLY

As autonomous units, special-purpose processes are widely applied in on-board and
ground special-purpose systems, in control machines for some processes and in sys-
tems that control operations. Usually of decis've importance in this case are the
small dimensions and weight of the processor as well as the speed of decision-making.

In these cases, special-purpose homogeneous processors must be used in the mode of
executing their own basic operations.

An example is the application of the processor with the basic operation PNB
imaximum search] for recognition of critical situations in controlled objects. Let
us assume that the values of some parameter are continuously coming into the
storage elements of an max-processor from a number of controlled objects.

Signals at the right boundary of the proceseor will always indicate that object at
which the regulated parameter reaches maximum value.

Instead of anQ-ax-processur, a V “in-processor, adjusted to execute the maximum

search operation. can also be used for this purpose. Further, if the maximum per-
tilted value of the regulated parameter is sent to the register of the boundary
attributes of the 1f min-processor, then using the basic operation PVB [search for

all greater] (or PVH [search for all lowerl), the objects whose parameters are out-
side the tolerance can be dynamically identified.

C
A similar probléh—odynamic identification of an object with the maximal parameter
is solved in the unit for allocation of priority in a multichannel data processing
system.

In the implementation of walking robots [71], the coordinates of the robot's legs
must continuously be compared to the coordinates of obstacles in the process of con-
structing the path of its movement to avoid collision with the obstacles. This
problem can be solved using a \f -processor the following way. For each leg, let
the differences between its current coordinate and the corresponding coordinates of
all obstacles be calculated continuously (let us note that this calculation is a
component-by-component operation between a scalar and a vector). The differences
obtained go into the rows of the \f ~processor, and the minimal permitted difference
is recorded in its register of boundary attributes. In doing so, it is evident

that a PVM isearch for all lower] operation will dynamically select the row corres-
ponding to a dangerous situation--impermissible approaching of a leg to an obstacle,
and identify this obstacle. High-volume, parallel processing makes its possible to
control the path of robot movement with a large number of legs and obstacles in

real time.

Another example of an autonomous special-purpose homogeneous processor:

9 -processor that solves the problem of sorting (grading) items of mass production.
It the boundary values of the permitted zones are recorded in the rows of a

9 -processor and the values of the measured parameter of the items are sent to

the buses as, the signals generated at the right boundary can be used to control

the receiving mechanism of an automatic sorter.

90
FOR OFFICIAL USE ONLY
32. Special-Purpose Attachments

These attachments substantially increase efficiency if the special problems to
which they are oriented make up a considerable portion of the load on the computer
complex. Many examples of successful use of special-purpose attachments both for
solving complex computational problems and for information-logic processing of large
arrays are well known.

The IBM 2938 special—purpose processor is used in a complex with the 360 (370)
machines. This processor is oriented to executing a number of high-volume opera-
tions: component-by-component addition and multiplication of vectors, scalar pro-
duct of vectors, reductive addition and multiplication and others. Based on these
operations, efficient micro programs are built to solve differential equations,
problems of linear algebra, correlation and spectral analysis, etc.

The category of special-purpose attachments of a computing orientation should in-
clude the vertical processor of the OMEN [Orthogonal Mini Embedmeht] system (attach-
ment for the PDP-ll machine) and the array processor (quadrant) of the ILLlAc-IV
system (attachment for the 3-6500 machine).

Several examples of the use of special-purpose processors oriented to information
logic problems were given in chapter 7.

The application of a general-purpose computer in a complex with a special-purpose
sorting processor for ordering of large files was discussed in detail in [72, 73].

The special-purpose sorting processor consists of the following units: control unit,
storage unit for attributes (associative type), storage unit for addresses and the
micro program control unit. The processor is considered an active peripheral con-
nected to the selector channel of a general-purpose computer. Access to it is
organized as to an external device with a suitable number. The controlling program
in the general-purpose computer prepares in main storage the file to be processed as
well as the following information needed for operation of the special-purpose proces-
sor: Al -- beginning address of file M in main storage; a1 -- beginning address

of attribute of first record in file H; l-record length; r- attribute length; n -
number of records in file H; E - special-purpose processor operation code.

when the special-purpose processor is accessed, this information is recorded in the
control unit. Then independent operation of the processor begins and it consists of
two stages: loading and processing proper. In the loading stage, the control unit
sequentially for each 5 file record calculates its beginning address A1 and the

beginning address of its attribute a1. The attribute is called from computer main
storage and entered into the next row of attribute storage, and the address A, into

the corresponding row of address storage. After attribute storage (and address
storage) is filled, the processing stage begins. At each step of this stage, the
specific row corresponding to the given operation code f is selected in attribute
storage (for example, the row with the minimal attribute if ascending order is
executed). The beginning address of the record with the selected attribute is sent
from address storage to the next cell of computer main storage. Thus, in the

91
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

process of the processing, there is formed in main storage a :leu of beginning
addresses of f‘lc N records ordered by the values of their attributes. Based on
this table, the controlling program in the general-purpose computer copies the
records of file M in the needed order.

As indicated in {74], by using the special-purpose attachment, the efficiency of

the system in solving various information retrieval problems is increased by one

to two orders of magnitude. Similar assessments of efficiency were obtained as a
result of modeling of a data baSe processor [57].

The simplest associative memory was used as attribute storage in the attachments
described in [72, 73]. [f a special-purpose homogeneous processor with a higher
hardware level and greater functional capab12;.ies (the 1f —processor, for example)
is used, then obviously greater efficiency can be obtained and the range of
problems solved expanded.

33. Functional Modules

The decreJSe in cost of LSI circuits and the increase in level of integration makes
it possible to raise the question of more extensive use of special-purpose proces-
sors, paticulariy of including them as functional-oricnted nodules with various
data processing systems.

It is believed that in this case each functional module performs some procedure
assigned to it, thereby implementing some subroutine by hardware. If an anticipa-
tory review of the overall program is made and data directed for processing to the
appropriate functional modules, then the central processor of the system is
released from executing a number of subroutines and, what is especially important,
from inefficient sequential execution of cycles in implementing high-volume opera-
tions. In this system. hardware supports the software.

A natural question arise: how many different functional modules is it necessary
to have in a system?

it is well known that a special-purpose processor executes most efficiently that
operation to which it is orientrd by hardware. There is a contradiction between
the attempt to perform each high-volume operation in a functional module designed
especially for it and the necessity of a reasonable limitation on the nomenclature
of nmdules. This contradiction can probably be resolved if the following circum-
stances are considered.

First, each special—purpose homogeneous processor, as a rule, implements not one,
but several basic operations; second, in this case, the specific content of a
particular operation does not play a role, but only the nature of the computing
process necessary for implementation of it. By type of computing process (and
consequently. also by requirements for hardware of a functional module), several
different operations may coincide. Thus, in a certain sense, all component-by-
component arithmetic operations on vectors are similar. Several elementary func-
tions (for example, sin x, tg x and others) can be implemented in one device, that.
for example, is oriented to computation of polynomials with different coefficients.

92
FOR OFFICIAL USE ONLY
To estimate the number of functional modules that afford satisfactory system
efficiency, high-volume statements or procedures can be classified in some way.

To this end, the composite and mixed functions of the APL language was taken as a
list of high-volume statements Mb, 75]. This selection is justified because, for
example, all high-volume statements in the PL/l language (built-in functions, ex-
pressions with arrays) are included in the list of AH. statements. The same may be
said of many procedures, used practically in programs, but not having corresponding
Statements in high-level languages.

The analysis of high—volume statements in APL in (75] showed that by nature of pro-
cessing, they can be grouped into the following five classes.

1. Component-by Component Computational.

This class includes mainly high-volume statements in which the arguments are one or
two (or more in rare cases) numeric vectors, the result is also a numeric vector
and the processing consists of executing a more or less complex transformation of
a computational nature. This transformation is applied independently to each com-
ponent (or set of similar components) of vectors-arguments and may in principle be
performed simultaneously on all sets.

Best suited for execution of statements of the first class are special-purpose pro-
cessors of the associative type (for example, the 7! —processor).

2 . Reductive Computational .

This class includes high—volume statements in which the argument is a numeric vec-
tor, the result is a scalar and the processing consists of sequential application
of some computational operation to the components of the vector—argument. meples
of these operations are reductive addition of an array and reductive multiplication.
High efficiency in executing reductive computational operations is achieved in
conveyor (mainline) parallel processors {76].

3 . Component-by-Component Logical .

This class includes mainly high-volume statements in which the arguments are two
numeric vectors. the result is a logical vector and the processing consists in
executing some logic operation (for example, comparison) an acne pair of similar
components of vectors-arguments. Processing may be performed simultaneously on
all pairs of components.

The. ’1 -processor is best suited of the processors described above for executiOn of.
cumponent-by-component logic operations.

lo . Reduc t ive Logical .

This class includes high—volume statements in which the argument is an array of bi-

nary numbers (or bit strings); the “sun 15 a subset of the elements of the array-
nrgument (in the particular case, a number or row) associated with the initial

array by a specific relationship corresponding to the given statauent. Processing
consists in executing on an argument some global operation that can be called a
"scan" of the array.

5’3
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Examples are the maximum search and the nearest neighbor search.

Operations of this class are performed most efficiently in the appropriate
special-purpose homogeneous processors, The \f ~processor can be used as the
deviCe that performs a sufficiently broad set of reductive logic operations.

5. Data Structure Transformations.

The arguments and results are arrays of binary numbers (or bit strings) that have
in the general case different dimensions and ranks. Processing consists in chang-
ing the structure of the array-argument or sequence of its components.

Operations of this class are efficiently perih.med by special-purpose devices for
transforming data structures. In particular, a number of important operations of
this class can be implemented by using the 7L -processor.

of course, the above classification is conventional. 0n the one hand, the high-
volume statements could be combined into larger classes, making use of the fact
that, for example, in an associative processor in principle, not only component-by-
component, but also reductive operations are executable (although with less
efficiency). 0n the other hand, perhaps it is advisable to separate out some of
the statements included in one class (especially in the broad first class) and find
for them a more efficient, narrowly specialized hardware implementation.

Nevertheless, it may be assumed that the number of functional modules sufficient
for a considerable increase in efficiency of a system for high-volume data
processing is not large: four to six.

That set of special-purpose processors in the aggregate can cover a broad assort-
ment of high-volume statements, while achieving sufficient universality of hardware
support. Required for efficient system operation, of course, is a good organiza-
tion of distribution of tasks, loading of arrays-arguments and exchange of
intermediate results.

34. Possibilities of Practical Implementation of Special-Purpose Homogeneous
Processors

There are new concrete possibilities for the transition to practical manufacture
and use of special-purpose homogeneous processors.

The main prerequisite for this is the possibility of constructing large, inexpensive
circuits.

This circumstance, associated with progress in the technology of manufacturing
integrated microcircuits, has led, as is well known, to the rapid development and
distribution of microprocessors [77]. Series produced microprocessors make it pos-
sible to implement microcomputers, the architecture of which differs little from
the traditional. Such machines, just as other general-purpose computers, possess
limited "capabilities."

9h
0n the other hand, as the degree of integration increases, the difficulties grow
in designing and testing the irregular circuits of traditional architecture, as
well as in connecting the individual modules with a limited number of leads.

Ore way to surmount these difficulties is to develop special-purpose, funtional-
oriented microprocessor LSI circuits which especially possess a regular structure.
Such devices include the now mastered programmable logic arrays (PLM), special-
purpose microprocessors for multiplication, for executing fast Fourier transforms,
etc. Some experts believe the main application of very large integrated micro-
circuits will be special-purpose functional devices [9].

Two-dimensional homogeneous logic circuits are a convenient object for implementa-
tion with LSI circuits. Therefore it can be assumed that based on the structures
of special-purpose homogeneous processors such as described in this book, it is
expedient to develop some special-purpose LSI circuits that supplement the
standard series of microprocessors and are compatible with them.

An important factor determining the selection of a specific structure for practical
implementation of an LSI circuit is the flexibility of the circuit and the possi-
bility of sufficiently broad application of a type module. From this viewpoint,
special-purpose homogeneous processors have definite advantages.

With a rational design, a special-purpose homogeneous processor may execute not
only that operation for which its logic network is properly oriented, but also a
number of other operations. Let us note that the 1f min-processor executes with

identical efficiency the basic operations PVM, PNB, PVB, Pan and PS isearch for all
lower, maximum search, search for all greater, search for nearest neighbor lower
and coincidence search]; the Ft-processor performs the basic operations of
compression, expansion and others.

There are various ways to expand the functional capabilities of special—purpose
homogeneous processors:

combining in one structure the functions of several different processors;

using a sequence of elementary (basic) operations of the processor to execute com-
plex procedures. This is how, for example, the sorting algorithm in the
\f -processor or the asaociative computations in the 1? ~processor are implemented;

using some storage elements and (or) external leads for adjustment of the structure.
The adjustment of Q.-matrices for execution of the different functions to
transform data structures can serve as an example.

To illustrate the flexibility of special-purpose homogeneous processors, let us
list some possibilities of a circuit with the simplest cells—-the a,-mstrix.

By construction, the ¢L Fax-processor is designed to perform the basic operation of

maximum search. It is well known that by microprogramming in the db -processor,
various information retrieval algorithms can be implemented. By adjustment of the
cells, the switching function can be implemented.

.—
‘u.

7 .
FOR OFFICIAL USE ONLY
FUR OFFICIAL USE ONLY

The method of modeling of associative memory in an (L -structure is suggested in
(78]. In principle, this makes it possible to organize various high-volume compu-
tations by the method of sequential transformation of states.

The possibility of implementing random finite automate in an a. -structure is
shown in [23].

A cell of associative memory built on the base of an (2 -structure has four steady
states, and thanks to this the (1 -structure can efficiently be used as functional
memory. P. Gardner, in [79], discusses tabular methods of computation of functions
in homogeneous structures, and the presence of redundant states in associative
memory cells is used for minimization. As shown in [80], the (1 -structure makes
it possible to apply all the minimization methods suggested by Gardner and in addi-
tion, achieve a number of additional advent—gas.

An essential factor influencing the realization of some structure with LSI cir-
cuits is the limitation on the number of external connections. This requires
serious Study of the design of special-purpose homogeneous processors with regard
to specific Ieatures of the technology applied. In doing so, it is necessary to
make use of all known means to reduce the lead/element ratio (incorporation within
the module of circuits for control, encoding, decoding, multiplex mode of
exchange, ctc.).

Hith some types of special-purpose homogeneous processors, the problem is simplified
because a relatively small set of standard vectors is sufficient for control.

These vectors can be generated by special circuits included within the design
modules and controlled from without by feeding economical codes (“numbers") of the
vectors needed.

Solving the problem of leads is substantially facilitated in going from static

homogeneOus structures to dynamic (chapter 7). This makes it possible to consider
that dynamic parallel processors are now closest to practical use.

BIBLIOGRAPHY

l. Kantorovich, L. V., “Paths of Development of Computer Facilities for Solving
Large-Scale Problems of Optimal Planning and Control," in the book
"Optimizatsiya (sbornik trudov)" [Optimization (Collection of Horks)],
Novosibirsk, Institute of Mathematics, Siberian Branch of the USSR Academy of
Sciences, 1972, issue 6(23), pp 5-7.

2. "Multiprocessor Systems and Parallel Computing,
lated from English, Moscow, Mir, 1976, 384 pages.

3. Kantorovich, L. V., "A Mathematical Notation Suitable When Calculations Are
Made on a Machine," DOKLADY AN SSSR, 1957, Vol 113, No 4, pp 738-741.

4. Kantorovich, L. V., "Prospects of Efforts to Automate Programming Based on a
Large-Block System," TRUDY MAT. IN-TA IMENI v. A. srrxiova, 1968, Vol 96,
pp 5-15.

" edited by F. G. Enslow, trans-

96
FOR OFFICIAL use ONLY
5.

6.

10.

11.

12.

13.

14.

15.

16.

17.

18.

19.

20.

21.

clushkov, V. M.; Barabanov, A. A.; Kalinichenko, L. A. et a1..
"Vychialitel'nyye machiny s rnzvitymi sistemami interpretatsii“ [Computers
with Developed Systems of Interpretation], Kiev, Naukova dunks, 1970, 260 pages.

Zadykhaylo, I. B.; Kamynin, S. S. and Lyubimskiy, E. 2., "Questions of Design
of Computers from Blocks of Enhanced Qualification," in the book "Sistemnoye

i teoreticheskoye programmirovaniye (sbornik trudov)" [Systems and Theoretical
Programming (Collection of Wbrka)l, Novosibirsk, Computer Center, Siberian
Branch, USSR Academy of Sciences, 1972, pp 126-135.

Sims, N. "16-B1t Instrument That Implements Hieroproceasor and Minicomputer
Functions," ELEKTRONIKA, Russian translation, Vol 51, No 26, 1978. pp 26-34.

Turuta, Ye. N.. "Hultimicroprocessor Systems," ZARUBBZHNAYA BADIOELBKTRONIKA,
No 3, 1979. PP 3-27.

Keypis, R. P., "Problems of Design and Production of Very Large-Scale Integrat-
ed Circuits," ELEKIRONIKA, Russian translation, Vol 51, Bo 24, 1978, pp 29-51.

Faddeyevn, V. N. and Paddeyev, D. K., “Parallel Computations in Linear
Algebra," KIBERNBTIKA, No 6, 1977. pp 28-40.

Flynn, M. 6., "High-Speed Computing Systems," TRANS. 1328, Russian translation,
Vol 54, No 12. 1966. pp 311-320.

Yevreinov, E. V., "Hicrostructure of Elementary Machines of Computer System,"
in the book ”Vychislitel'nyye sistemy (sbornik trudov)" [Computer Systems (Col-
lection of Works)], Novosibirsk, Institute of Mathematics, Siberian Branch,
USSR Academy of Sciences, issue 4. 1962, pp 5-28.

Bennie, F. C., "Iterative Arrays of Logical Circuits," New York-London, HIT
Press-Wiley, 1961, 241 pages.

Thurber, K. J. and Raid, L.D., "Associative and Parallel Processors," ACM COH-
PUTING SURVEYS, V01 7, No 4, 1975, pp 215-255.

Rennie, F. C.. “Finite-State Models for Logical Machines," New York-London-
Sydney, Wiley, 1968, 456 pages.

Varshavskiy, V. 1.; Marakhovskiy, V. B. and Peschanskiy, V. A. et a1.,
"Odnorodnyye struktury/ (Analiz. Sintez. Povedeniye)/" [Homogeneous Structures:
Analysis, Synthesis, Behavior], Moscow, Energiya, 1973, 152 pages.

hajithia, J. C. and Kitai, R., "An Iterative Array for Hultiplication of Signed
Binary Numbers," 1353 TRANS., Vol C-20, No 2, 1971, pp 214-216.

Toma, C. 1., "Cellular Logic Array for High-Speed Signed Binary Multiplication,"
IBEE TRANS., Vol C-24, No 9, 1975. PP 932-935.

Guild, H. H., "Some Cellular Logic Arrays for Non-restoring Binary Division,"
RADIO ELECTRON. ENC., Vol 39, No 6, 1970, pp 345—348.

Cappa, H. and Hamacher, V. C., "An Augmented Iterative Array for High~Speed
Binary Division," 1583 TRANS., Vol C-22, No 2, 1973, pp 172-175.

Shaumnn, A. :.,'?mtrix Excraction of Square Root," in the book "Vychialitel'-
nnyn tekhnika" [Computer Technology], Leningrad, Leningrad State University.
issue 6, 1977, pp 105-111.

97
FOR OFFICIAL USE ONLY
22.

23.

24.

25.

26.

27.

28.

29.

30.

31.

32.

33.

34.

35.

36.

37.

38.
39.

40.

FOR OFFICIAL USE ONLY

Pet. Ya. 1., Patent 424141 (USSR), "Ustroyatvo dlya sortirovki informatsii"
{Information Sorting Device], published in B. 1., No 14, 1974.

Fet., Ya. I., "Massovaya obrabotkn informatsii v spetuializirovannykh
odnorodnykh prorsessorakh" [HighoVolume Information Processing in Special-
Purpose Homogeneous Processors], Novosibirsk, Nauka, 1976, 200 pages.

Blokh, A. Sh. and Lades, V. 1., "Synthesis of Single-Cycle Circuits, Behavior
of Which Is Described by Linear Inequalities," IZV. AN BSSR. SER. FIZ-TEKHN.
NAUK. No 3, 1966, pp 93-99.

Berkovich, S. Ya. and Kochin, Yu. Ya., "Nearest Neighbor Search," AVTOMATIKA I
TELEHBKHANIKA, No 2, 1975, pp 176-178.

Pct, Ya. 1., Patent 634372 (USSR), "Element assotsiativnoy matritsy pamyati"
{Associative Memory Matrix Element], pu‘lished in B. 1., No 43, 1978.

Kratko, M. 1., "Regular and Stable Iterative Networks," in the book "Problemy
kihernetiki" [Problems of Cybernetics], Moscow, Nauka, issue 19, 1967, pp 95-106.

Clushkov, V. M.; Gladun, V. P.; Lozinskiy, L. S. et a1., "Obrabotka informa-
tsionnykh massivov v abtomatizirovannykh sistemakh upravleniya" [Information
File Processing in Automated Control Systems], Kiev, Naukova dumka, 1973, 183 p.

Papernov, A. A. and Podymov, V. Ya., "Metody uporyadocheniya informatsii v
tsifrovykh sistemakh" [Information Sorting Methods in Digital Systems],
Moscow, Nauks, 1973. 384 pages.

Flores, 1., "Analysis of Internal Computer Sorting," JOURNAL OF THE ACM, Vol 8,
No l, 196], pp 41-80.

Martin, H. A., "Sorting," ACM COMPUTING SIRVEYS, V01 3, No 4, 1971, pp 147-174.

Krayzmer, L. P.; Borodayev, D. A.; Gutenmakher, L. 1. et a1., "Assotsiativnyye
zapominayushchiye ustroystva" [Associative Memory], Leningrad, Energiys, 1967,
184 pages.

Kautz, H. 8., "Cellular Logic-in-Memory Arrays," IEEE TRANS., Vol C-18, No 8,
1969, pp 719-727.

Bratal'skiy, Ye. A. and Krupskiy, A. A., "File Sorting Method Using Associative
Device," VOPROSY RADIOBLEKTRONIKI. SER. EVT, issue 7, 1973, pp 90'93.

Butcher, K. 3., "Sorting Networks and Their Applications," in AFIPS CONFER.
PROC., 1968 55cc, Vol 32, pp 307-314.

Puller, R. R. and Estrin, 6., "Some Applications for Content-Addressable
Memories," in AFIPS CONFBR. PRDC., 1963 PJCC, Vol 24, pp 495-508.

Shooman, H., "Parallel Computing with Vertical Data," in AFIPS CONPBR. PROC.,
1960 BJCC, V01 18, pp 111-115.

Shooman, w., Patent 3277449 (USA), "Orthogonal Computer."

Shooman, H., "Orthogonal Processing," in "Parallel Processors, Systems, Tech-
nologies and Applications," Spartan Books, 1970, pp 297-308.

Crane, B. A. and Githens, J. A., "Bulk Processing in Distributed Logic Memory,"
IEEE IRANS., Vol BC-lﬁ, No 2, 1965, pp 186-196.

98
FOR OFFICIAL USE ONLY
41.

42.

43.

44.

45.

46.

47.

48.
49.

5°.

.51.

52.

53.

54.

SS.

56.

57.

58.

Lipovski, G. J., “The Architecture of a Large Associative Processor," in APlPS
CONFER. PROC., 1970 SJCC, Vol 36, pp 385-396.

Popova, c. N. and Prangishvili, I. V., "Associative Parallel Processor for
for Batch Data Processing," AVTOHAIIKA I TELEMEKHANIKA, No 1, 1972, pp 171-184.

Aleyeva, V. N. and Pet, Ya. I., "Associative Processor for Large-Block Proces-
sing of Information," in the boom "Optimizatsiya (sbornik trudov)" [Optimiza-
tion (Collection of Horks)], Novosibirsk. Institute of Mathematics, Siberian
Branch, USSR Academy of Sciences, issue 15(32), 1974, pp 154—177.

Prangishvili, I. V.; Popova, G. M.; Smorodinova, 0. 6.; and Chudin, A. A..
"Odnorodnyye mikroelektronnyye assotsistivnyye protseaaory" [Homogeneous Micro-
electronic Associative Processors], Moscow, Sovetskoye Radio, 1973, 280 pages.

Pet, Ya. 1., Patent 746728 (USSR), "Zapominayushchiy aodul' dlya matrichnykh
blokov panyati" iStorage Module for Matrix Blocks of Memory], published in
B. I., No 25, 1980.

Iverson, K. 8., "A Programming Language," New York-London, Wiley, 286 pages.

Pakin, 5., "APL/360 Reference Manual," Chicago, Science Research Associates,
1968, 160 pages.

Abrams, P. 8., "An APL Machine," Stanford Univ., AD-706741, 1970, 213 pages.

Thurber, K. J. and Hyrna, J. H., "System Design of a Cellular APL Machine,"
[BEE TRANS., Vol C—19, No S, 19i0, pp 291-303.

Harrison, H. J. and Harrison, H. H., "The Implementation of APL on Associative
Processor," in "Parallel Processing (Proc. of the Sagamore Comp. Confer.. 1974),"
Berlin-Heidelberg-New York, Springer, 1975, pp 75-96.

Higbie, L. C., "The OMEN Computers: Associative Array Processors," in COHPCON
72. 6-th Annual IEEE Comp. 50. Int. Confer., San Francisco, 1972, pp 287-290.

Slotnick, D. L., "Logic-per-Track Devices," in "Advances in Computers," New
York, Academic Press, Vol 10, 1970, pp 291-296.

Parker, J. L., "A Logic per Track Retrieval System," in "Proc. of IFIP Congress
71." Amsterdam, North—Holland Publ. (omp., 1971, Vol 1, pp 711—716.

Coulouris, c. P.; Evans, J. M. and Mitchell, R. w., "Towards Content-Addressing
in Data Bases," COMPUT. JOURN., Vol 15, No 2, 1972, pp 95-98.

Finnila, C. A. and Love, H. H., "The Associative Linear Array Processor," IBBE
TRANS., Vol C-26, No 2, 1977, pp 112-125.

Anderson, C. A. and Kain, R. Y., "A Content-Addressed Memory Designed for Data-
Base Applications," in "Proc. 1976 Int. Confer. on Parallel Processing," New
York, IEEE, 1976, pp 191-195.

Banerjee, J.; Hsiao, D. K. and Kannan, K., "DBC-—A Database Computer for Very
Large Databases," IEEE TRANS., Vol C—28, No 6, 1979, pp 414-429.

Su, S. Y. w.; Nguyen, L. H.; Emam, A and Lipovski, G. J., "The Architectural
Features and Implementation techniques of the Hulticell CASSH," IBBE TRANS.,
Vol C-28, No 6, 1979, pp 430-445.

99
FOR OFFICIAL USE ONLY
59.

61.

62.

63.

65.

66.
67.

68.

69.

70.

71.

72.

73.
74.

75.

FOR OFFICIAL USE ONLY

Thurber, K. J., "Interconnection Networks-A Survey and Assessment," in AFIPS
Nat. Comp. COnfet., Vol 43, 1974, pp 909-919.

Kalyayev, A. V., "Odnorodnyye kmmnutatsionnyye registrovyye struktury"
{Homogeneous Switch Register Structures], Moscow, Sovetskoye radio, 1978, 336 p.

Peng, T.-Y., "Data Manipulating Functions in Parallel Processors and Their
Implementations," IEEE TRANS., Vol C-23, No 3, 1976, pp 309-318.

Stone, H. 5., "Parallel Processing with the Perfect Shuffle," IBEB TRANS.,
Vol C-20, No 2, 1971, pp 153-161.

Benes, V. 8., "Optimal Rearrangeable Multistage Connecting Networks,“ BSTJ,
Vol 1.3, No a, 1961., pp 1641-1656.

Upferman, D. C. and Tsao-Hu, N. T., "On a Class of Rearrangesble Switching Met-
works," BSTJ, Vol 50, No S, 1971, pp 1579-1618.

Kautz, H. H.; Levitt, K. N. and Haksman, A., "Cellular Interconnection Arrays,"
IEEB TRANS., Vol C-17, No 5, 1968, pp 4&3—451.

Haksnan, 5., "A Permutation Network," JOURN. ACM, Vol 15, No l, 1968, pp 159-163.

Pcase, M. C., "An Adaptation of the Fast Fourier Transform to Parallel Proces-
sing,” JOURN. ACM, Vol 15, No 5, 1968, pp 252-264.

Lang, T. and Stone, H. S., "A Shuffle-Exchange Network with Simplified
Control," IEEE TRANS., Vol C-25, No 1, 1976, pp 55-65.

Aleyeva, V. N. and Pet, Ya. 1., Patent 590747 (USSR), "Dvumernaya odnorodnaya
struktura dlya analiza logicheskikh vektorov" [Two-Dimensional Homogeneous
Structure for Analysis of Logic Vectors], published in 8. 1., No 6, 1978, p 188.

Aleyeva, V. M., "Solving Problems of Linear Algebra with Associative Processor,"
in the book "Optimizatsiya (sbornik trudov)" [Optimization (Collection of
work5)], Novosibirsk, Institute of Mathematics, Siberian Branch, USSR Academy

of Sceinces, issue 18(35), 1976, pp 146-159.

Okhotsimskiy, D. Ye. and Platonov, A. K., "Algorithms to Control walking
Apparatus Capable of Surmounting Obstacles," IzV. AN SSSR. TEKHNICMBSKAYA
KIBERNETIKA, No 5, 1973, pp 3—10.

Barsamian, M., "Firmware Sort-Processor with LSI Components," in AFIPS Confer.
Proc., 1970 SJCC, Vol 36, pp 183-190.

Dc Piore, C. R., "Fast Sorting," DATAMATION, V01 16, No 8, 1970, pp 47-51.

De Fiore, C. R. and Berra, P. 8., "A Quantitative Analysis of the Utilization
of Associative Memories in Data Management," 1333 TRANS., Vol C-23, No 2, 1976,
pp 121-133.

Pet. Ya. 1., "Hardware Support of High-Volume Computations,” in the book
“Optimizataiya (sbornik trudov)" [Optimization (Collection of Horks)],
Novosibirsk, Institute of Mathematics, Siberian Branch, USSR Academy of
Sciences, issue 22(39), 1978, pp 115-126.

100
FOR OFFICIAL USE ONLY
76.

77.

78.

79.

80.

Pet. Ya. 1.. "Implementation of Group Operations on Rotor Conveyor Processor,"
in the book "Optimizatsiya (shornik trudov)" [Optimization (Collection of
works)J, Novosibirsk, Institute of Mathematics. Siberian Branch, USSR Academy
of Sciences, issue 6(23), 1972, pp 104-115.

Prangishvili, I. V.. "Mikroprotsessory i mikro-EVM" [Microprocessors and
Microcomputers], Moscov, Energiya, 1979. 232 pages.

Pet, Ya. 1., "Functional Possibilities of Simple Computing Media,"
AVTUHATIKA I VYCHISLITEL'NAYA TEKHNIKA, Riga, No 3. 1974, pp 48-54.

Gardner, P. L., "Functional Memory and Its Hicroprogramming Implications,”
IEEB TRANS., Vol C-20. No 7, 1971, pp 765-775.

Fet. Ya. 1., "Special-Purpose HomogeneOvs Structures as Programmable Logic
Arrays," AVIOHATIKA I VYCHISLITEL'NAYA TEKHNIKA, Riga, No 6, 1979, pp 67—72.

COPYRIGRT: Energoizdat, 1981

8545
cso:

1863/251 END

L()1
FOR OFFICIAL USE ONLY