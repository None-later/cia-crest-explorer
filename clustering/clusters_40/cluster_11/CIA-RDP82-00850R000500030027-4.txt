FOR OFFICIAL USE ONLY

JPRS L/10318
11 February 1982

Translation

UNIFIED COMPUTER SYSTEM HARDWARE AND SOFTWARE (YES-ll)

By

W. Przhiyalkovskiy and Yu.S. Lomov

FOREIGN BROADCAST INFORMATION SERVICE

FOR OFFICIAL USE ONLY
NOTE

JPRS publications contain information primarily from foreign
newspapers, periodicals and books, but also from news agency
transmissions and broadcasts. Materials from foreign-language
sources are translated; those from English-language sources
are transcribed or reprinted, with the original phrasing and
other characteristics retained.

Headlines, editorial reports, and material enclosed in brackets
[] are supplied by JPRS. Processing indicators such as [Text]
or [Excerpt] in the first line of each item, or following the
last line of a brief, indicate how the original information was
processed. where no processing indicator is given, the infor-
mation was summarized or extracted.

Unfamiliar names rendered phonetically or transliterated are
enclosed in parentheses. Words or names preceded by a ques-
tion mark and enclosed in parentheses were not clear in the
original but have been supplied as appropriate in context.
Other unattributed parenthetical notes within the body of an
item originate with the source. Times within items are as
given by source.

The contents of this publication in no way represent the poli-
cies, views or attitudes of the 0.5. Government.

COPYRIGHT LAWS AND REGULATIONS GOVERNING OWNERSHIP 0?
MATERIALS REPRODUCED HEREIN REQUIRE THAT DISSEHINATION
OF THIS PUBLICATION BE RESTRICTED FOR OFFICIAL USE ONLY.
FOR OFFICIAL USE ONLY

JPRS L/10318
11 February 1982

UNIFIED COMPUTER SYSTEM HARDWARE AND SOFTWARE (YES-II)

Moscow TEKHNICHESKIYB I PROGRAHMNYYE SRBDSTVA YBDINOY SISTEMY EVE
(YES EVM-Z) in Russian 1980 (signed to press 1 Aug 80) pp 1-232

[Book "Unified Computer System aardvare and Software (Yes-II)” by
Viktor Vladimirovich Przhiyalkovskiy and Yuriy Sergeyevich Lomov,
Izdatel'stvo ”Statistika', 20,000 copies, 232 pages]

Couteurs
Annotation 1
Foreword 1
"“Chapter 1. Unified Computer System Architectural Developnentimn__ 3
1.1. Unified System of Electronic Computers 3
1.2. Basic Directions in Development of Principles of Operation of the

Unified Conputer System 5
1.3. Basic Properties of the Architecture of the Unified Coeputer System 3
1.4. Structure of Yes BVM-Z Models 10
Chapter 2. Raising the Efficiency of Computations 15
2.1. Main Concepts of Processor Structure 16
2.2. System Control Facilities 26
2.3. Dynamic Translation of Addresses 33
2.6. Hicroprogram Control 36
2.5. Principles of Organization of Array Processor 60
Chapter 3. Organization of Data Storage 67
3.1. Development of Main Storage Units 68
3.2. Organization of Main Storage 50
3.3. Raising Reliability of Data Storage 58
Chapter 6. Development of Input/Output System 62
6.1. Organization and Logic Structure of Input/Output Channels 62
6.2. Development of Principles of InputiOutput Operations 65
6.3. Operation of Input/Output System 75
6.6. External Storage Units 78
6.5. Input/Output and Data Preparation Units 85
chapter 5. Means of Organization of Cauputer Systems 98
5.1. Multiprocessor Systems 37
5.2. Hultinachine Systems 03

5.3. Data Teleprocessing Hardware 1

- a - [I - ussn — N F000]

FOR OFFICIAL USE ONLY
Chapter 6. Development of Pacilities for Monitoring and Diagnosing
6.1. Means of Checking for Machine Errors

Processing of Machine Checking Signals
Microdiagnostic Procedures

DIAGNOSB Instruction
Software Facilities for Checking and Diagnosing

O¢OO
o o o
M§u~
o . o

6.6. Computer Maintenance

Chapter 7. Software
7.1. Development of Yes OS Operating System
7.2. General Structure and Functions of Yes 08
7.3. Virtual Storage Support
7.4. Virtual Storage Mode SVS
7.5. Basic Telecommunication Access Method [37AM]
7.6. General Teleconmmnication Access Method
7.7. Remote Job Entry [RJB] Mode
7.8. Time Sharing System [TSS]
7.9. Virtual Storage Access Method [VSAM]

7.10. Means of Building Multimachine Complexes
7.11. Dynamic Debugging Monitor

7.12. General-Purpose Trace Facility

7.13. Yes 08 Recovery Facilities

7.16. Yes nos-3 Operating System

7.15. Application Program Packages

Chapter 8. Functional Characteristics of Models of Yes BVM-Z
8.1. Yes-1015 Computer
8.2. Yes-1025 Computer
8.3. Yes-1035 Computer
8.6. Yes-1045 Computer
8.5. Yes-1055 Computer
8.6. Yes-1060 Computer
8.7. Yes-1065 Computer

Conclusion
Bibliography
nos‘orrunst.uss¢mvtv

[Text] Annotation

This book deals with the questions of development of the architecture, internal
structure and principles of operation of the family of software-compatible computers
in the Unified System (YcS EVH). The main problems of development of functional
properties, technical characteristics and software for the Unified System are
reflected.

This book is intended for specialists using Unified Computer System hardware and
software, for computer center workers, students in VUZ's and people interested in
the problems of development of computers.

Foreword

Equipping the national economy with computers is now a major factor determining the
rate of development of science, growth in industrial production and enhancement of
managerial efficiency. Much attention was paid in the decisions of the 24th and 25th
CPSU congresses to the development of computers and introduction of them in the
various spheres of the national economy.

A decisive role in the development of computers continues to be played by general-
purpose computers used to solve scientific and technical problems and to solve prob-
lems within information and logic systems and automated control systems at various
levels. The emergence at the end of the sixties of minicomputers and in recent years
even microcomputers has not only not reduced the field of application of general-
purpose computers, but rather, conversely, has expanded it through the emergence of
combined systems in which information undergoes initial processing on micro and mini-
campatera and is then sent for centralized processing and storage to a Central
computer.

In 1969, an intergovernmental agreement was concluded between the countries in the
socialist community and the Intergovernmental Commission on Cooperation in Computer

FC“!(IHHC1A1.IEIL(HULY
FOR OFFICIAL USE ONLY

Technology was formed. Because of this agreement, the rate of development, produc-
tion and introduction of modern computer hardware into the national economy of the
countries in the socialist community has increased considerably. Within a relative-
ly short period, the Unified System of Computers was developed in the community
countries. The system includes several computers with various throughputs that

have full program and information compatibility, an extensive set of ptripherals

and cot-on technological design principles of construction.

The results of cooperation on the program for the first phase of the Unified System
(Yes EVH-l) were presented at the international exhibition "Yes EVH-—73“ held in
Moscow. By that time, development had been completed on six computers with through-
put ranging from 5000 to 500,000 operations/second, about 100 types of peripherals
and four operating systems supporting efficient operation of the hardware.

In 1979. the second international exhibition, "Yes EVH and SH BVH-79," was held
successfully. Presented at it were the results of cooperation among the countries
in the socialist community on the program for the second phase of the Unified Sys-
tem (Yes EVE-2). Yes EVH-l was replaced by the new, more modern Yes svu-z system
that consists of seven computers with throughput ranging from 20,000 to 5 million
operations/second.

The Yes rvu—z, production of which began several years ago, is an essential evolu-
tion of the Yes EVH-l in many directions. The most essential features of the new
system are:

the increase in thrOughput in the Yes EVH-Z computers, achieved in the majority of
cases without increasing cost;

the increase in precision of computations (appearance of operations on operands
having quadruple length);

the introduction of special control operations to expand computer operating modes,
in particular to facilitate operation within multimachine and multiprocessor com-
plexes;

further improvement of the input/output system, appearance of new peripherals with
higher throughput, increase in channel throughput, and the capability of
simultaneous operation of several high-speed storage units;

the emergence of supplementary hardware to raise the efficiency of software system
operation in the modes of multiprogramming, time sharing, teleprocessing, multi-
machine and multiprocessor operation;

the introduction of hordware and software to support organization of the virtual
storage mode;

improvement of the monitoring system, introduction of facilities for correcting sin-
gle and detecting double errors. Introduction and development of facilities for
diagnosing malfunctions and recovery of system after failure;

further development of means of microprogram control, introduction of reloadable
storage of microprograms; and

development of the software system to support the new computer operating modes and
new hardware.

FOR OFFICIAL USE ONLY
FOILOFFKJAI.USE(NULY

It should be noted that the series of Yes svu-z machines provides for software .
compatibility between the models of this series and with the Yes EVH-l machines. In
addition. the Yes EVH-Z system, just as thr Yes EVM-l, maintains fell compatibility
at the user program level with widespread foreign computer systems, i.e., Joins in
fact the world standard, formed in the last 10-15 years, of external structure of
general-purpose computers.

This book covers a broad range of questions of architecture, internal structure and
organization of computer systems, as well as questions of software for the Yes EVE-2
machines. It is the first publication to elucidate comprehensively the principles
of operation of the new system. '

Academician V. S. Semenikhin.

Chapter 1. Unified System Architectural Development
1.1. Unified System of Electronic Computers

The family of program-compatible third-generation computers, called the Unified
System of Electronic Computers ’Yes BVN), includes a series of models with a speed
ranging from several thousands to several millions of instructions per second. All
models in the Unified System are united by common principles of operation, uniformi-
ty of control procedures and a uniform method of organisation of links between the
individual system modules. Thanks to the large nomenclature of peripherals and the
standard method for connecting them. computers systems with various configurations
can be set up. The software and hardware ensure efficient operation of the Unified
System of Computers in various modes for solving a wide range of scientific, techni-
cal, economic, managerial and other problems and offer the capability of using these
computers both in computer centers of varying function and in various types of auto—
mated systems for data management and processing.

Two phases of work on the Unified System program have now been completed: the first
phase, Yes EVH-l, and the second, Yes EVN-Z.

FIHRIDIIICIAI.IIBIZ(H'LY
FOR OFFICIAL USE ONLY

The main goal in developing the first phase was to develop a family of third-
generation computers meeting the modern requirements imposed on the architecture,
software, design and technology. In addition, as a result of the rapidly develop-
ing field of computer applications, the need arose for computer hardware with high
operating qualities and intended for mass production.

This goal could not have been met without the solution to the problems of further
evolution of the theory of organization of structures and computational processes
of computers. and the development of related fields of science and technology that
support creation of the new element base with integrated circuits. new materials
and equipment. In the process. methods of automating the design and production of
computers were extensively developed and implemented.

The structure and principles of operation of phase-one computers are defined by the
following basic concepts:

computer software compatibility;

standard set of instructions, forms and formats for data representation;

standard set of operating units;

standard procedures for the input/output control system [IOCS];

extensive nomenclature of peripherals connectable through a standard input/output
interface; and

unity of design principles that support a high degree of unification.

The Yes BVH-l includes several dozens of types of peripherals, four operating sys-
tems and seven computer models: Yes-1010 (VNR [Hungarian People's Republic]),
Yes-1020 (USSR), Yes-1021 (ChSSR [Czechoslovak Socialist Republic]). Yes-1030
(USSR), Yes-1032 (PNR [Polish People's Republic]), Yes-1040 (con) and the Yes-1050
(USSR).

In subsequent years, new models were developed: Yes-1012 (VNR), Yes-1022 (USSR),
Yes-1033 (USSR) and the Yes-1052 (USSR) which are modifications of the Yes-1010.
Yes-1020. Yes-1030 and the Yes-1050 computers developed earlier.

The main technical characteristics of the Yes EVE-l were widely published earlier.

Thus. ll models of the family of the Unified System have been developed and are in
operation within the Yes EVH-l.

In the YeS EVH-Z, which is a further evolution of the Yes EVE-l. all the merits of
the preceding system have been kept, and in addition, new functional capabilities
have been added. The latest achievements in the microelectronic component base
were made use of in developing it. The improved technical and economic character-
istics of the Yes EVH-Z, which put it on s qualitatively higher level of develop-
ment and meet the enhanced user requirements. were obtained as a result of:

raising the throughput of the central processing units and the overall efficiency
of the system while at the same time observing the requirements of economy and
adaptability to manufacture;

expanding hardware and software functional capabilities;

1;

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

developing the input/output system;

increasing the capacity of main storage and improving the organization of data
storage;

raising system reliability, developing efficient checking and diagnosing facilities;
further developing the software system;

providing the capability of setting up multiprocessor and multimachine computer
systems; and

developing a new complex of peripherals.
The Yes EVE-2 now includes a large nomenclature of hardware and software for the
Unified System which supports operation of seven models: Yes-1015 (VNR), Yes-1025

(ChSSR), Yes-1035 (USSR), Yes-1045 (USSR), Yes-1055 (GDR), Yes-1060 (USSR) and the
Yes-1065 (USSR).

1.2. Basic Directions in Development of Principles of Operation of the Unified
Computer System

Combining the efforts of a large number of teams of developers, including those
from the different countries, to implement the Unified Computer System is possible
given the common logic structure of the entire system that defines the set of
interrelated requirements and links between the hardware and software components,
i.e., with the common principles of system operation.

The Yes EVH-Z operating principles were developed thanks to including in the logic
structure:

an expanded instruction set;

expanded control facilities in the processor;

indirect addressing of data in the channels;

the block-multiplex mode of channel operation;

new facilities for multiprocessor operation;

facilities for raising precision of floating-point operations;

an expanded system of interrupts;

new facilities for time readout;

facilities for recording program events;

facilities to support monitor programs; and

facilities for raising the efficiency of checking and diagnosing.

Instruction System. In contrast to the Yes BVH-l (computing functions of which are
implemented by the universal instruction set), the Yes EVH-Z has a more developed
instruction set. The additional instructions are intended to provide for new func-
tions of the processor and channels, provide multiprocessor facilities and facili-
ties for time readout, and to expand the capabilities of scientific and technical

computer applications. The instruction set used to execute system control func-
tions has also been increased considerably.

5

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Control Modes in the Processor. There are two modes of operation of the processor
in the Yes EVE-2: basic control mode and extended control mode.

The basic control mode provides for functioning of the computer in accordance with
the Yes EVE-1 operating principles. The extended control mode is intended to make
use of the new Yes EVE-2 functions and facilities. To this end, control registers
that can be addressed by a program have been incorporated in the processor struc-

ture. Stored in the control registers are information on system status and infor-
mation needed when implementing Yes EVH-Z capabilities.

Dynamic Address Translation. Computer system efficiency is largely determined by
the method of organizing storage of data, addressing system adopted and structure
of distribution of information flows. In the Yes EVE-2, these questions have been
resolved by introducing the facilities of dynamic address translation and indirect
addressing of data, which with the corresponding support of the operating system

and in the aggregate with it allow making use of a lG-megabyte extent of virtual
storage.

The concept "virtual" has become widespread in recent years and literally means
"apparent." It is used in terms such as "virtual storage," "virtual machines." etc.
In this case it means that the complete illusion of using a several-fold greater
size of main storage is created for a programmer working with the physically limited
size of main storage, or the illusion is created that each user has been allocated
his own installation with all resources when several users are working simultaneous-
ly with one computer. This illusion is achieved through special organization of
control of the corresponding processes. This is the purely external aspect of the
virtual concept. The internal significance is that virtual organization allows
making more efficient use of system reources, for instance in the examples cited,
through reducing the limitations on the size of main storage or, respectively,
linitations on the joint use of the equipment.

The introduction of dynamic address translation facilities reduces the limitations
associated with the necessity of assigning fixed areas of real main storage for
programs. Dynamic address translation facilities allow placing programs or parts
of them in external storage units (i.e., outside main storage) with subsequent in-
troduction of them into the free space of main storage upon request under control
of the processor. These relocations, as well as relocations of information from
main storage to external are performed automatically by the system without program—
mer intervention. This allows making efficient use of computer resources, includ-
ing main storage rescurces, in the process of computations.

Thus, dynamic address translation facilities offer the user working storage, the
size of which exceeds the size of storage physically connected to the computer.

Indirect Addressing of Data. While dynamic address translation allows translation
of addresses of instructions and data formed in the processor, the mechanism of in-
direct addressing of data serves the same purpose during input/output [IO] opera-
tions in a channel. Indirect addressing facilities optimise execution of IO opera-
tions. allowing one channel command to control transmission of data located in non-
contiguous areas of real main storage.

6

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Dynamic address translation in the processor and indirect addressing of data in a
channel are used together to organize the virtual storage mode.

Block Multiplex Mode of Channel Operation. In the block multiplex mode, blocks of
data from various IO devices are multiplexed. and in the process, each data block is
transmitted in the burst mode. Implementation of block multiplexing raises consider-
ably the efficiency of channel operation through parallel operation of several high-
speed external I0 devices.

Facilities for Multiprocessor Operation. Multiprocessor operation presumes organi-
zation of access of two (multi in the general case) processors to a storage area
defined as common in a system configuration. There may also be storage areas belong-
ing to the individual processors in the system. In addition to programs and the
resident part of the operating system, the common extent of main storage holds infor-
mation on the status of the processor and operations necessary for control of it.
This information is stored in the starting area of storage with the addresses 0-4096,
which is called the permanently allocated (fixed) area.

Multiprocessor facilities are intended for operation of several processors with a
common extent of main storage. These facilities provide for partitioning of main
storage, address prefixing, interprocessor signaling and synchronization of
astronomical time clocks.

Facilities for Raising Precision of Operations with Floating Point. For floating-
point addition, subtraction and multiplication operations, facilities have been pro-
vided in the Yes EVM-Z that enable working with a mantissa consisting of 28 hexi-
decimal numbers. In addition, necessary operations are performed to round off the
result and convert numbers from the long to the short format and vice versa.

The introduction of these facilities stems from the fact that with increased computer
throughput, it has become possible to solve complex and laborious scientific and
technical problems with high precision. These problems, as a rule, are characterized
by a large number of computational iterations, as a result of which a considerable
increase in rounding errors could be expected with ordinary precision of computations.

The system of interrupts makes it possible to expeditiously react and change the
status of the computer under certain conditions that arise in the system or outside
it. These conditions include requirements on the part of control facilities and
external units, incorrect results of execution of operations, improper addressing
as well as results of operation of apparatus monitoring circuits.

The interrupt system has been enhanced by the introduction of program debugging
facilities, improvement of the apparatus for error detection and correction, and ex-
pansion of the functional properties of the processor and capabilities of multi-
processor organization.

Time Readout Facilities. In the YeS EVM-l, the sole hardware for time readout was
the interval timer. The increase in processor throughput required development of
new facilities whose resolution would be commensurate with the instruction processing
rate. In addition, software facilities for time readout using just the interval
timer are rather inconvenient, require large storage size and take up considerable
processor time for their operation.

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In addition to the interval timer, a time-of-day [TOD] clock and a CPU timer have
been incorporated in the Yes EVM-Z. They have been implemented in the form of
hardware-controlled 52-bit counters with a resolution of l microsecond. Their
values are set by the instructions SET CLOCK and SET CPU TIMER.

The CPU timer does not change when the processor is in the stopped state. Once
set. the TOD clock runs even when the CPU is in the wait or stopped state. The
clock measures elapsed time. It can be used to determine the date and time of day.

A CPU timer interruption occurs each time a negative quantity is in the timer. Tb
interrupt the CPU at a given time indicated by the TOD clock. there is a comparator
in the CPU in which a specified value is set by the instruction SET COMPARATOR.

New instructions have been introduced to store readouts from the clock, CPU timer
and comparator in storage: STORE CLOCK, STORE CPU TIMER and STORE CLOCK COMPARATOR.

Program Event Recording. Facilities for program event recording and providing mon-
itor programs give the user the capability of debugging new programs at the same
time other problems are being solved.

These facilities interrupt processor operation and write to a defined storage area
information needed by a user when the following events occur in a program:
successful completion of a transfer instruction;

change in contents of specified general-purpose registers;

instruction is fetched from specified area of main storage; or

change in contents of specified area in main storage.

Operation of the facilities fer program event recording reduces processor speed;

therefore, to maintain the rate of execution of programs not needed for these
facilities, masking of them has been provided for.

Provision of Monitor Programs. Facilities for support of monitor programs permit
organizing transfer of control to a program that effects specific control functions
(the monitor). This occurs when the instruction CALL MONITOR is encountered in a
program being executed and transfer of control is permitted (not masked).

Checking and Diagnostics. Capabilities for raising the efficiency of checking and
diagnostics in the Yes EVM-Z are provided by various software and hardware facili—
ties for detecting, localizing and correcting errors, as well as facilities to
restore the computing process when malfunctions occur.

1.3. Basic Properties of Unified Computer System Architecture

In making an overall evaluation of all the changes in the logic structure of the
Yes EVM-Z. it can be noted that they are aimed at evolving the main features of

the Unified System Architecture: efficiency, general-purposeness. compatibility
and reliability.

8
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Efficiency. The new models of the second phase of the Unified Computer System.
from an architectural point of view representing one computer, cover a broad range
of throughput that increases from the bottom to the top of the line. In addition,
the computational capacity of each model can be enhanced by uniting two processors
by means of multiprocessor facilities. As a rule, within the bounds of one system,
the throughput of each successive model is higher than a dual processor system.
built on the basis of the preceding model.

Yes Elm-2 models have better technical and economic characteristics than Yes syn-1
models. In particular, the throughput/cost ratio has been increased two to three-
fold; the absolute value of throughput for processors in the top models also has
been increased: from 0.7 (Yes—1052) to 5 million instructions/second (Yes-1065);
and size of main storage has been increased. Storage size ranges from 1 to 8 mega-
bytes as a function of model throughput; IO system throughput has been raised both
through the capability of connecting a larger number of channels and the increase
in their throughput to 3 megabytes/second.

In addition, along with the operating systems developed for phase-one models, soft-
ware is used in phase-two models that takes the new functions and capabilities into

account a

All this taken together gives a wide choice of hardware and software while ensuring
efficiency in solving specific user problems.

General-purposeness. General-purposeness means the capability of solving a wide
range of problems in different classes with approximately the same efficiency. In
second-phase models, this capability is supported primarily by the expansion of the
general-purpose instruction set, which consists of the standard set and instruc-
tions for economic and scientific applications.

The standard set includes instructions for fixed-point arithmetic, control, exchange,
I0, logic operations and storage protection instructions. The instruction set for
economic applications contains the standard instruction set plus instructions that
allow operation of facilities for processing decimal data with variable wordlength.
Instructions for scientific applications include floating-point operations in
addition to the standard set.

Versatility in using Unified System Computers is also achieved by the modular hard-
ware principle that allows connecting peripherals for various functions and develop-
ing a software system that includes modes for multiprogramming, time sharing,
interaction and teleprocessing.

Thus, the appropriate components can be selected to build a specific computer com-
plex most suited to a given application considering the requirements for through-
put, functional capabilities and set of peripherals.

Compatibility. Second-phase architecture ensures software compatibility both bee
tween second-phase models and with phase-one models. The different second—phase
models are compatible downwards ' and upwards. This provides for convenience in
maintenance, use of unified operating systems and application program packages
developed earlier, and simplicity in training and mastering the new models.

FOR OFFICIAL USE ONLY
FOR OFFICIAL USP. ONLY

However, the principle of compatibility does have limitations: programs must use
identical hardware and must not depend on the duration of execution of instructions
by a processor and on functions peculiar to a given model (model-dependent). In
addition, a program must not use areas assigned or that could be assigned for
special hardware functions.

Phase two is compatible with phase one from "bottom up." To execute programs on
phase-two models, that were written for phase-one models, not only the above cited
limitations have to be taken into account, but also those associated with the
features of the new system, which consist in:

proper use of the bits in the program status word that determine the codes for out-
put of results;

proper use of permanently allocated storage areas in the Yes BVH-Z; and

taking into account the new capabilities of the IO channel for pre-fetching of in-
formation and the new capabilities for retry ' of instructions and specifics
of the new instructions.

Reliability of the Yes EVH-Z models is ensured both by the technology of manufac-
ture and by the use of special hardware and software facilities (more flexible

system for processing machine errors, circuits for correction of main storage
errors, mechanism for retry -of instructions in the processor and channels, and

the system for microdiagnostic procedures).

In addition, the capabilities for preventing erroneous writes have been increased
in the Yes EVH-Z through dynamic address translation which permits isolating one
program from the other during joint use of the same resources.

1.4. Structure of Yes EVH-Z Models

The base structure of the Yes EVH-Z models (fig. 1.) is described by the presence
of the obligatory (standard) functional devices of the five levels: the central
processing unit (processor), main storage, channels, peripheral control units and
the peripheral equipment. The internal organization of each of these devices may
vary in the different models, but in doing so, the common principles of operation
that ensure compatibility and the unified methods of system control are maintained.

Peripherals are connected through control units to channels by a standard I0 inter-
face. Properly, this interface can be considered the sixth obligatory level of the
system. The channels have a link with the central processor since the latter
coordinates and controls the entire system as a whole, and a direct link to main
storage, thanks to which independent operation of the channels and the processor

is achieved. The system permits connection of different types of channels:
byte-multiplexer, selector and block-multiplexer.

The structure of the Yes EVH-Z permits the capability of connecting additional
(nonstandard) functional units (for example, array processor, channel-to-channel

adapter, logic repeater)and various units that support communication between two
processors at the level of external storage units or a common area of main storage.

10

FOR‘OFFKJAI.USE(NNLY
FOR OFFICIAL USE ONLY

The central processor is the nucleus of the system. Its functions include execu-
tion of arithmetic and logic operations, organization of main storage access,
fetching and decoding of instructions, initiation of operation of executive units
and 10 procedures, processing of interrupts and others. In accordance with these
functions, the processor includes a central control unit, an“ arithmetic and legit
unit and s storage control unit.

The internal organization of the processor structure (by which is meant the inter-
action of the functional assemblies and units for organization of the computation-
al process) may vary from model to model, but in all models the processor performs
the same logic functions, i.e. the result of execution of an instruction will be
identical irrespective of the model.

As a function of requirements for throughput and economy, the internal structure
permits parallel or serial processing of information, a different width of data
streams, varying number of levels of overlap = of instructions. and various
algorithms for execution of operations.

At the same time, unity of principles of operation is achieved by standard facili-
ties: program status word register, general registers, registers with floating-
point and control registers which form the internal storage for the processor.
Stored in these registers are control information, information on system status,
addresses and operands. In addition, adherence to the principles of operation is
achieved by unity of formats and forms of representation of instructions and data.

The program status word (SSP) [PSH], which is stored in a 66-bit register, is in-
tended for instruction sequence control. The PS" contains the address of the cur-
rent instruction snd information on the status of equipment needed by the program
being executed at the given time. The set of this information varies as a function
of the control mode.

Sixteen 32-bit general-purpose registers are used as index registers in operations
for addressing and as data and result registers for logic and fixed-point opera-
tions. ’

The general-purpose registers are addressed from 0 to 15 by using a four-bit code
placed directly in the instruction. For work with 64-bit numbers, adjacent regis-
ters may'be used in pairs--an even and an odd register.

There are four 64-bit floating-point registers intended for storing operands dur-
ing floating-point operations. The first two and last two registers may be com-
bined when the expanded data format (128-bit) is used.

Sixteen 32-bit control registers (RU) are used in the processor for performing the

new Yes EVH-Z functions. They are addressed by using a four-bit code in the in-
structions LOAD CONTROL end STORE CONTROL. it is possible to access a

group of control registers.

Operating principles are adhered to also by the unity of formats and forms of data
representation.

11

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

    
 
 

  

(10)

LE.-- -6. j _-.___
a e 8 a

Pig. 1. Yes EVH-Z Base Structure

Key:
1. Main Storage 9. Floating-point operations
2. Processor 10. 16 control registers
3. IO channels 11. 16 general-purpose registers
4. Storage control unit 12. 6 floating-point registers
5. Central control unit 13. byte-multiplexer channel
6. Arithmetic and Logic unit 16. selector channel
7. Fixed-point operations 15. block-multiplexer channel
8. Operations with variable-length l6. peripheral control unite

fields and decimal nu-bers 17. I0 interface

All instructions (fig. 2) have a length of two, four or six bytes and one of six

formats: RR, RX, Rs, SI, 8 or 88. The instruction format reflects the location
of the operand taking part in the operation.

In the RR instruction format, both operands are placed in the general registers or
the floating-point registers, depending on the type of operation. Hhen an RX for-
mat instruction is executed, one operand is selected from the general registers or
floating-point registers, and the second one from main storage. For this for-at,
the address of the second operand (memory address) is formed by using an index.

The RS instruction format differs from the RX only in that indexation of the ad-
dress of the second operand is not required for it. For the SI-fornat instruction,
the first operand is selected from main storage and the second directly from the
instruction. In executing 88 format instructions, both operands are selected from

main storage. For 5 format instructions. the first operand is specified in impli-
cit forn, and the second is placed in main storage.

12
FOR 0F11CJAI.USE()NLY
Execution of instructions in the proces-

sor begins with fetching of the instruc-

tion whose address is placed in the pro- (1)

gram status word register. Then this M mun
address is incremented by the number of 0 ‘
bytes in the instruction, forming the

(1)
address of the next instruction. H man u

The address by which the data is

a

(l)
accessed in main storage is contained in a: an n, n
the register indicated by the field B of o ' s 9

the instruction, or is formed from the

m... in... and ashes»... defined by .1 _n
»the fields 3, X and D of the instruction 0 s In
(index 1 or 2 defines the number of the

l‘
operand). ' “an
I

The base is placed in general-purpose
registers and is a 24-bit number, by the s: “II-IE nun
use of which main storage can be ad- a n
dressed. The base address is used for

addressing an area of a program or data
files and can also be used as an index.
The index is also placed in general- Fig. 2' Instruction Formats
purpose registers and is used only Key:

in Rx format instructions for l. KOP [operation code]
addressing an individual element in a

file by the use of a 24-bit number.

The displacement is a 12-bit number, specified directly in the instruction, that
addresses individual sections of a file with a size of 4096 bytes.

In forming the address, the base, index and displacement are added together as
positive binary numbers and overflow is ignored.

In 88 and S format instructions, length of operands in bytes is specified by
field L.

Development of the Yes BVH-Z processor structure is aimed at increasing the effi-
ciency of the computational process. In this plan, besides the new functions de-
termined by the principles of operation, the most important are the further de-
velopment and introduction of microprogram control, and the introduction of buffer
main storage that supports fetching of data at a rate corresponding to the
processor cycle of operation.

Main storage is intended for storing data files and must ensure fast access with
direct addressing to information for the processor and channels. The largest main
storage size is 16,277,216 bytes and is defined by a 24-bit address that always
points to the extreme left byte in fetching some block of information. In the
process, the length of the memory block addressed is determined by two methods:
explicitly and implicitly. In the first case, the address is accompanied by a

13

FOR OFFICIAL USE ONLY
s on Uta‘sysns. var. VI‘LI

length code that indicates the number of bytes addressed. In the second, the length
of the data field is defined by the instruction code. This is the case for fixed-
length information since it can equal only 1. 2, 4 or 8 bytes.

Tb properly define the start of blocks of fixed-length information, the specific
integral boundary rule has been established for placement of data in main storage.
In accordance with this rule, fixed-length data are placed in storage beginning at
the integral boundary for a given block of storage. The boundary for some block of
information is called integral if its address is a multiple of the number of bytes
in the block. Thus, the binary code of the address for reference to main storage
for a halfword, word or doubleword of information must have one, two or three low-
order bits, respectively, equal to zero. For the majority of unprivileged instruc-
tions in Yes EVE-2 processors, the restriction on placement of operands at the in-
tegral boundary has been removed. In certain cases, this makes it possible to re-
duce the size of memory taken up by data, however, in doing so, processor speed may
be considerably reduced, especially for high-throughput computers. Therefore,
placing operands at an arbitrary byte boundary is reconnended only in exceptional
cases.

The reduction in speed is associated with the fact that for fetching an operand lo-
cated sta‘nonintegral boundary, there may be required, first, two references to
main storage instead of one, and second, alignment of the operand prior to its pro-
cessing in the arithmetic unit. Placing an operand at a nonintegrel boundary for
write instructions also requires two accesses to storage.

Development of the principles of virtual storage which expand the capabilities of a
computer system led to the formation of concepts of logical, real and virtual ad-
dresses.

Logical addresses are those used by a program that are translated into real by the
address translation facilities.

The different levels of storage linked together by information transmission channels
form the aggregate of computer storage units called virtual storage. The highest
level of storage, main storage or part of it, is called real storage. Addresses
used to access real or virtual storage are called real or virtual, respectively.

Depending on size, main storage may be implemented both in the form of an individual
unit and integrated in the processor. In both cases, access is provided to the
processor and channels by priority, and channels have the highest priority.

The 10 channels organize and service the process of data exchange between peripher-
als and main storage, freeing the central processor from these functions. Dots is
exchanged with peripherals in two modes: burst and multiplexer.

In accordance with operating modes, two types of channels are used in the Yes EVn-l:
the selector which services one unit at a given time until completion of the data
transmission in the burst mode, and the multiplexer that operates in both the burst
and multiplexer modes, permitting simultaneous execution of several IO operations
for data transmission in small portions (bytes, for instance) at time intervals

less than 100 microseconds.

14

FOR OFFICIAL USE ONLY
Used in the Yes BVH-Z is a new type of channel, a block-multiplexer which makes it

possible to combine the operations for making the peripherals ready for date trans-
mission with 10 operations.

The channel functional capabilities were also developed further: facilities were
introduced for indirect addressing during 10 operations, supporting facilities of
dynamic address translation of the processor in the organization of virtual stor-
age, and facilities for repetition of instructions in a channel and the two-byte
interface. The aggregate of these facilities has made it possible to increase I0
efficiency toa.considerable extent.

From the point of view of specific implementation, channels can be made both in
the form of individual independent units and with partial use of processor equip-

ment. In any case, uniformity of IO procedures defined by the Yes EVH-Z princi-
ples of operation is maintained.

The broad nomenclature of peripherals for the Unified Computer System includes
devices with various principles of operations. functional purpose and rate capa-

bilities: perforated card and tape units, tape and disk storage units, plotters
and CRT units, etc.

The technical characteristics of facilities already in existence have been um-
proved and new ones developed in the YeS EVM-Z peripherals. New disk storage
units with large capacity and tape storage units with a high density of recorded
information have been developed. The peripheral nomenclature has been supple-
mented with displays and systems based on them.

Control units are intended to control the peripherals. Physically, they can be
placed in the peripherals them."ves, in the processor or channels. or made as
individual units, but in any case, realization of all capabilities supporting
operation of channels with the peripherals is maintained.

The control units are connected to a channel through the TO interface which
makes the control signals device-independent.

The Yes BVH-Z control units have been improved in accordance with the evolution of
the [0 peripherals and channels.

Chapter 2. Raising Efficiency of Computations

Enhancement of computational efficiency in the Yes EVM—Z is primarily linked to
the development of the structural organization and to the expansion of the func-
tional capabilities of the central processing unit, the processor, and is achieved
through:

improvement in the throughput/cost ratio as the basic parameter of the general-
purpose computer;

increase in the absolute value of throughput for models of each class;

development of structures with fundamentally new qualities: virtual organization,
automation of program debugging, event recording and others;

15
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

availability of advanced facilities for building multiprocessor and multimachine
systems, and special-purpose systems;

improvement of operating characteristica--reliability and validity of computations,
reduction of hardware maintenance time and others.

Discussed in this chapter are the basic structural concepts and hardware features
of the processor by which the new capabilities for data processing in the Yes EVE-2
are realized. ‘

2.1. Main Concepts of Processor Structure

The criterion of efficiency of processor computations for all models in the Uhified
Computer System is the throughput/cost ratio, i.e. achieving a given throughput
with the least outlays for equipment. However, this problem is solved differently
for different models. Hhile a given throughput is achieved for low and medium
speed machines by relatively uncomplicated structural methods and, in connection
with this, the determining factor is reducing equipment cost by using a cheaper
element-design and technological base, for high-throughput machines that, as a
rule, use the latest achievements in microelectronics and technology, special com-
plexity is presented by the organization of the computer structure and optimiza-
tion of the computing process to obtain a given rate of calculations. From this
point of view, processor structure efficiency is largely determined by:

width of the paths for processing and transfer of data;

number of levels of instruction processing overlap;

structure and algorithms for operation of the executive unite;

organization of execution of instructions for transfer of control;

organization of CPU internal storage; and

degree of joint use of equipment by the CPU Ind channels.

In addition, improvement in the organization of CPU internal structure in all Yes
EVH-Z models is related to the development of the principles of microprogram con-

trol and realization of the capabilities of connecting special-purpose units
opthnized for execution of a particular class of problems.

Hidth of Paths for Data Processing and Transfer. in the Unified System of Compu-
ters, the methods selected for addressing main storage and the byte form of data
representation make it possible to use a different width of paths for date proces-
sing and transfer in different models as a function of economic expediency and the
capability of achieving given parameters on throughput.

The width of the path for processing operands differs as applied to the CPU, i.e.
the width of the arithmetic unit, and the width of the path for data exchange be-
tween the CPU and main storage (instructions and operands)

The width of the path for data exchange affects both the rate of processing and
the size of the CPU equipment. This stems primarily from the fact that the width

of the path for data exchange largely determines the organization and effective
time of main storage operation.

16

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

As a rule, main storage is divided into independent logical blocks that makes pos-
sible access to some blocks before completion of an operation begun in other
blocks. Used in the process is the principle of interleaving of addresses or the
so-called interleaving of main storage, which consists in the fact that the addres-
ses of related addressed storage cells are located in various logical blocks.
Usually, a two-, four- or eight-fold interleaving of storage is used, i.e. there
are two, four or eight independent blocks of storage in the system. The width of
the path for data exchange with one logical block is two, four or eight bytes.

With interleaving of storage, each logical block has its own independent main
paths for data exchange.

The width of the path for data exchange in the majority of cases clearly defines
the width of the path for processing of operands in the arithmetic and logic units.

By the width of the arithmetic unit is meant the width of the adder and the main
registers for the operands. And when there are several adders in the CPU, as for
example in high-throughput CPU's. the width is determined by the adder in which
operations on operands with fixed-point are executed.

Since arithmetic unit equipment makes up from 40 to 70 percent of the total CPU
equipment, the selection of the width for data processing has a considerable
effect on the total equipment. At the same time, it in obvious that when the
width of the processing path is reduced. the time for execution of operations will
be increased for operands whose size exceeds the processing path width. Taking
this into account, two, four and eight bytes are usually selected for the exchange
and processing path width for low. medium and high-throughput machines, respective-

ly.

Number of Levels of Instruction Processing Overlap. To increase the rate of in-
struction processing in the CPU's, the concurrent processing method is used: the
whole processing process is subdivided into stages and execution of the different
stages of several serial instructions coincides in one CPU operation cycle. To
achieve concurrent processing of instructions in a CPU, functional and independent
blocks are separated out; each of them executes only one of the instruction pro-
cessing stages. For example, for the case of three-level concurrency, the proces-
sing process is subdivided into three stages: the stage of preparing the instruc-
tion for execution, i.c. fetching the instruction from main storage and generating
the addresses of the operands, the operand fetching stage, and the stage of direct
execution of the operation in the arithmetic unit. Subdividing into stages is
usually based on equal time intervals for execution of the individual stages, since
only in this case is maximum efficiency achieved for making use of the individual
functional blocks of the CPU that afford concurrent processing, i.e. there is no
idle time in waiting for the completion of operation of preceding or subsequent
hlocks.

For three-level concurrency in a CPU. it is necessary to assign a block for fetch-
ing instructions and generating addresses, a block for fetching operands and an
executive block or arithmetic unit.

In addition, characteristic of Yes EVM-Z CPU's are stages for prefetching of in-
structions and operands and buffering them for subsequent processing, and overlap
of execution of the various operations in the executive units of the arithmetic

and logic unit, which increases even more the number of processing stages and
overlap levels.

17
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Although the efficiency of the method of overlapped processing of instructions,
from the point of view of increasing CPU throughput, is a function of the number of
overlap levels, this dependency is not proportional. The full use of efficiency of
the overlap method is rather rarely achieved in solving problems, since any suc-
cessful branch instruction in tne program or use by a following instruction of re-
sults obtained during execution of a preceding instruction causes stoppages of
instruction processing.

In fact, time T; for processing 8 instructions with K levels of overlap can be

represented by the following expression:

7, - r(_—.‘ +3.; '
K

where T is the time for execution of one instruction without overlap.

It is easy to see that when one instruction is executed (8-1), Tc-T, and with a

full CPU load over a long time (S-r69), the rate of instruction processing tends
to the value equal to T/K. Thus, the overlap method does not reduce the execution
time for one instruction; it does make it possible to increase device throughput.
Therefore, if dependent instructions (instructions, upon sequential entry of which
to input of the unit, processing of the next instruction can be started only after
completion of execution of the preceding one) are encountered among the instruc-
tions 8, CPU throughput is reduced to the value defined by the order of dependency
of the overlap levels compared to the case when there is no dependency of instruc-
tions. Levels of processing of instructions with numbers m and n (m <11!) are de-
pendent, if to start processing of the current instruction at level m, it is
necessary and sufficient that processing of the preceding instruction at level n
be completed. The value N-n-m is called the order of dependency of the overlap
levels. It can be shown that in this case, the CPU instruction processing rate is
defined by the expression

anon—2F).

where K -K/N. Physically, this means that in the case of dependency of instruc-
tions, it is as if the number of overlap levels is reduced and, consequently, the
CPU throughput is reduced. Thus, if execution of an instruction at the first level
cannot be started until the instruction at the last level has been executed (for
example, the result of the preceding instruction changes the content of the follow-
ing instruction), the order of dependence of the leveh of overlap N equals K,

which is equivalent to operating without overlap (Klsl).

The relationship between instruction execution overlap efficiency and instruction
interrelationships presented above is considered in the most general form. In
fact, this relationship is far more complex and, in addition, instruction execut-
ion overlap efficiency is affected by a large number of other factors. It should
also be taken into consideration that overlap of processing increases the size of
equipment and complicates the control circuit.

18

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

All these circumstances have to be taken into account in selecting the number of
levels of instruction processing overlap in each specific case to achieve given
parameters and first of all the throughput/cost ratio. Experience in developing
the Unified System computers and studies made indicate that overlap processing is
technically and economically expedient for a class of machines in which up to five
instructions are executed simultaneously. Therefore, the CPU's in the different
models of the Yes BUM-2 generally use two- and five-level overlapping as a function
of throughput. At the same time. sequential processing of instructions is provided
for in the smaller models, and in those machines where overlapping is used, modes
of operating without overlap have been provided for to facilitate search for and
localization of malfunctions in diagnostic procedures.

Structure and Algorithms for Executive Unit Operation. These units include the
traditional CPU arithmetic and logic units [ALU] and specialized hardware (for
example, a high-speed multiplier) that was developed in the Yes EVH-Z. Executed
in these units are all the arithmetic and logic operations in the universal in-
struction set in the Yes EVH-Z, which includes operations on numbers with fixed-
point and with floating-point with conventional and extended precision, logical
operations and decimal arithmetic operations. Operations are executed with
fixed and variable length fields.

Further raising of the efficiency of executive units in the Yes EVH-Z compared to
the Yes EVH-l is determined by the:

expansion of functional capabilities;
improvement of structural organization; and

use of more efficient algorithms.

The functional capabilities of YeS EVH-Z CPU executive units have been expanded by
the introduction of facilities for executing extended—precision floating-point
operations. in this case, CPU efficiency is increased in solving scientific and
technical problems and primarily those that have a large number of computational
iterations. Using conventional-precision floating-point operations in solving
these problems in some cases does not provide the necessary precision of the result
because of rounding errors. The introduction of facilities that permit operating
with a mantissa consisting of 28 hexidecimal numbers reduces the criticality of
this factor. Seven extended-precision floating-point arithmetic instructions have
been introduced in the Yes EVN-Z: ADD NORMALIZED, LOAD ROUNDED (extended to long),
LOAD ROUNDED (long to short), HULTIPLY (extended), MULTIPLY (long to extended--RR
instruction format), MULTIPLY (long to extended--Rx instruction format) and
SUBTRACT NORMALIZED.

Executive unit structure in the various Yes EVM-Z models determines the following
trend:

minimal size of equipment through universal arithmetic units with a small width of
operating units (8-16 bits) for the small models;

use of additional equipment which speeds up execution of individual operations with
an increase in the width of the operating assemblies to 32 bits for models in the
medium class;

achievement of maximum speed in the large models through specialization in opera-
tions of arithmetic units of large width (6A bits); and

[9

FOR OFFICIAL l'SF ONLY
FOR OFFICIAL USE ONLY

use of microprogram control to the full extent of operations for small and medium-
size models, and for large models to the extent in which achievement of the given
throughput is possible.

With the introduction into the CPU of buffer storage that supports fetching data
at the rate equal to the CPU operating cycle, the time for execution of operations
in the operating units of the executive unite has become decisive in determining
the computer speed. CPU computation rate depends to the highest extent on execu-
tion of addition/subtraction and multiplication/division operations with fixed and
floating point. Based on this. the structure of the operating units must in the
first place be oriented to rapid execution of these operations.

An efficient and widely employed method for structural organization of executive
units that results in increased throughput is the use of the principle of local
parallelism which consists in parallel processing in time of the algorithm for
execution of an individual operation by splitting it into a series of independent
sections. Such parallel processing is possible when the result of operation of

one section of the algorithm does not depend on the result of operation of another.
Thus, in executing a floating-point operation, operations on exponents are execu-
ted at the same time as operations on the mantissas.

Concrete realization of this principle requires incorporating several processing
functional assemblies that operate concurrently in time: mantissa adder, exponent
adder, operating shifter and analysis circuits. The principle of local parallelism
leads to increased speed not only through parallel processing of the operands pro-
per but also through parallel analysis of the operands and execution of the
functions of checking and control.

Used in the large Yes EVE-2 models also is the well known method of increasing
speed: the method of conveyor processing. To implement conveyor processing, the
entire processing apparatus is subdivided into steps, operating sequentially one
after the other, that perform elementary operations. The sequence of elementary
operations being performed while passing through all the steps determines the
execution of the full operation. The high speed of the conveyor method of proces-
sing stems from the short fixed time for execution of an elementary operation and
the concurrency of operation of all steps. Intermediate results of processing in
these steps are stored in registers which makes it possible to avoid the effect of
asynchronization. Selection of the number of steps and clock time for their opera-
tion is determined by the capability of achieving a given throughput taking into
account limitations on equipment size and the convenience of obtaining the required
clock frequency from the basic frequen:y for synchronization. and is also based on
the functional composition and physics; properties of the element system selected.

Speed of executive units can be increased also through their specialization.
Specialization, i.e. orientation of unit functions to execution of one type of
operation, allows optimal achievement (for a specific unit) of maximum possible
speed with existing technology, although it should be noted (as a disadvantage)
that a considerable amount of equipment is required to implement the whole set of
operations. Therefore, a basic problem is the optimal selection of the number and
types of units. Since specialized units are used for the highest throughput models
where it is necessary to obtain the maximum possible speed while disregarding out-
lays for equipment, in selecting types of units, i.e. their organization, the

20
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

orientation is on speeding up execution of operations which are processed in more
than one machine cycle in the universal units. These operations include primarily
multiplication, division and addition with floating-point. Based on this, the fol-
lowing types of executive specialized units are used in the CPU for the large Yes
BVH-Z model: unit for fixed-point operations, unit for floating-point operations.
unit for multiplication and division, and a unit for decimal arithmetic.

A further development of this method for increasing the speed of executive units is
the organization of parallel operation of the operating units. However, for high
efficiency of parallel operation, special software is required_that allows dis-
tributing instruction streams with regard to specialization of the units.

The problem of optimal correlation between speed and economy for medium-size com-
puters, as a rule, is solved by speeding up only certain operations. "Accelerators"
are used for these purposes, i.e. supplementary equipment operating at an increased
clock frequency and oriented to speeding up a certain section of the algorithm for
execution of certain operations.

Thus, used is the Yes-1045 computer is an accelerator for executing a number of
operations based on the tabular method of obtaining a result. The acclerator is
implemented with high-speed microcircuits of programmable read-only memory (PPZU)
[PROM] with a 256 x 6 organization. A table is stored in the PROH, and the appro-
priate result is generated at the PROM output as a function of the input signal.
in other words, the various Boolean functions of the input set are output as a
function of the program embedded in the PROM. Also undergoing acceleration are
operations that have a substantial effect on throughput (multiplication, transfer,
packing) and operations that, on the one hand, are conveniently implemented by
using the tabular method, and on the other, do not require additional outlays for
equipment. The accelerator is controlled by a special accelerator control memory
with a size of 512 68-bit words, the cycle of which is half the cycle of the CPU
control memory. Use of the accelerator has made it possible to increase the
throughput of the CPU in the Yes-1055 computer by 15 percent on the average with
a 6 percent increase in equipment.

Executive unit throughput is largely determined by the efficiency of the algorithms
for execution of multiclock operations (addition, multiplication, division with
floating-point, translation of codes, and a number of operations for processing
variable-length fields). in this case, by efficient algorithms are meant algo-
rithms that make optimal use of the structure of the executive units. It is
obvious that these algorithms will vary for each computer class in the Unified
System.

Organization of Execution of Instructions for Transfer of Control. Used in rating
internal CPU speed are so-called mixtures of instructions that take into account
execution time and recurrence (weight) of individual instructions in programs for
the most typical classes of problems. Statistics show that CPU computation rate
is most affected by only about 10 types of instructions which require raising the
execution rate. These instructions include (in addition to those discussed in the
preceding section) transfer of control instructions too which affect not only the
rate, but to a considerable extent also the CPU structure.

21

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

in the Unified System of Computers, two methods of raising the execution rate of
transfer of control instructions are widespread. The first is based on a statis-
tical account of the probability of successful execution of an instruction for
conditional transfer of control, and the second, on a statistical account of the
most probable length of program cycles realized by using instructions for con-
ditional transfer of control.

huplementation of the first method requires rapid prefezching of instructions from
main storage, overlap processing and incorporation of additional buffers with a
size of 8-16 bytes into the CPU structure. One buffer is used to store the basic
sequence of instructions in executing the program. When a transfer of control in-
struction is encountered. an estimate of the most probable outcome is made and
fetching is organized for the instructions of that branch of the program that will
most probably be executed after completion of the branch instruction. These in-
structions are placed in the second buffer and processing of them is started even
before the transfer of control instruction is executed. “hen the estimate is cor-
rect, the high rate of instruction processing is maintained; in the opposite case,
fetching of the other branch is not required since it is stored in the first buffer
and can be processed right after completion of execution of the transfer of control
instruction.

In the fastest computers, the CPU structure has a third buffer for preselected in-

structions. It is used to store instructions selected as a result of processing of
the next transfer of control instruction in the most probable branch of the program
before completion of execution of the preceding one.

bnplementation of the second unthod for speeding up execution of conditional trans
fer of control instructions is organized by a buffer for processed instructions,

in which usually from 64 to 128 doublewords of instructions are keptI i.e. in exe-
cuting the basic sequence of instructions in a program, the processed instructions
are not erased, but stored in a the special buffer. in this case, a special algo-
rithm has to be provided to replace processed instructions of old information in
the buffer by new. The main idea of the second method is this: Since conditional
transfer of control instructions are usually placed at the end of a cyclic section
of a program when programs are written, in the majority of cases, this conditional
transfer will point to a section of the program already selected. This is precise-
ly the section of the program with high probability that is stored in the buffer

of processed instructions. which makes it possible to reduce the time for preparing
instructions of the new branch for execution.

Shown in fig. 3 are the structural schemes for paths of instructions in speeding up
execution of transfer of control instructions by the method of estimating the pro-
bability of a transfer (a) and the method of probable length of a cycle (b).

Both of these methods require additional equipment outlays for implementation and
result in considerable complication of the control algorithms in the CPU; however.
they are used in the large YeS EVH-Z models because they produce a considerable
increase in the CPU speed, while reducing execution time by a factor of two to
three for transfer of control instructions.

Organization of CPU Internal Storage. CPU internal storage consists of a large
number of resiters and buffer storage for temporary storing of intermediate results
obtained during execution of operations, storage of data files during exchange,

22

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

mﬂigctions

  
 
    
  
   
  
  
 
   

. gas-buffers for
‘ . preselected
instructions

3:5,...) register for instruction
being processed

operand address

generation gmw- .—

c ircu i t Was Made

m-umuqueue of instructions

‘ address new to be executed-

m

operands ”'“"“‘1’“‘executive unit
a»- _
“Wnstructions
I)
My” buffer for preselected
17:31” I. and executed
instructions
operand address -m%m~.:register for instruction
8eneration “5:”??? ”MM“ being Processed -
circuit Mon
33:01.». queue of instructions
""0"? to be executed
address " _.
“Kim I
operands Hrnonuulrmmi

5m executive unit

Fig. 3. Scheme for execution of transfer of control instructions by the method of
estimating transfer probability (a) and the method of estimating loop

length (b)

storage of control attributes and information on computer status during program
execution and information that controls the sequence of instruction execution.
CPU computational efficiency is largely determined by the structure and speed of
internal storage, since certain of its components directly deter-ins or affect to
a considerable extent the CPU operating cycle.

A major characteristic of a CPU and computer is the CPU and IO channel data ex-
change rate with main storage. As noted earlier. selection of the optimal exchange
path width and use of interleaved memory make it possible to increase the data ex-
change rate; however. a substantial factor in increasing this rate is the reduction
of fetch time and cycle time of main storage. CPU buffer storage and channel buf-
fer storage are used in Yes EVM-Z CPU's to reduce the effective cycle of main

storage.

Main buffer storage is an intermediate block of storage (between the basic main
storage and the CPU) that operates with the CPU cycle and provides for storing

23

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

instruction and operand files most frequently used by the processor. Buffer stor-
age usually holds from 8 to 6b bytes, which permits a reduction in main storage ac-
cess time. Buffer storage is filled as data is fetched from main storage during
program execution. Since programs have a limited amount of instructions and ope-
rands and usually operate in the cyclic mode for processing a data file, after exe-
cution of the first cycle, about 90-95 percent of needed information will be in
buffer storage. Consequently, during subsequent operation of the program, instruc-
tions and operands will be fetched not from main, but from buffer storage. In this
case, the effective main storage cycle will be close to the buffer storage cycle.
Algorithms for replacing information in buffer storage provide for holding the most
frequently used data files. Exchange between main and buffer storage occurs in
blocks containing from 16 to 64 bytes, which permits making effective use of
interleaved main storage.

Processor buffer storage may be used for operation of IO channels, but this leads
to the emergence of conflict situations during a simultaneous call from the chan-
nels and the processor and, consequently, to a reduction in the efficiency of the
operation of buffer storage. Therefore, to raise the rate of data exchange be-
tween channels and main storage, used more often is special buffer storage for
channels, which is broken down into groups of registers allocated for each 10 chan-
nel. As a rule, four to eight double words of information each are stored in these
registers. With this organization of exchange, the capability emerges of making
efficient use of interleaved storage and reducing data exchange tune, because the
channel effects its exchange not with main storage, but with the buffer storage for
the channel. Information is exchanged between main storage and channel buffer
storage also in blocks of four to eight double words each.

The introduction of buffer storage units, in addition to reducing the effective
cycle of main storage, also leads to a reduction in the number of conflicts during
a simultaneous call for storage from channels and the processor. Both the former
and the latter are especially important for high-throughput computers. which has
dictated the use of buffer memories in the Yes EVH-Z medium and large models. Use
of these memories in small models is inexpedient because of the relatively high
cost of the additional equipment needed to implement them and the considerable com-
plication of the organization of the processor control structure.

The method of storing intermediate results of computations also largely determines
processor structure. in essence, in the Unified System of Computers, this method
is determined by the instruction set, form of data representation and addressing
structure. In the general case, there are three ways of organizing storage of
intermediate results obtained during performance of calculations.

The first is based on sending any results to main storage immediately after com-
pletion of the calculations without intermediate storage in the processor. This is
one of the most uneconomical methods since repeated access to main storage is
required in the process of executing one instruction.

The second method calls for using an intermediate register through which the re-
sults are transferred to main storage. Here the number of transfers is reduced,
since the information in the register can be used during execution of the opera-
tions. But in this case too, rather frequent access to main storage is required
to free the register.

24

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The third method uses several registers that form a small amount of storage, and
the results of the various groups of operations are kept in their own registers.
In this case, the number of registers or storage size is selected in such a way
that as a rule, only final results are stored in main storage.

In essence, all three methods are used in Unified System processors, but the third
one is the main one. For this purpose, the processor structure has 16 general-
purpose registers and four registers for storing results of floating-point opera-
tions (see chapter 1). The general-purpose registers store results of fixed-point
operations and are also used as index registers in modifying an address and execu-
ting instructions associated with addressing, which eliminates the need for addi-
tional registers for these purposes. Besides this, a program status word [PSH]
register and s group of control registers are used to store control features and
information on the current status of the system during program execution.

Direct writing of results to main storage is provided for only for "storage-to-
storage" instruction format, during execution of which variable-length operands
are processed. This is because storage of intermediate results would require a
buffer too large in size and in addition, these instructions are not decisive for
computer speed.

For writing information to main storage in large models, in addition to the methods
discussed, individual registers are used that are intended for coordinating opera-
tion of the CPU and main storage with store instructions.

The microprogram method of control is used to one or another extent in all Yes
EVH-Z models. Organization of the control storage for microprograms is a major
feature determining the efficiency of CPU operation. In each specific case, it is
selected on the basis of the computer purpose, throughput and structure. Prom a
physical point of view, control storage for microprograms comes in two varieties:
read-only storage [ROS] and writeable control storage [“68]. R05 is used only for
reading of information and, as a rule, is faster and simpler for control than HCS.
At the same time, HCS offers additional capabilities for raising CPU efficiency
through continuous improvement of algorithms for executing operations.

Joint Use of Equipment by CPU and Channels. To reduce the total amount of equip-
ment in some models in the Unified System, the principle of so-called integrated
channels has been implemented. It is based on the fact that processing of instruc-
tions in the CPU during program execution and processing of IO operations in a
channel are largely similar and require the same type of both executive and control
assemblies and units. Based on this and on the fact that information exchange be-
tween a channel and an external device takes considerably more time than that for
data exchange between a channel and main storage, it is possible to use a part of
the CPU equipment to perform channel functions. This permits a substantial reduc-
tion in channel equipment and designing it into the CPU. The common equipment is
used primarily by the CPU. After completion by a channel of an exchange of a
routine portion of data with an external device, CPU operation is halted tempor-
arily and the necessary operations for a channel exchange with main storage are
performed.

In each specific case, depending on the organization of the computational process,
the channels can use various equipment of the CPU, but, as a rule, this equipment

25

mo nrnnu IIQF ONI V
I'UK UPI'ILIAL UDI'. UIVLY

includes the control storage for the microprograms and the storage control unit
(exchange path). Hicroprogram control provides for data exchange between the
channels and main storage and organization of processing of control information,
and the microprogram storage unit is used by the channels and CPU on a tine-sharing
principle. In addition. in many cases, the CPU ALU is designated for processing
control information for a channel. Joint use of equipment is provided for by using
hardware-controlled priority circuits that permit transfer of control to a specific
unit only at certain points of the microprogram sequence of the CPU and channels.
Since channel operation can be interrupted upon CPU request. each channel must be
provided with its own address register for storing the current address when control
storage is transferred to the CPU. After transfer of microprogram control to a
channel, it will continue its operation at the address stored in the register.

In the general case, from the viewpoint of equipment used, channel functions are
divided as follows: data is exchanged with IO peripherals under control of channel
hardware in parallel with CPU operation; data exchange between channels and main
storage. as well as processing of control information is performed by CPU facili-

ties under control of microprograms and in this case the CPU is not performing its
own operations.

The principle of integrated channels is used only in the small and sometimes in
medium-size Yes EVH-Z models, since use of this principle in large models is not
warranted because of limitations that it imposes on CPU speed.

2.2. System Control Facilities

CPU system control facilities provide for the set of necessary actions for monitor-
ing system states, specifying modes of operation, protecting programs from destruc-
tion, expeditious linking of hardware facilities together and synchronization of
their operation in time. external intervention, etc. Some of these facilities are
well known from their use in Yes EVH-l (facilities of direct control, external in-
terrupts, storage protection and initial program loading). A number of new facili-
ties have been introduced in the Yes EVE-2 that raise control capabilities to an
even greater extent:

facilities of extended control and control registers;
facilities for expansion of the system of interrupts;
facilities for program event recording;

facilities providing for monitor programs; and

facilities for time readout.

Extended Control Mode. The PS" defines the status of the computer and controls
operation of hardware and software.

in the Yes EVH-Z, there are two control modes that determine the function of the
PSH fields and bits and use of permanently assigned locations in main storage.

Operation of computer hardware while maintaining full program compatibility with
the Yes EVH-l is defined as the basic control mode (BC mode).

26

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Operation of the new hardware and software under which additional functions are
performed and greater capabilities emerge is defined as the extended control mode
(EC mode).

The modes are specified by the value in PS" bit 12: 0 for the BC mode or 1 for the
EC mode.

In the EC mode, the location of certain control fields in the P8" is changed, some
PS" fields have been removed and additional ones introduced. In particular, the
interruption code and the instruction-length code have been assigned permanent
main storage locations, masks for interruptions have been expanded and placed in
the control registers, and additional control fields have been introduced in the
PSH: the program event recording mask and the translation mode.

Table 1 shows the allocation of PS" fields that fully determine the state of the
computer hardware at a given time.

For the EC mode, PS" bit 1 has been allocated for the program event recording mask,
and bit 5 defines the translation mode. Unused PS" bits in the EC mode must
contain zeros.

Table 1. Allocation of PS" Bits

 

 

PSW Bits

Function of PSH Fields 80 EC
Channel masks 0-5 0-5 *
IO mask 6 6
External interrupt mask 7 7
Protection key 8-11 8-11
Control mode 12 12
Machine-check mask 13 13
Hait state 14 16
Problem state 15 15
Interruption code 16-31 **
Instruction-length code 32-33 **
Condition code 34-35 18-19
Program mask 36-39 20-23
Instruction address 60-63 60-63
* Channel masks are stored in control register 2.
**

Interruption and instruction-length codes are stored in permanently assigned
locations in main storage.

27

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Control Registers. Sixteen 32-bit control registers have been provided for stor-
ing additional control information that expands PSH information in the CPU.

Control information is loaded into the registers and their contents stored in main
storage by execution of the instructions LOAD CONTROL and STORE CONTROL.

Control registers support CPU operation in the EC mode, hold the expanded masks for
external interruptions and IO channel interruptions, control information for the
facilities of virtual organization of the system and other new facilities in the
Unified System.

Control register 0 includes the fields for control of the block multiplex mode for
the 10 channels (bit 0) and control of suppression of set system mask [SSH] (bit 1).
Facilities for organization of multiprocessor systems use the clock synchronization
control fieldo-bit 2 of control register 0, and masks for malfunction alert, emer-
gency signal, external call and clock synchronization check-~bits 2, 16-19 of con-
trol register 0. Dynamic address tranaslation facilities use a control field for
page and segment size control--bits 8, 9 and 11 of control register 0, as well as

fields for segment table length and segment table address--bits 0-7 and 8-25 of
control register 1.

Channel masks which determine the CPU accessibility for IO interruptions in the BC
mode are stored directly in the PS" (bits 0-5). In the EC mode, these masks are
located in control register 2 (bits 0-31). Control register 8 contains the moni-
tor masks in bits 16-31.

Program event recording facilities contain individual event masks in bits 0-3 and
16-31 of control register 9; the starting and ending addresses of the main storage

area monitored by the recording are stored in bits 8-31 of control registers 10
and 11.

Machine error processing facilities and recovery facilities use rc-trol registers
14 and 15 for their purposes.

Unused bits of control registers and unused registers must contain zeros.

Interrupt System. As a function of the interrupt source and cause, there are six
classes of interrupts: supervisor call, program, external, IO, restart and
machine check.

During execution of the SUPERVISOR CALL instruction, an interrupt signal is gene-
rated whose main purpose is the switching of the CPU from the problem to the super-
visor state. Program interrupts occur when an instruction is executed incorrectly,
and when operands and computer devices are used incorrectly. External interrupts
provide for CPU response to signals from time readout facilities, interrupt signals
from the operator's console and signals from six external sources. Requests for

an 10 interrupt come from a channel after completion of an 10 operation in‘a chan-
nel or external device control unit, as well as after CPU intervention when certain
situations occur in the 10 system. The restart interruption is initiated by
activating the restart key on the system console.

28

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

A machine check interruption results from a system malfunction and is calssified
as either hard or soft. A hard interrupt is caused by a nonrecoverable machine
error. A soft interrupt is caused by a recoverable error.

Each class of interrupts has been allocated two fixed locations in main storage.
Stored in the first location is the current PS" transferred from the PS“ register
at the instant of interruption. The double word stored in the first location is
called the old PS". It is stored again in the PS" register after execution of the
interrupt subroutine. Stored in the second location is the new PS" that after
storage of the current status in the first location is transferred to the PS" re-
gister for initialization of the interrupt subroutine. Bits 16-31 of the old PS"
contain an interruption code that specifies the cause or source of the interruption.

with the emergence of the new hardware facilities (dynamic address translation,
program event recording, monitor, multiprocessor systems and new time readout), it
was necessary to introduce new types of interruptsto support the interaction of
this hardware with the software system. This in turn required the development of
control of interrupts through inclusion of masks for the new hardware facilities
in the control registers.

Expansion concerned the class of program interrupts and the class of external in-
terrupts. Program interrupts were introduced in operation of dynamic address
translation facilities associated with use of a segment (interrupt code 10) and a
page (interrupt code 11), as well as with specification during translation (code
12). Interrupts supporting operation of the monitor and program event recording
also pertain to the program class and have codes 60 and 80, respectively.

Signals of external interrupts were introduced that are associated with operation
of a multiprocessor system (malfunction alert. emergency signal and external call:
interrupt codes 1200, 1201 and 1202, respectively), as well as with operation of
the new time readout facilities (time-of-day clock synchronization check, clock
comparator and CPU timer: codes 1003, l00b and 1005).

in addition to expansion of the interrupt system, with the introduction of the

new hardware facilities the need arose too for storing additional information dur-
ing the interruption. This in turn required new fields in permanently allocated
main storage that were intropduced as well for machine check handling facilities

and recovery facilities.
Table 2 gives the location of the new fields in permanently allocated storage.

Monitoring Facilities. Monitor facilities were introduced for basically two rea-
sons. First, raising the capabilities of the multiprogramming and time sharing
modes required development of facilities that would allow selective storage of
information at a certain time during program execution. Second, there was a re-
quirement for statistics that permit monitoring the course of execution of pro-
grams and analyzing the efficiency of CPU operation. These facilities can be used
to track which programs were executed and at what times, and also how often they
were used.

Access to the monitor program that implements execution of the necessary functions
is effected by using interrupts. For these purposes, the special instruction

29

FOR OFFICIAL USE ONLY
Function of field

_____——_——————

restart new PS"

restart old PS"

old PS" for external interrupts

old PS" for supervisor call interrupts

old PSU for program interrupts

old PSW for machine check interrupts

old PSH for 10 interrupts

channel status word

channel address word

interval timer

new PSH for external interrupts

new PS" for supervisor call interrupts

new PS" for program interrupts

new PSH for machine check interrupts

new P8" for to interrupts

processor address during external interrupt in EC mode
external interruption code in BC mode

instruction-length code and supervisor call interrupt code
in EC mode

instruction-length code and program interrupt code in BC mode
translation exception address during program interrupt in EC
mode

monitor class number during program interruption due to a
monitor event

program event recording code during program event interrupt
address 9f instruction that caused interrupt for program event
monitor code during monitor event interrupt

channle ID during execution of STORE CHANNEL ID instruction
10 extended logout address

limited channel logout information

10 address during an [0 interruption in the BC mode
machine check interruption code and expanded information on
the machine check interruption
FOR OFFICIAL USE ONLY

Depending on circumstances, performance of a particular function defined by the
monitor class may be suppressed. For this in bits 16-31 of control register 8 are
stored masks corresponding in ascending order of the numbers to all 16 monitoring
classes. For those monitor classes with a mask bit equal to one, an interrupt is
permitted. If the mask bit is zero, no interrupt is initiated.

During an interrupt. the interrupt code (monitor call) is placed in the old PS",
and the monitor class and code are placed in permanently allocated main storage

at addresses 168 and 157-159, and in the process, zeros are placed in the bytes
with addresses 109 and 156.

Program Event Recording Facilities. Computer program debugging is a laborious,

but necessary operation that cannot be solved by another method. Therefore, the
availability in the CPU of special facilities that facilitate the process of pro-
gram debugging and reduce machine time in the process is a mandatory part of
modern computers. In the Yes EVH-Z, these facilities include program event record-
ing facilities. Program events to be processed are recorded by using the mecha-

nism of program interrupts. The interrupt code identifies the program events that
cause the interruption.

Program event recording facilities operate only in the EC mode and control infor-
mation for this is stored in control registers 9-11. Bits 0-3 of control register
9 contain the event masks and bits 16-31 contain the general register masks.
Event masks specify which events are monitored and the bits are assigned as
follows: 0 -- successful branch;

1 -- instruction fetch;

2 -- storage alteration; and

3 -- general register alteration.

General register masks specify which general registers are monitored for altera-
tion of their contents. For this, each of the 16 mask bits in ascending order
corresponds to a general register number.

The starting address of the monitored main-storage area is stored in bits 8-31 of
control register 10. The ending address of the monitored main-storage area is
stored in bits 8-31 of control register 11. The starting and ending addresses
specify a storage area for two events in a program: instruction fetching and
storage alteration. "hen the starting address is equal to the ending address,
only the location designated by that address is monitored. "hen the starting ad-
dress is larger than the ending address. the monitored storage area consists of
two zones. One zone covers the area from the starting address to the largest ad-
dress in the system. and the other, from location 0 to the starting address. Thus.
the maximum possible amount of main storage, defined by a 24-bit address, may be
allocated for recording of these events.

During an interrupt caused by program event recording. additional information on
the cause of the interrupt is placed in the permanently allocated storage area
(locations 150-155). The specific event code that caused the interrupt is placed
in bits 0-3 of location 150. The values of these bits correspond exactly to the
values of the event mask bits in bits 0-3 of control register 9. The addresses of
instructions that caused a given event in a program are stored in bits 8-31 of
locations 153-155. Zeros are placed in all other bits of locations 150-155.

31
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Time readout facilities include the time-of-day clock, CPU timer, clock comparator
and the interval timer.

The time-of—day clock continuously measures elapsed time and is a 52-bit binary
counter. in which information is represented in the form of an unsigned fixed-point
number. The clock is incremented by adding a one in bit position 51 every micro-
second following the rules for unsigned fixed-point arithmetic. A carry into bit
position 0 is ignored, and counting continues from zero on.

The time-of-day clock operates in all CPU states: wait/running, problem/supervisor
and stopped/operating. Its operation is not affected by any operations for CPU and
system reset. Time-of-day [TOD] clock operation can be stopped only by a clock
malfunction, by disconnection of power to the CPU or clock itself and when it is in
the STOPPED state.

The STOPPED state of the TOD clock is set each time before its contents has to be
altered by the SET CLOCK instruction, by which the current number stored in the
counter is replaced by the operand specified by the instruction. Transition from
the STOPPED state to a new state and vice verse is defined by bit 2 of control re-
gister 0. when this bit is one, the TOD clock remains in the STOPPED state. A new
clock value is set by the SET CLOCK instruction only when this bit is zero.

The TOD clock value can be stored in main storage by the instruction STORE CLOCK.
when this instruction. as well as the instruction SET CLOCK, is executed. facili-
ties have been provided to ensure synchronization of clocks when there is more
than one in a multiprocessor system organization.

when it is necessary to cause an external interrupt at a certain TOD clock value,
the clock comparator is used for these purposes. The value specified in a program
is stored in the comparator by the instruction SET CLOCK COMPARATOR; this value is
continuously compared to the TOD clock value. An interrupt signal is generated at
the moment these values coincide. Comparator contents are stored in storage by
the instruction STORE CLOCK COMPARATOR.

The CPU timer provides a means for measuring elapsed CPU time and for causing an
interruption when a prespecified amount of time has elapsed. Just as the TOD clock,
the CPU timer is a binary counter with the same format, except that a one is not
added, but subtracted from the 51st bit. in the process, bit 0 in the timer coun-
ter is used as the sign of a fixed-point number. A request for a CPU-timer inter-
ruption exists whenever the value in the CPU timer is negative (bit 0 is one).

"hen both the CPU timer and TDD clock are running. the stepping rates are synchro-
nized such that both are stepped at the same rate. In contrast to the TOD clock,
the CPU timer does not change its state when the CPU is in the STOPPED state.

The timer reading can be stored in storage by using the instruction STORE CPU
TIMER. The instruction SET CPU TIMER is used to change the value of the timer.

The interval timer, in association with a program, can serve both as a real-time
clock and as an interval timer. It is in location 80 of main storage. The 32-bit
number is treated as a signed fixed-point number. An interrupt occurs when this
number becomes negative (bit 0 is one). Interval timer contents are reduced by
one in bit position 23 at 300 cycles per second between the execution of instruc-
tions.

32

FOR‘OFFHJAL USEGDNLY
FOR OFFICIAL USE ONLY

2.3. Dynamic Address Translation

The multiprogram mode has become the main mode of computer operation. Efficient
use of this mode presupposes the availability of a large amount of main storage as
well as hardware and software facilities for dynamic storage allocation in the pro-
cess of program processing.

The largest main storage size for the Unified System of Electronic Computers is
limited to the address capacity adopted and may be 16M bytes. However, development
of main storage of this size with the required time parameters presents consider-
able technical difficulty. In addition, the size of system, standard and control
programs far exceeds the size of real main storage. Based on this, only active
sections of system programs are in main storage, which restricts the capability of
processing them efficiently. The availability of a large amount of external stor-
age and programming in symbolic addresses with use of the virtual principle makes
it possible to get around this limitation. The programmer appears to have the
maximum permissible amount of main storage and in the process, storage is reallo-
cated for programs dynamically withput programmer participation.

In the Yes EVH-l, used for dynamic storage allocation was the method of base re-
gisters, in which a real address of main storage was formed as the sum of a sym-
bolic address and the base. Base addresses for the various system programs are
stored in register local storage of the CPU.

Dynamic storage allocation using base registers does not have sufficient flexi-

bility since the system program has to be brought into main storage completely,

even if this is not necessary. In addition, any input of a new program requires
physical reallocation of storage size. which is time-consuming.

The dynamic storage allocation method with page and segment organization is used
in the Yes SVH-Z. This method assumes subdividing the entire extent of virtual

storage into blocks called segments and pages. Symbolic (logical) addresses are
translated into real ones by special translation tables. Dynamic address trans-
lation is possible only when operating in the EC mode.

Logical Address Structure. Segments and pages are used as movable blocks of data
in the dynamic address translation nmde. A segment may be 64K or 1H byte; a page,
may be 2K or 0K bytes. Sizes of a segment and a page are controlled by the values
of bits 11,12 and 8,9 respectively of control register 0. Data in each block are
addressed by sequential logical addresses. A logical address consists of a page
index (number) field, a segment index (number) field and a byte index field (dis-
placement withln a page). Fig. 4 shows the formats of the logical address for

the different segment and page sizes.

To translate the logical into real addresses, translation tables are used for seg-
ments and pages. These tables reside in main storage and determine the current
allocation of storage actually installed. The address and length of the segment
table are defined by the appropriate bits of control register 1. The entry
fetched from the segment table-designates the length, availability and origin of
the corresponding page table. The entry fetched from the page table indicates the
availability of the page and contains the high-order bits of the real address. A
zero value in the availability bits contained in the entries of the segment and
page tables indicates the given entry is available for use.

33

FOR OFFICIAL USE ONLY
FOR‘OFFKJA1.USEIONLN

mammal; (2) Ammmuu' ﬁve

1' ' new M tutueuus‘ 6 )
n. .

        

 
 

Idama
clpaumg

1 Is I! )2 use :7
(6) W- Imu'r, ruswus- ‘ Mr

Ilsa-s; Item ‘W‘W‘.
I. “("2“)“ ‘mzta

s 7 s u it is n s
(7) mmr- 1 new, "pawns-2M1

O
tumult martial Wu H u
Willem w,

nested-«041w (10 W a

Fig. 0. Formats of the logical address Pig. 5. Diagram of dynamic address
translation process

Key: Key:

1. segment index 1. control register 1

2. page index 2. logical address

3. byte index 3. segment index

6. for GAR-byte segments and 6. page index
aK-byte pages 5. byte index

5. for 64K-byte segments and 6. displacement
ZK-byte pages 7. segment table

6. for IM-byte segments and 8. page table
QK-byte pages 9. translation-lookaside buffer

7. for 18-byte segments and 10. real address

ZK-byte pages

Translation. The translation process (fig. 5) is as follows: The segment-index
portion cf the logical address is used to select an entry from the segment table,
the starting address and length of which are specified by the contents of control
register 1. This entry designates the page table to be used. The page-index por-
tion of the logical address is used to select an entry from the page table. This
entry contains the high-order bits of the real address. The byte-index field of
the logical address is used for the low-order bit positions of the real address.

A translation buffer is used to speed up the translation process. Capacity and
sizes of the translation buffer are model-dependent parameters. The translation
buffer includes the high-order portion of the logical addresses and their

34

FOR 0F11C1A1.US£GDNLY
FOR OFFICIAL USE ONLY

corresponding real addresses, by which the CPU accesses main storage. Thus, con-
sidering that the CPU accesses main storage usually by sequential addresses and
with a high probability within the bounds of one page, table entries are fetched
from main storage only once. The information obtained in the first reference sub-
sequently remains in the buffer. and all subsequent references to storage that

use translation table entries from the same area of storage are performed by using
the buffer. Buffer size ranges from 8 words for the Yes-1035 to 128 words for the

Yes-1060 model.

There are certain conditions under which information may be placed in the buffer
and used for dynamic address translation. The concepts of a valid, attached and
active entry are introduced. An entry is valid when the segment or page valid bit
in this entry is zero. A segment table entry is attached when the dynamic address
translation mode is specified, the entry is within the segment table designated by
control register 1, and it is designated by a logical address with regard to seg-
ment size. A page-table entry is attached when it is within the page table desig-
nated by the page table address and page table length in an attached and valid seg-
ment table entry. An entry is active when it may remain recorded in the transla-
tion buffer. An entry may be placed in the buffer when it is valid and attached.
Information on the state of translation table entries and their use is given in
table 3.

Table 3. Use of Translation Tables

 

 

 

State of table entry: Can copy Can table Can table Can buffer
of entry entry be entry be copy be
be in fetched for used for fetched for
active attached valid buffer? translation? translation? translation?
yes yes yes yes yes yes yes
yes yes no yes yes no yes
yes no yes yes no no no
yes no no yes no no no
no yes no no yes no no
no no yes no no no no
no no no no no no no

For efficient processing of the algorithm for page replacement in main storage,
two types of recording are used: recording of references to a main storage block
location during storing or fetching of data. and recording of changes which re-
flects information on which pages in main storage had data stored in them.

In the dynamic address translation mode. the storage protection key code is exten-
ded with two additional bits. The reference bit is set to one each time a loca-
tion in the corresponding storage block is referred to either for storing or fetch-
ing of information. The change bit is set to one each time information is stored
in the corresponding storage block.

Reference and change recording takes place for both CPU and I0 channel accesses
for 2068-byte blocks and does not depend on9.8. size invoked.

35

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

2.6. Microprogram Control

Selection of the CPU control method is governed by the CPU operating cycle. com-
plexity of processing and control algorithms, and control method efficiency.

Until recently, the microprogram method of control was not widespread in high-
throughput machines. This was because this method had a number of shortcomings,
the most important of which were reduction in machine throughput and the high cost
of microprogram development. Therefore, as a rule, the hardware method of control
that permitted achieving a given level of speed was used in high-speed machines,
including the large models of the Yes EVM-l.

The situation has changed sharply in recent years. Hicroprogram control began to
be used extensively in designing high-throughput computers. This interest in
microprogramming was caused by the development of the technology of the micro-
olement base, the expansion of the computer instruction set and the considerably
greater capabilities offered by this method compared to the hardware.

The emergence of large-scale integrated semiconductor circuits with a low level of
delay made it possible to develop control storage, the parameters of which made it

possible to substantially reduce the effect of microprogramming on computer
throughput.

A study of CPU control methods revealed the dependence of their efficiency on the
size of the instruction set used in operations. An evaluation of the composition
of the instructions in the Yes EVH shows that the microprogram method is more
efficient. It is evident that CPU effectiveness will grow with extensions of the
composition of instructions and functions of the CPU. However. in building con-
trol circuits for the individual units in the CPU, a large role begins to be
played by the factor of speed of the control circuit and complexity of algorithms.
Indeed, performed for high-throughput computers in one CPU cycle simultaneously
are resolving the priority of the many requests from CPU units and channels,
checking the key for storage protection and accessing independent blocks of main

storage, translating logical addresses, fetching from buffer storage and other
operations.

Complex algorithms, on the one hand, can be more economically implemented with
microprogram control, but on the other hand, these algorithms have a large number
of branching conditions, which complicates the microinstruction addressing scheme
and in the final analysis both the cycle itself and the number of cycles in the
algorithm are increased. In this case, a compromise is required, which leads to
a mixed hardware-microprogram method of control.

It is most efficient to use microprogram control in CPU executive units, in which
are implemented multicycle algorithms having a large number of linear sections
and a limited number of branching conditions. Based on this, small models have
primarily microprogram control in all CPU units, while CPU's in the large models
use it mainly in the executive units.

The advantages of the microprogram method of control compared to the hardware
from the point of view of raising CPU efficiency and organization of maintenance
are expressed in the following:

36

FOR 0FFTCLAL.USE¢JNLY
FOR OFFICIAL USE ONLY

with microprogram implementation, the structure of the control circuit is more
regular, hardware facilities are used more economically, and the level of unifica-
tion of individual assemblies is raised, which leads to simplification and reduc-
tion in cost of equipment;

microprogram control permits developing a system of microdiagnostic tests to
automatically search for malfunctions; and

the control algorithms are documented more simply and clearly. which supports sim-
plicity in training service personnel and facility in CPU operation.

The structure of the microprogrsm control unit (MPU) is governed by three factors:
the principle of construction of control storage, the structure of the microinstruc-
tion and the method of generating the address of the following microinstruction.

Control storage for a microprogrsm control unit comes in two types: read-only and
writable. Read-only storage is implemented on the basis of modules or integrated
circuits of semiconductor programable storage (IS PPZU). Special programing de-
vices are used to program the storage when the CPU is manufactured. The informa-
tion in the programmable read-only memory is preserved under all conditions of CPU
operation, even when power is disconnected.

Hritable storage is implemented on the basis of integrated circuits of high-speed
storage (02U). The user loads information into this storage unit from external
media each time power is switched on to the CPU. In the Yes EVH, cassette recorders
are used to hold files of microprograms. Hicroprograms are replaced or changed by
replacing the cassettes which are prepared at the computer manufacturing plant.

All Yes Elm-2 models are oriented to using writable storage of microprograms, since
it has invaluable advantages in optimizing algorithms for operations and developing
a dynamic system of microprograming.

Hicroprogramming with the use of writable storage of microprograms has important
advantages in debugging prototypes and makes possible raising the efficiency of
machines in series production and operating at a using installation thanks to the
introduction of new software that makes use of the extended set of instructions and
new CPU functions. The latter is very important in selecting the method for imple-
mentation of the control circuits. This is in connection with the observed trend of
reducing time spent on the work of the operating system by "integrating" some fre-
quently used subroutines and operating system modules into the hardware. Such in-
tegration can be performed only when the CPU functional capabilities are extended,
i.e. when the control circuit algorithms are updated, which is easily done by
changing the contents of control storage.

The main characteristics of control storage are fetch time, word width and number
of words. Hemories with a capacity to 4K words, width to 144 bits and fetch time
to 60 ns are used in the Unified System of Electronic Computers.

The width of a word of control storage is governed by the type of coding of the

sets of microoperations and by the method of generating the address of the next
microlnstruction.

37

FOR OFFICIAL USE ONLY
Functional as well as instruction-oriented coding is used in coding the micro-
operations. Functional or field coding presupposes the presence in the operation
part of individual fields that contain sets of compatible microorders that control
the various functional parts of the processor that permit parallel operation of
them. Usually in the composition of the fields there is a field that includes the
immediate operand or instruction that can be used for setting certain registers.
Fig. 6 shows an example of such a microinstruction. Control signals are generated
by decoding of the fields. Field size is from 1 to 4-5 bits which permits coding
from 1 to 32 microorders.

IIII-Il
" " ’ " " " ’ menu I

' D Q. J. J
(a W (a) 4)

Fig. 6. Hicroinstruction with Fig. 7. Microinstruction with
functional coding instruction-oriented coding
Key: Key:
1. RA -- field that controls 1. K0? -- operation code
reception into register A 2. Adr 1 -- address 1
2. RB -- field that controls 3. Mr 2 -- address 2

reception into register 3
3. SM -- adder function control
field
lo. DSh -- decoder

Hith instruction-oriented coding, the sicroinstruction, just as a nominal instruc-
tion, contains the operation code field, fields in which addresses of registers or
processor functional assemblies are specified, and fields containing additional
control information (fig. 7).

A comparison of these two methods shows that outlays for equipment and time for
generating control signals With instruction-oriented coding are greater than that
with functional coding, although the width of the microinstruction is smaller.

Instruction-oriented microprograming lends itself more easily to automation of de-
sign of micr‘oprograms. With this method, the microprogram can be written by a pro-
gramer who has a formal description of the microinstructions. Although functional
coding is considerably more complex and requires detailed knowledge of all proces-

sor assemblies for writing the microprograms, in this case, more efficient micro-

programs are obtained in terms of time of execution and number of microinstructions.
Functional coding is intended primarily for the large models in the Unified System.

No methods of addressing, natural and compulsory, are used to generate the address
of the next microinstruction.

38

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

address (1)

a.) a.) p)

4b)
[:_________£WEchsls_.-_-l

(l3 (2) (3)(l) (2) (3) (l) (2) (3)

an. All! N W‘. [I as ”I

 

 

 

 

(a) (a)
sum ‘ sum
. we-_....__' W"
cycle cycle
microinstruction
Fig. 8. Time chart of operation of Fig. 9. Diagram of microprogram
control storage control of processor
Key: Key:
1. FA -- microinstruction address 1. FA - microinstruction address
generation generation
2. VYB - fetch from control 2. 08h - decoding of microorders
storage

3. 08h - decoding of microorders
a. VYP - execution of operations

The compulsory addressing method presupposes that each microinstruction contains
the base address of the next microinstruction to be executed and the fields-that
define the conditions that effect a change of the base address. Thus, all condi-
tions for microprogram transfer are specified in the microinstruction.

The natural addressing method presupposes that after execution of the microinstruc-
tion with address A, the microinstruction with address A + 1 will be executed,

which eliminates the need for microinstruction addressing fields within the micro-
inatruction. But used in the process in the microprogram in addition to operation
microinstructions are those of the control type that contain only fields for effect-
ing microprogram transfer. This causes complication of the microinstruction decod-
ing circuit and extension of the microprogram, although the length of a microin—
struction is shortened. Since this method of microprogramming is similar to de-
signing ordinary programs, natural addressing is often used with instruction-
oriented coding.

Various methods are employed to raise the speed of operation of a microprogram con-
trol unit. The unit operating cycle consists of four phases: microinstruction
address generation (FA), fetch from control storage (VYB), decoding of microorders
(DSh) and execution of operations (VYP) (fig. 8). Usually, the operation execution
phase coincides with the address generation, fetch and decoding phases.

Thus, with proper selection of relations of times of operation of executive units
and microprogram control. the processor cycle can be shortened and is governed
usually by the operation of the control circuits. The cycle can be shortened fur-
ther by reducing address generation time or eluninatiug it from the operating cycle.

39
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

For example, if the branching in the microprogrms can be in no more than four direc-
tions, then a method is used in which the four words are fetched at once from con-
trol storage, starting at the word specified by the base address, and the final
fetch of one of the four words is effected according to the transfer conditions
generated simultaneously with the fetch of the microinstruction (fig. 9).

he time for the microorder decoding phase can be reduced by using for critical

purposes control fields with direct coding, when each bit of a field is directly a
control signal.

2.5. Principles of Organization of Array Processor

An array processor (MP) is a supplemental, specialized porocessor connected to a
main computer instead of one of the l0 channels or directly as an operating resource.
Standard Yes OS channel programs are used in the first case to organize comunica-

tion with an array processor; the second case requires a special supplement to the
Yes EVE software.

The main operations executable in an array processor include correlation,’ convolu-
tion. vector, scalar and matrix multiplication, translation of fixed-point to
floating-point format and the functions of indexing, counting, fetching and storing
of input and output data. Operations are performed in the arithmetic unit of the
array processor. 'hro buffers with a capacity of 32 words each are used to match
the rates of operation of computer main storage and the arithnetic unit in the
array processor during iterative operations. These buffers are used to hold both
input data and the result. The basic arithaetic function executable in the array
processor is the function UX-o-‘l with data having the short floating-point format.
Fixed-point numbers the length of a halfword may also he used as input data in the
array processor; prior to processing, they are translated to floating-point format
in the arithmetic unit.

As mentioned earlier, the array processor is considered as one of the selector chan-
nels, connectable to the main processor and Iain storage in the computer. Such
organization permits simultaneous data processing in the main and array processors.

Four 10 instructions, 810, TIO, H10 and ma, can initialize operation of the array
processor. Each instruction contains a channel address and an external device
address for identification of the array processor. In the process, the channel
address (bits 16-23 of the instruction) must contain the code 3 and the external
device address (bits 20-31) is arbitrary. The external device address code 01 (hex-
adecimal) is intended for initializing special diagnostic operations. Upon comple-
tion of execution of an IO instruction, one of four values of a condition code (00,
01, 10, 11) is issued to the processor. The array processor priority for access to
main storage is higher than that of the processor and lower than that of a channel.
Table 4 gives the condition code values and state of the array processor in the
various modes when 10 instructions are executed.

Just as the 10 channels, the array processor fetches from main storage the channel
address word (ASK), then the channel compand word (USK) and generates the channel
status word. Control information for data (USOnoperand control word) is fetched
for executing matrix operations in the array processor. Operand control word for-
mat is shown in fig. 10.

60

FOR OFFICIAL USE ONLY
FOR OFFICIAL USI-Z ONLY

Sonditton codoa and array proceuor atates

array ..__.§"2'23_.In§§m£m.l___ __

procoaao SIO "0 "IO TCII

 

 

 

       

   
    
 

    

 

 

 

 

    
 

Gaza-anal! ._._____-
‘ 5 (12( Q)
Otltc ““- ao 1- .-
27: "" ’35
. - ller
unmﬁuu no no! v- . on Him 0| ﬂl‘lifl- N
available Mmlnu- um um null
:llouynnoe :52”
I mnem-
Ium .
' 0‘83. on ,
I u. I
announ-
mun-
I
3 l
; £3,323.23, lent“) lo 11%" lo
ac (1- no (1'-
‘ maul! rah null

 

 

 

 

eratlon 4. no operationa
adltlon code 5 . store
errors; initialization of 6. store arror
station 7 . hal t
LII-"pun (unﬁt: L Mun nqmnm urumm
ormat_9£..b.y§s_..-.. ddKQQLQf_.ﬁtO.§.JL nt-
0 1 8 3|
l IIIIAPIC index count Cum I I
12 47 48 m

Format of operand control word

41

FOR OFFICIAL USE ONLY
Specification of bits 0-7 of the byte format field is shown in table 5.

 

Table 5

Bits Ponction

0 data format

1 used only for
fixed-point data

2 data quantity
operation

6 stack control

5 not used

6 not used

7 not used

Bits 8-31 contain the address of the first element in the matrix.
must correspond to the data type, i.e. integral boundaries of storage data (word or

halfword).

Bits 32-47 include a halfword with fixed point and are used as the index for addres-

 

State
0 l
floating-point fixed-point
data in
complement code
algebraic absolute
addition subtraction
without stack with stack

sing the current byte in main storage.

possible.

Both positive and negative index values are
Bits 68-63 contain the quantity defining the number of operands in the

matrix, considered as a 16-bit positive number.

Three types of operations may be executed in the array processor:

and matrix. Examples of executable operations are given below.

Vector move

operation may be shown by the following expression:

Y1 (e- Xi for i - l, 2. ..., n, where n - min (CTY. CT!) and Y1 - 0 for i -
n + l, ..., CTY, if CTY>CTX; here and from now on the symbol (- denotes

putting one variable into the place of another; CTY, CT! and 010 is the value of
the count field in the operand control words for Y, X and 0, respectively;

Used for control word

of operand
Y X U
+ + +
+ + +
+ + +
+ + +
.9 - -

 

This address

vector, scalar

operation with translation into floating-point format (VHO).

This

min (a, b) and max (a, b) is the minimum and maximum values of quantities a and

b; n
{Yi is the supplementary operand.

Thus, vector operand X is put into the place of vector operand Y in main storage.
If the dimension of vector X is less than the dimension of vector Y, then the com-

ponents of vector Y, for which i:> n, are replaced by zeros.

In the process of executing the operation, operand X is translated into floating-
point format.

62

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Vector nove operation with translation into fixed-point format (m). This
operation is described by the expression:

s.-x. .x,—x.
S.-X.- X,+S,
Y,<- IS.| +U,X.for l- I, .... n, where
' u-‘mmcrv, c111)
and Y,._o for 10:4. 1) to CW, 1:. cw>cw

In the process of executing the operation. floating-point numbers are translated
into fixed-point format. For this. bits 8-22 of the floating-point number are put
into bite 1-15 of the fixed-point field, and the zero bit is reserved for the sign
if bit 8 equals 1, otherwise bits 9-23 are put into bits 0-15 if bit 8 of the
original number equals 0. The factors X1. X2 and X3 are used to extend the pre-
cision during translation of the formats.

Element-by-elenent multiplication of vectors (VEH). This operation say be
described by the expression:

Y1" Yc-I-Ua"xafor (BI. 2. ..., n,
where ﬂ-mln (CTY. CTX, (STU) -
and YH-Iydfor i-n-HtoCTY, 1f

CTY>mIn(C'I‘X. CTll)

O

In this operation, the components of vector U are multiplied by the corresponding
components of vector X, and the elements of the product are added to the correspon-
ding components of vector Y. The result is moved into the location of vector Y.

Blenent-by-cleneni addition of vectors (VES). The operation is described by the
expression:

I’lt- U.-I-X, for in I. .... II. where
n mqu.((2TY, (:TX, (2111) I
and Yu- Url'o for i from (13+ I) to qu(CTY, CTU), if .
mIn(CTY, (:Tu)>(:'rx '
and Y, « X, for i from (n + II to mln (CTY, CTX),
if nlln((2TY, CTX)>(ZTU
and Y,o-0 for. i from max(CTX. CTU)-|-l to.CTY, if

CTY > max (CTX. CTU)

53

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Scalar Mltiplication (SKY). The operation is described by the expression:

Ylh’lyll +0 ' Xl'for. (Irv I, 2. .... a, where I.
I n = nlln‘(CTY, (2170‘

and Yu- Y. for I from (n +1) to CTY,1
' CTV>CTX '

In this operation, the components of vector X are multiplied by the scalar U.
The result is put into the location of vector ‘1.

Sue of Squares (SSQ). This operation is represented by the expression:

Y «- lYI-l- 2.x.(xn.
'q I

Yhere n .. CTX.

Sum of Vector Elements (SVE). For this operation,

Y « IYI-u-S; X..
H-l
where . n - CTX.

Partial Matrix Mltiplicstion (Pm). This operation may be represented by the
expression:

e e. . '
Ya " [VJ 'l- )éXﬂu—mw 1591’ ‘ -'= l. 2. .... m, where
I. a

M - CTY' n - (:Tx and

p.._indgx_9_LU_-6‘g rand control word
mmiber of‘byt‘és in operand U

The Y operand control word specifies a row of matrix Y. CTY defines the number of
elements both in a row of matrix U and in a row of matrix Y.

The X operand control word specifies a series of matrix Y.

The U operand control word specifies the matrix U. The value of cm is ignored
since C‘l'Y defines the number of elements in a row of the matrix. and CH the num-
ber of elements in a colun of the matrix. The value of the index in the U
operand control word defines the nusber of bytes between the sequential elements
in a row of the matrix. For clarity. the structure of the date array is given
below: U . (I _
+I ”—0-“
0:”:H "up-n+3

[x‘x,.'..x,| ~ ' -. —|Y.Y,...Y...l

e e

"(Li/H- ”ab—Mn-

me first component of the result is V.-[Y.)+X.U..|.X,U, 4. ...¥XnU-. '
'lhe remaining components are computed similarly.

1010

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Multiple Convolution (CVH). This operation is described by the expression:

Y'6—|Y‘| + 2U,—-XI.H—| for 13'. 2s -.-s ms mre
1" '

n - cfu and m c m|n(CTY. CTX)
mdn“"mhriﬁmm+hOMKu-
my >CTX.

Functional Structure of the Arrsy Processor. In one of the possible methods for
functional orgsnizstion, the srrsy processor is divided into two units: the
control (fig. 11) and the srithmetic (fig. 12). Each is functionslly independent
of the other end they are controlled by two synchronous microprogrsns.

 

Fig. 11. Diagram of arrsy processor control unit

Key:
1. input interface 9. register 3
2. address interfsce 10. chsnnel ststus word bus
3. output interface 11. from XY buffer
6. register A 12. register XY
5. indexing unit 13. register U
6. counting unit 14. result register
7. format register 15. XY bus (to srithnetic unit)
8. output formst trsnslstor 16. U bus

17. input format trsnslstor

45

FOR OFFICIAL USE ONLY
F1)R<0!11C1A|.I£SEZ(NVLY

The control unit is intended for:
receiving and processing channel instructions;
reading control words from 0? basin storage];

reading source data from main storage and storing computation results in main
storage;

performing translation of data formats; and
writing the 88K [channel status word] and logout information during normal and ab-
normal end of execution of current operation, respectively.

The control unit consists of input and intermediate registers A and 8. input and
output data format translators, unit for signals, unit for generation of and output
registers for U and X! addresses, and format register.

 

Fig. 11. Diagram or array processor arithmetic unit

Ke :
y 1. channel interface 10. mantisss alignsr and mantisaa adder

2; Aregiotet _ ll. normalizsr and calculator of
3. B register characteristics of result
a. XY register 12. U register
5. X buffer 13. U1 register
6. Y buffer 1‘. by 6 multiplier
7. X input 15. 60 input
8. Y input 16. U, 20, 60, 80 input

9. X by U multiplier. Calculator 1?. IOOUIt register
of difference of exponents

46

INDR OFTWCJAL UBEZCNULY
FOR OFFICIAL USE ONLY

The A register is intended for receiving data and control information from main stor-
age. Input data is sent to the arithmetic unit and results are written to main
storage through the B register. The format register holds information on the format
of data used in calculating. The format translators translate input and output
information from fixed-point to floating-point format and vice versa. The U regis-
ter is intended for receiving input data from the format translation unit and then
moving it into the arithmetic unit. The XY register performs the functions of re-
ceiving and buffering the input operand. The indexing and counting units generate
operand addresses and count the vector elements based on control information
specified in the channel command word.

The arithmetic unit is used to perform arithmetic operations on data and consists
of two buffer memories (BX and BY), buffer register U, multiplication and addition
units and an output result register.

Information is entered into registers KY and U for processing through the A and B
registers.

The X and Y operands are entered into the corresponding buffer: with a capacity of
64 words of 82 bits each. The U operand is not buffered, but used as the multiplier.
The arithmetic part of the unit consists of three stages. In the first stage, the
mantissas of operands X and Y are multiplied and the difference of the exponents of
the numbers XU and Y computed; in the second, the mantisaaa are aligned and added;
and in the third, the result is normalized and the final characfrristic computed.
The result is stored in buffer Y and is sent through the result register to computer
main storage. Using the array processor makes it possible to raise computer
throughput S-fold to 30-fold when suitable specialized problems are being solved.

Chapter 3. Organization of Data Storage

The hierarchical structure of computer storage systems has two basic levels--
external and main storage, whose main characteristics are informationaccesstime and

capacity. External storage, as a rule. is implemented with magnetic tapes and disks.

2

Depending on the unit, its capacity ranges from 10 to 10“ megabytes, while access

time varies approximately from

105 to 102 microseconds. Main storage in computers in the Unified System has a
capacity from 64K bytes to 16H bytes with an access time of about 1 microsecond.

This chapter covers organization of main storage which has a substantial effect on
the efficiency of the entire computer system. This is determined not only by the
increase in internal computer throughput, but also to a considerable extent by the
fact that for organization of its operation. an ever growing importance is being
assumed by the software system, in the development of which are required an ever
larger size of main storage and considerable time on realization of control func-
tiona.

In turn, main storage parameters are determined by the physical medium used as the
storage medium and by the structure of organization of data storage. Main storage
parameters are also affected by the design and technological solutions adopted.

47

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

3.1. Development of Main Storage Units

Perrite cores and semiconductor circuits with a high degree of integration are

used as storage media (or memory elements) in main storage units in the Unified
System of Electronic Computers. In the Yes EVH-Z, storage units have varied func-
tions and are oriented to using integrated circuits. But for economic and through-
put reasons, this does not exclude the use of ferrite core storage.

Ferrite Gore Storage. In developing main storage for the Yes ave-2, ferrite cores
were used that had been developed for the Yes EVE-1 with practically no major
change in characteristics. In the process, thanks to the use of a more modern
element base in the electronic framework circuits and more progressive design and
technological solutions, a considerable decrease was achieved in design dimensions
of storage calculating on information capacity. At the same time, the basic
operating characteristics of storage were improved.

Serving as an example is the Yes-3206 main storage unit with ferrite cores that
was developed for the Yes-1060 computer and which uses the same cores employed in
the development of the Yes-3203 and Yes-3205 units for the Yes-1030 and Yes-1050
computers, respectively. Used in the Yes-3206 unit are structurally complete,
interchangeable modules of storage with a size of 64K bytes, that contain ferrite
matrices and electronic framework circuits. This has made possible a fourfold in-
crease in information density compared to the res-3203 and Yes-3205 units. In
addition, equipment bulk was cut in half as a result of using newly developed
power supplies. Thus, equipment bulk of the Yes-3206 is one-eighth that of the
Yes-3203 and Yes3205 units while main storage capacity is identical.

Ferrite cores 3VT with an external core diameter of 0.8 mm and SVT with an external
core diameter of 0.6 lllhlve received the most use. For these cores, real cycle
time of the storage units (20) is 1.2-2.0 microseconds. Hith that, access time
ranges from 0.5 to 1.0 microsecond. Used in practically all ferrite core main
storage is access by circuit 2.50, which is more economical in equipment than ci-
cult 20 and has higher speed and noise immunity than circuit JD.

Integrated Circuit Storage. Using TTL (triode-transistor logic) semiconductor me-
mory microciruits was begun in the Yes EVE-1. These circuits have an information
capacity of 16, 32 and 6h bits per package, access time of 100-200 ns, and a cycle
of 1 microsecond or more.

In developing the YeS EVH-Z, integrated circuit storage units have received further
development and extensive application as memories for various purposes, which is
due primarily to the improvement in characteristics of memory microciruits.

For the most part, integrated circuits (10) with a storage capacity of AR and 16K
bits have found application in Unified System main storage units. Storage 16's
with information capacity of 4K bits have an access time of 200 ns and a cycle

time of 400 ns. The 16K-bit storage IC's have an access time of 250 ns and cycle
thee of 400 ns. These storage 10's are the dynamic type, the essential shortcoming
of which is the necessity of periodic refresh of the stored information to prevent
loss of it. This leads to either the asynchronous mode of main storage operation
with the CPU or to a relative increase (true, insignificant) in main storage cycle
thee. The latter occurs when the standard refresh interval has been provided for

68

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

in the main storage cycle. However, the use of dynamic 10's for storage is war-
ranted by their information capacity, which is several fold greater than that of
static circuits.

In internal storage for Yes EVH-Z processors (microprogram storage, buffer storage,
address matrix, general-purpose registers, etc.), three static, high-speed, ECL
(emitter-coupled logic) type 16's are used: with an information capacity of 66
bits, access time of 15 ns and write time of 10 ns; with an information capacity
of 296 bits, access time of 60 ns and write time of 30 ns; and with an information
capacity of 1026 bits, access time of 50-60 ns and write time of 40 ns.

Storage IC characteristics determine their role in implementing computer storage.
Thus, high-speed IC's with small information capacity are used in developing inter4
nal processor storage. Circuits with high information capacity and slow speed are,
as a rule, used in developing main storage units.

A characteristic feature of all types of IC storage units, in contrast to ferrite
core storage, is their dependence on power, i.e. information in them is lost when
the power supply is interrupted. But the capability of keeping information in
main storage still does not solve all the problems in recovering the computational
process after a power interruption. This is connected with the fact that control
information kept in the internal processor registers is lost when power is inter-
rupted and the operating system cannot continue computations without it. In con-
nection with this, additional measures have be to provided for to preserve infor-
mation in any type of storage. The main ones are:

generation of a signal in advance of a full drop in voltage from power mains to
halt the processor and lockout main storage, as well as to switch to reserve power;

maintenance of electric voltage for the time needed to copy information required
for recovery of the computing process onto external media; and

recovery of control information in a computer after power is switched on that per-
mits continuing execution of a program from the point of interruption or from a
checkpoint.

with the emergence of storage IC's. the possibility emerged for solving the prob-
lem of designing main storage units in a new way. In this case, the storage units
are designed at the level of development of logic assemblies, since the design is
built by employing standard solutions: storage TEZ [standard exchange card];
panels and racks. This also makes it possible to make use of the entire apparatus
for design automation that had been developed earlier to design logic units.

Using semiconductor circuits in main storage units has made it possible to raise
further the information capacity of storage per unit of design volume. The main
storage units made with l6K-IC's developed in a package for the Yes EVM-Z have a
capacity of 8" bytes in the standard rack together with the power supply. Hith
further integration of semiconductor storage circuits, the possibility is emerging
of placing 8H-l6H-byte main storage in one-two standard processor panels.

The storage IC's listed above are not the final composition of circuits. The ef-
fort underway now on developing new microciruits and the results obtained from it

are making it possible to plan on using in the Unified System of Electronic Compu-
ters in the near future storage 10's with information capacity increased several

49

ron OFFICIAL us}: ONLY
FOR OFFICIAL USE ONLY

fold. The development of IC technology practically has no limitations, in connec-
tion with which this direction is very promising for both the Yes EVHoZ and in fur-
ther development of the Unified System. This does not exclude development of
storage elements and units with other physical principles. In the near future, one
should expect development of different types of storage with storage and speed
characteristics better than those available now.

It is necessary to note that the same storage elements, modules and units as a
whole, developed within the framework of the Unified System, are finding applica-

tion in various models, which substantially raises the effectiveness of developing
them.

3.2. Organization of Main Storage

Various means of organizing operation with main storage are used in the various
models of the Yes EVH-Z as a function of their parameters. In the general case,
to reduce the dependence of operation of the CPU and IO channels on the time para-
meters of main storage, and to reduce their mutual effect on each other, the
following facilities are provided for in the structure of the Yes EVH-Z:

high-speed main storage buffer;
channel buffer; and

interleaving of main storage.

Efficiency of Buffer Storage. The main storage buffer has a relatively small ca-
pacity (8K-66K bytes as a function of model throughput) with a short cycle time
(40-100 ns) that permits reference to data at the CPU operating rate. Buffer stor-
age is inaccessible to the programmer in the sense that it is not taken into ac-
count in programming and the programmer need not be aware of its existence. It is
usually placed in the CPU and its operation is supported by hardware control
facilities.

The expediency of introducing buffer storage lies in reducing the effective time
of access to information kept in storage.

Effective access time is defined by the following expression:

Tef - Tb - P + Ta (1 - P)

where Tef is effective access time; Tb is buffer storage cycle time;
T8 is main storage cycle time; and P is the probability of reference to buffer
storage (probability of finding the requested information in buffer storage).

The probability of finding requested information in buffer storage is a function of
its capacity and the size of the data block exchanged between main and buffer stor-
age. The latter parameter, although not so eveident, also affects the average fre-
quency of processing requests from the CPU. For example, if the buffer and main
storage exchange a unit of information (one instruction or one operand), probabili-
ty of reference to main storage declines after the buffer is full just through re-
peated use of the same information in the section of the program located in the
buffer. If the buffer and main storage exchange blocks (several instructions or

50

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

operands), probability of reference to main storage declines even more through the
capability of organizing prefetching in this case. The size of the block exchanged
depends on the specific time parameters of the CPU. buffer and main storage and ‘is
usually selected as equal to 16, 32. 64 or 128 bytes.

Thus, the basic parameters of buffer storage that determine effective time of ac-

cess to main storage are capacity, cycle time and size of data block exchanged
between main storage and the buffer.

Since cycle time is a constant quantity determined by storage element speed, the
effectiveness of using buffer storage in many respects depends on the proper
selection of its capacity and size of the block exchanged.

In the ideal case, buffer storage capacity would be such that all information for
which storage references are made is located in buffer storage. In this case. pro-
bability of reference to buffer storage is one and effative time of access to main
storage equals buffer storage cycle time. But in an actual system. probability of
reference to buffer storage does not equal one and varies as a function of buffer
storage parameters. while adhering to a law close to the exponential. Hith any ex-
change block size, probability of reference to buffer storage increases as its ca-
pacity increases. With a given buffer storage. capacity, as exchange block size in-
creases, probability of reference to buffer storage increases at first, but than
declines since the number of independent data blocks that can_ be placed in buffer
storage becomes too small. Buffer storage capacity has the strongest effect on
this relationship. Large-capacity buffer storage provides the highest frequency of
processing of CPU requests even with large sizes of the exchange block, while small
capacity buffer storage completely loses efficiency. To achieve maximum efficiency
in using buffer storage, its parameters must be mutually coordinated. In this
case, probability of reference to buffer storage is 0.89-0.95, i.e. effective time
of access to main storage is about equal to buffer storage cycle time.

   
 
 
      

,l‘ Emir (2) _

won-“(2)

“$570)
’2! Jedi (2)

  

——-—
.—_—.

f__.l._ _ |_ ___.a._.._.__...—.._a_
a a B 12

Insects u. may (3)

Fig. 13. Effective time of access to main storage as a function of buffer
storage capacity
Key:
1. effective access time, ns 3. buffer storage capacity, kilobytes
2. bytes

Shown in fig. 13 is the effective time of access to main storage as a function of
buffer storage capacity for the different sizes of data exchsneg blocks. In this
case, buffer storage cycle time is 160 ns, and main storage cycle time is 2 micro-
seconds. 51

FOR OFFICIAL USE ONLY
FOR OFFICIAL USP. ONLY

Structure of Buffer Storage. This storage is intended for storing individual,

most frequently used sections of a program and for organizing rapid access to it
by the CPU.

mam; cape: input address - buffer-main storage

a 12mm” “or“??? $723)

In“ “ﬁlﬂd
0’7 -5ﬂ (32(7)

        
    
 

lﬂﬂﬂW/AII .
:lllll 5 '

 
 

  

  

as do “"0 activity list

 

main storage

quadrant address
encoder -

Fig. 14. Diagram of location of information in buffer storage

Key:

*
address 1, 2, 3 and 4 ﬂ comparator circuits 1, 2. 3 and lo

Buffer storage structure and a diagram of the location of information in it are
shown in fig. 16. Buffer storage capacity is 8K bytes, exchange block size is 32
bytes, and the main and buffer storage access width is 8 bytes.

The entire extent of main storage is conventionally divided into individual data
blocks along the horizontal and vertical. Data located along the horizontal form

a row of information blocks with a total size of 2048 bytes, while that along the
vertical form columns of information blocks.

The number of rows depends on main storage size. Thus, with 8?! bytes, main storage
has 6096 rows. The number of columns is fixed at 64. As a result of this subdi-
vision, each row has 66 information blocks of main storage. Each block has 32
bytes or four doublewords of data located in main storage by sequential addresses.
Data is exchanged between main and buffer storage by these information blocks.

52
FOR OFFICIAL USE ONLY
NR OFFICIAL USE ONLY

Just as main storage, the buffer is divided into information blocks along the hori-
zontal and vertical. The number of rows in buffer storage is fixed at four and
from now on we shall call them quadrants. Just as main storage, the buffer has 66
columns. Thus, buffer storage has 256 information blocks of 32 bytes each.

Any information block can be placed from main storage into one of the four quad-
rants of the corresponding buffer column. If the buffer has a different capacity
and exchange block size, the number of rows and columns of data blocks may vary.

but the principle of mapping main storage information into the buffer remains the
same.

The buffer storage is managed with an address array and a replacement array. The
address array is divided into columns and quadrants in precisely the same way as
buffer storage. The address array holds the addresses of the main storage informa-
tion blocks that are contained in the buffer storage. Thus. the array holds 256
addresses, one for each buffer storage information block.

The address structure is as follows: the address of the corresponding main storage
row and four presence bits. The address of the column of the address array and the
address of the main storage row recorded in this column uniquely specify the ad-
dress of the information placed in the buffer from main storage. The four presence
bits specify the storage in the buffer of the corresponding doublewords within the
bounds of a specific information block. -

Each column in the address array is assigned a six-bit string from the replacement
array called the activity list. The state of the bits in this list specifies the
information block in the buffer with minimum activity, i.e. the block at the bottom
of the list. This information block is subject to replacement when new data has to
be brought in from main storage.

In accordance with the division of main and buffer storage into rows, quadrants and

columns, the 24-bit address used to reference main storage is conventionally
divided into four fields (table 6).

 

Table 6
Field Address
Number Bits Function
1 0-12 specify main storage row address
2 13-18 specify address of column of the address array, buffer and main
storage
3 19-20 specify the number of the doubleword within the bounds of the

32-byte information block
a 21-23 specify the number of the byte within the doubleword

The process of information block exchange between main and buffer storage occurs
the following way.

When the CPU requests a unit of data from main storage. the address of the column
(bits 13-18) of the address array is used in a simultaneous reading of the

$3
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

corresponding four main storage row addresses (one from each quadrant). These
addresses are compared to the main storage row address specified by the reference
address (bits 0-12). If there is no match, this means the requested information
block is not in the buffer and must be read from main storage; In this case, four
logical blocks of storage are sent sequentially at the rate of the machine cycle
(the principle of interleaving of storage is used) and a doubleword of data is se-
lected from each block. The entire group (information block) is put into the buf-
fer, and the doubleword specified by bits 19-20 of the reference address is also
sent to the CPU. The information block read from main storage is put into the buf-
fer storage column specified by bits 13-18 of the reference address.

If the requested information is in the buffer (a match occurred), the doubleword of
data is fetched from the buffer and sent to the CPU. In the process, the address
of the buffer storage cell is specified the following way: the quadrant address is
specified by the signal from the corresponding comparator circuit, the column ad-
dress by bits 13-18 and the doubleword address by bits 19-20 of the reference
address.

If the CPU is referenced to store data in main storage in an information block that
is in the buffer, both main and buffer storage are updated accordingly.

Buffer storage contains an exact copy of the data put into the corresponding main
storage information blocks. Consequently, if an 10 channel stores data in a main
storage location that contains data held in the buffer, then the buffer information
block is either updated too or deleted. In this case, the following interaction
between the 10 channels and buffer storage is provided for. The channels fetch
information from main storage, and in the process the status of the address array
and activity list is not changed.

when data is stored in main storage through the 10 channels. the information block
referenced by the channel may be in main storage or may be located in the buffer.

In the first case, no change is made to the address array, activity list or buffer

contents. In the second, the presence bits for the corresponding information block
in the address array are set to zero (reset), and the activity list is adjusted to

reflect minimum activity for this block.

A second algorithm for operation with buffer storage is possible. It differs from
the first in that information is stored in main storage somwhat differently.

If the CPU stores data in main storage and in the process the information block re-
quired is in the buffer. only the contents of buffer storage are changed. The in-
formation is stored in main storage by blocks either when the blocks with the least
activity are replaced, or by a special algorithm at times when main storage is free
of servicing channel and CPU requests.

Since main storage cycle time is several-fold longer than buffer storage cycle time
and according to statistics, store instructions make up a considerable portion of
programs (15 percent according to Gibson 1), organization of operation with buffer
storage under the second algorithm yields a substantial increase in CPU throughput.
This is its chief advantage.

56
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Of course, under the second algorithm, IO channels must use the entire control
mechanism to store data and store/fetch to/from the buffer storage is the required
information block is there. The same occurs in a multiprocessor system with a com—
mon extent of main storage, when one of the processors operates with data placed

in buffer storage by another processor.

Thus, requests from processors and channels coincide at the buffer storage level,
which leads to an increase in the number of conflicts between them and the overall
throughput of the storage system is reduced. This is the main shortcoming in
organizing operation with buffer storage by the second algorithm.

Which of the two algorithms is more efficient is resolved in a specific design
based on the parameters of CPU throughput, IO system throughput, main and buffer

storage cycle times, and equipment cost parameters. Both algorithms are used in
designing the Unified System computers.

Storage Interleaving. Main storage is subdivided into individual logical blocks
that can be addressed and managed independently of each other. The principle of
storage interleaving, also called the address interlacing method, consists of ad-
dressing logical blocks of storage in such a way that contiguous addressed cells
are located in different logical blocks.

Prior to the introduction of buffer storage into the CPU structure, storage inter-
leaving was perhaps the only organizational means permitting a reduction in effec-
tive time of access to main storage. This decrease is especially noticeable for
linear sections of programs with little logical dependency of instructions (connec-
tivity of instructions). with the introduction of buffer storage, the effective-
ness of the method was preserved with the grouped exchange (data blocks) between
main and buffer storage.

The order of location of addresses in logical storage blocks with the degree of
interleaving is shown in table 7.

Table 7 The effective time of access to main stor-
age during operation of the interleaving
Logical mechanism is reduced because of the over-
BIock lapping in time of operation of several
Number address of Storage Cells logical blocks of storage. In fact,

if each consecutive block of storage
is sent after the end of the operation

 

4 a :44 324. gall of the preceding one (operation without
3 2 nla '2nl2 .1112 interleaving). then time I for reading
' ‘ ° ' ' a block of information of n words is

' I , I defined by the expression:

' '. '. ‘. T-(n-1)Tc+'r.
n n-I 2n—l .‘h—l An—l ‘

where Tc is main storage cycle time;

and T. is main storage access time.

If each block of storage is sent at the rate of one machine clock pulse (operation
in the interleaving mode). then this time is:

55

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

T-T‘.+(n-1)Tm,
where T; is the CPU clock pulse time.

It is evident that 1; <3: T; and time of access to main storage in the second case
is less than in the first.

The selection of the numbcr of logical blocks of storage is governed by the time
relationships between the CPU and main storage with regard to that spent on control.
As a rule, used in Unified System computers are two-way, four-way and eight-way
interleaving of storage with an access width of a and 8 bytes.

Conflicts in Referencing Main Storage. Conflicts in referencing main storage are
a factor that reduces the effective time of access to data. The problem of reduc-
ing conflicts in referencing main storage became especially severe in third-genera-
tion machines that use a CPU with several levels of overlap and a large number of
high-speed IO channels. In the process, each CPU overlap level may have its own
independent access to main storage. Thus, at the level of storage control, the
conflict between both CPU and channel requests and within groups of requests from
these units is resolved. The mutual effect of these requests leads to delay in
servicing individual requests in accessing storage. Simulation results show that
under certain conditions, this delay is very significant and is 20-23 percent of
the effective time of access.

Conflicts can be reduced both through improving main storage time parameters and
development of methods discussed above and selecting control strategy. By control
strategy is emant determination of priorities for processing of requests in the
storage control unit and organization of servicing them.

A structural diagram of a storage control unit and its interaction with the CPU,
channels and main storage is shown in fig. 15. Using this drawing, let us consider
the structural solutions employed in the Yes EVH-Z that make it possible to reduce
conflicts in accessing main storage by selecting a certain control strategy.

In the Unified System of Computers, based on system operating efficiency in access-
ing main storage, 10 channels have a higher priority than the CPU. Joe of main
buffer storage in itself reduces the probability of hardware interaction in proces-
sing streams of information from channels and the CPU as a result of separation of
these streams. Also, buffer storage permits reducing the effective time of access
to main storage by the CPU and thereby reduces the average time main storage is
engaged in processing a request. A channel buffer (Ex) is used for the very same
purposes in channel accesses to main storage.

The channel buffer unit is designed for rapid communication between to channels and
main storage. For each channel, this unit contains a register group that forms the
channel storage buffer (BPK) for holding data, addresses and control characters.
The number of registers in a group is equal to the degree of main storage inter-
leaving or a multiple of it. Stored in them is information from channels prior to
transmission of it to main storage in the write moss, or information read from main
storage prior to sending it to the channels in the read mode. In the first case,
the possibility emerges of rapid transfer of data from channels with main storage,

56

FOR‘OFFKJAL.USE¢0NLY
Fig. 15.

Key:
1.

(2) “W'
(macaw,

(4)12 WI

(5) A” "W:

FOR OFFIUAI. USE ONLY

Own-lean} Mu msﬁwr (1)

 

Diagram of Storage Control Unit

SlZK-byte physical block of main 12.

storage

N4 8M bytes

N3 6" bytes

N2 4H bytes

N1 2“ bytes

1 logical block Pl
2 logical block P2
8 bytes

3 logical block P3
6 logical block P6
0? [main storage]

13.
1k.
15.
16.
17.
18.
19.
20.

57

. \

  

10 channels-
10 device
AP 1, 2, 3 and a

AP [storage adapter]

APU

BK [channel buffer]

BPK [channel buffer storage]
08 [buffer storage control]
8? [buffer storage]

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

irrespective of its engagement, and rapid release of the channel for execution of
other operations. In the second case, main storage is rapidly released during a
data exchange with a channel. In the channel write mode, data stored in the regis-
ters are sent to main storage, operating in the address interleaving mode, sequen-
tially in each machine clock pulse. In the read mode, data are also read from main
storage sequentially in each machine clock pulse and stored in the register group
for the corresponding channel. Thus, in the write mode, prior to all registers be-
ing filled, the IO channels operate only with their own buffer storage, without re-
ferencing main storage. In the read mode, the first channel reference is made to
main storage, but the following ones are made only to the register group of the
channel buffer storage. The use of channel buffer storage is efficient for the
burst mode since in this mode information is transferred in large blocks and in the
process, reference to storage, as a rule, is made by sequential addressee. Thus,
the channel buffer enables grouped exchange of data between main storage and the

I0 channels.

Since channel and CPU references to storage are independent. a conflict between
them is possible only when both the channel buffer and CPU require at the same
time (in one storage cycle) the same apparatus, in the case discussed, the main
storage or address array. To efficiently resolve such situations, the buffer stor-
age control unit provides for two address processing paths and two priority
schemes: one for accessing the address array, and one for accessing main storage.

In the first priority scheme, conflict situations are resolved between accesses to
the address array by the CPU (in determining whether the data required are in buf-
fer storage) and by the channel buffer (in a write to delete an information block
being changed in buffer storage). In the process, the CPU reference has the
highest priority.

In the second priority scheme, data situations are resolved between channel buffer
and CPU requests for access to main storage. The CPU always accesses main storage
during a write, but during a read, only in those cases when the required informa-
tion block has to fetched from main storage. In this case, channel buffer
requests have the highest priority.

In reading information, a request comes from the channel buffer only for the
priority schemes for referencing main storage. During a write, the buffer storage
control unit gets two requests from the channel buffer: one for the prioirty
scheme for main storage, and the other for the priority scheme for the address
array. Both these requests are processed independently of each other. Since re-
quests from the channel buffer are grouped, the entire information block is ana-
lyzed at once instead of individual data words, and this requires only one

machine clock pulse.

3.3. Raising Reliability of Data Storage

The increase in size of main storage and complication of its organization has re-
quired taking anumber of measures to raise the validity of operating reliability
data obtained from storage. In the Yes EVM-Z, these measures include:

use of checking codes to eliminate single errors and detect double ones; and

the application of special structural solutions aimed at maintaining computer

58

FOR OFFICIAL USE ONLY
FOR OFFlﬂM. USE ONLY

Check hits are formed by calculating the parity of sun of one. for certain aroupe
of information but. The required
condition:

syndrome 1- derived by can
check bu:- computed by the

 

59

FOR OFFICIAL USE ONLY
FOR OFFICIAL USl-I ONLY

               

 

mamas
we»
(landmine!
Bits _
m: BEBE-EWEiﬁ-"ﬁﬁ m
1. m, nmmmaam-l
number EEIIIIIIZIIIIII IIIEIII
2. number of -DI I...
bit-1n E E an alarm
byte m .5.-
lal a I! um
I II a gala-
ﬂllll m I!
ﬂﬂll E mama
"n a: -- a
- ..§§"2§
E III] I la
unuggmmnm ﬂ
lllﬂll III. .-
nnnunuﬁmmanmu
IIIIIIII-I III-I-

             

Fig. 17. Decoding matrix

           

 

If the syndrome points to the empty squares in the decoding matrix, there is a

multiple error. In the check.

A:—

computation of this relation is made:

2: ((1, +0 I.) mml 2 -I- can

imm, I. 2, 4, 8. l6..12|

Analysis is performed in accordance with table 8.

 

Table 8
Syndrome
Status _A_ Oonc lue ion
zeros 0 no error
i O 1 single error
i 0 0 double error
zeros 1

Irregulerity in bits 0 and 32 of the coding

matrix permits distinguishing errors in bits
0, 32, C0 end C32.

With a multiple error, date in main etorsge
is regenerated for further program process-
ing.

Facilities for checking data of main stor-

error in COR bit age are implemented in the storage adapter

unit (AP) (see fig. 15). Aetoregeadapter
ie incorporated in the CPU structure

60
FOI.0FFK3AI.USE(NNLY
FOR OFFICIAL USE ONLY

because the blocks of main storage are essentially a group of storage modules
without general address registers and registers for information being written or
read and also do not have facilities for generating and checking the correctness
of check bits. These functions are imposed on the storage adapters.

A storage adapter unit has its own group of registers for the address of data
being written or read for each logical block of main storage. Address and date
buses are common for ellcoursss of a logical block of main storage. Checking
facilities located in the storage adapter are common for all logical blocks of
main storage.

This solution has enabled simplifying the structure of the main storage unit and
the CPU-storage communication interface. This made it possible to standardize it
which enabled using the same storage units in various models. In addition, the
specific volume of equipment was reduced while the capacity of main storage was
increased.

In the Unified System computers, main storage capacity for each model is estab-
lished in accordance with its throughput and ranges from the minimum, defined as a
rule by the standard complete set of the basic version of the computer, to the max-
imum, determined by the physical connection capability. The capability of increas-
ing main storage capacity is supported by the modularity of design at the level of
blocks of storage and units. In main storage made with integrated circuits, main
storage capacity can be increased at the level of storage TEZ's [standard exchange
cards .

For an example, let us discuss in more detail the Yes-3206 main storage unit for
the Yes-1060 computer. The basic scheme for dividing the Yes-3206 Iain storage
unit into individual modules and the principle of control of them coincide with
the diagram shown in fig. 15.

The minimum main storage capacity for the Yes-1060 computer is 2" bytes and con-
sists of two Yes-3206 units. Design of the Yes-3206 unit is based on the modular
principle, expressed in that the total capacity of lOZhK bytes is divided into two
identical storage blocks, each with a capacity of 512K bytes. Each storage block
is independent within the unit and has autonomous interface and control. In turn,
each storage block uses storage modules as magnetic storage. The information ca-
pacity of each storage module is 66K bytes. A storage block is made up of eight
storage modules, and a unit has 16. Storage modules are structurally complete,
replaceable and interchangeable units

Maximum main storage capacity for the Yes-1060 is 8M bytes and is obtained by
connecting additional Yes-3206 units. For this purpose, each unit has circuits

for relaying input and output signals from the CPU. Capacity is increased in 2H-
byte increments by serial connection of storage blocks. Thus, storage blocks con-
nected by cenmmn address, informational and control buses make up a logical storage
block. The number of storage blocks within a logical block is defined by the com-
plete set of storage in the computer and may vary from one to four. Selection of
one of the four storage blocks within the bounds of a logical block occurs by di-
rect feed of control signals to it from the CPU through radial lines. The address
and information are fed through main lines. At each moment of time, one of the
four storage blocks is operating in a logical block. Storage blocks are addressed
by the horizontalcourse number (NI-N4) and the logical storage block number (Pl-Pb).

61

FOI:OFFN]AI.USE(MVLY
FOR OFFICIAL USE ONLY

Facilities for reconfiguring main storage in event a block malfunctions are pro-
vided on the computer control console. Reconfiguration operations depend on stor-
age capacity. If total main storage capacity is more than 2“ bytes, when one of
the blocks malfunctions, an entire course is disconnected and reconfigured into
the area of high-order addresses. Disconnection of an entire course is required
to maintain the mode of storage interleaving. If storage capacity is the minimum,
then when one block malfunctions, the interleaving mode is removed automatically
and the faulty block is reconfigured into the area of high-order addresses.

The control console also provides facilities for disconnecting buffer storage if
it malfunctions, and in this event, operation continues with main storage.

Modularity of design of main storage units combined with special structural solutions
permits maintaining computer serviceability when modules fail at various levels.

In the general case, these facilities permit achieving an increase in reliability,
hmprovement in interchangeability and repairability, and enhancement of adaptability
to manufacture and debugging of main storage.

Chapter h. Development of Input/Output System
4.1. Organization and Logic Structure of Input/Output Channels

In third-generation machines, as a result of optimization of 10 functions, the need
arose for developing specialized processors that enable data exchange between 10
devices, and also external storage devices, and main storage in parallel with pro-
cessing of data in the processor.

The hardware and software that facilitate exchanges between main storage and one
external device make up a subchannel. The aggregate of subchannels form an 10
channel.

The different modes for transferring information and ways of organizing interaction
between channels and the CPU on the one hand, and peripherals on the other, deter-
mine the 10 processor channel.

Three types of channels can be connected in the Yes EVH-Z: selector, byte-multi-
plexer and block-multiplexer.

A selector channel is intended for data exchange with high-speed external storgae
units in the burst mode. In connection with this, the logical basis of a selector
channel is formed by a separate subchannel that executes one channel program at a
time, by strictly regulating the end of the preceding 10 procedure before starting
the next.

The byte-multiplexer channel effects simultaneous execution of several channel pro-
grams for several medium or low-speod peripherals. The main mode of operation is
multiplex, although in many cases, the burst mode of operation of the multiplexer
channel is provided for. The logical basis of a multiplexer channel is formed by
the set of multiple subchannels used for data exchange with various peripherals in
the time-sharing mode. For this purpose, there are individual equipment and means
of interface for each subchannel or common facilities for a group of subchannels.
A new type of channel, the block-multiplexer, has been introduced in the Yes EVH-Z.

62

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

It is intended for organization of parallel operation of several high-speed peri-
pherals over one information line. This channel has the properties of both the
selector and the multiplexer channels of the Yes BVH-l.

The processor initiates operation of a channel program using 10 operations by
specifying the operation code, the channel number and the address of the peripheral
with which data is to be exchanged. In addition, the address of the first connmnd
in the channel program in main storage is specified. The channel program estab-
lishes the type of operation assigned and determines the order of its execution.
Fetched from main storage for this purpose is a series of channel command words
[CCU] containing the operation code of the channel command, the beginning address
of the main storage block allocated for the exchange, the amount of data to be ex-
changed and the channel modes of operation.

The function of the CCH bite is given in table 9.
Table 9

Bit
Number Bit Function

 

 

0-7 channel command code.
There are six 10 operations:
READ. HRITE, READ BACKUARD, SENSE, CONTROL and TRANSFER IN CHANNEL

8-31 address of the first byte of information in main storage

32-36 modification flags that permit changing the sequence of execution of a
channel program

32 chain-data flag. It causes fetching of the next CC“ if in the preceding
CCU, the information byte counter becomes equal to zero. The operation
code in the new CC" is ignored and execution of the operation begun earlier
continues

33 chain-command flag. It causes the next CC" to be fetched and executed
after completion of execution of the operation specified in the current CC".

34 suppress-length-indication flag. It causes suppression of indication of
incorrect length that indicates that the data format required by the peri-
pheral does not match the number of data bytes specified by the CC“

35 skip flag. Specifies suppression of transfer of information to storage
during a READ, READ BACKHARD or SENSE operation
36 program-controlled-interruption flag. Causes the channel to generate an

interruption condition
37 indirect data address flag

38-39 must be zero, otherwise the system specifies an error in the channel pro-
gram

“0-47 not used
68-63 specifies number of bytes to be exchanged

63
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In addition to the instructions START lIO, TEST 1/0 and TEST CHANNEL, the follow-
ing instructions are also used in the Yes EVH-Z: START IIO FAST RELEASE, CLEAR IIO,
HALT DEVICE and STORE CHANNEL ID.

These IO instructions cannot be used in a problem program since they are privileged
and executed only when the processor is in the supervisor state. For communication
between the IO supervisor and a specific channel program, there are two fixed loca-
tions of main storage with addresses 72 and 64, in the directly addressable area of
processor storage, that contain, respectively, the channel address word [CAR] and
the channel status word [65"]. The function of the CAM bits is given in table 10.

 

 

Table 10
Bits Function
0-3 storage protection key. Intended to protect the area allocated for the

IO operation
6-7 zeros, otherwise the system specifies an error in the channel program
8-28 address of first CCU in the channel program

By the CA", the channel obtains additional information on the location of the chan-
nel program in main storage and the keys for protection of the exchange blocks,
while the processor is informed by the CSH on the status of the channel and peri-
pheral as well as on the results of an 10 instruction execution.

The states of the channel, subchannel and peripheralare reflected by a combination
of the following signals: available, interruption pending, working or not opera-
tional. These states change continuously in the process of executing a channel pro-
gram and when necessary are stored by cqnmand in location 64 of main storage in the
form of the CS" just as are special situations that occur in execution of IO opera-
tions. As a rule, the CS" is stored in main storage at the end of execution of an
I0 operation, but in excpetional cases, the store may be effected by an interrup-
tion in the process of executing an to operation. The procedure for processing
interruptions that may occur simultaneously in different peripherals is defined by
the channel priority schemes that provide for sequential processing of all inter-
rupt requests stored to this moment in the peripherals and subchannels. Tb avoid
loss of information on the IO state, the operation of all channels must be masked
before the end of analysis of the contents of the CS".

The states of a channel and peripheral that occur during execution of IO operations
become clear when the CS" bit functions given in table 11 are examined.

The designation of the CSH bits given in table 11 is modified by the equipment used
and the specific causes that occurred during execution of the IO operation and
which caused storage of the CS“.

The principles of IO operations selected in the Unified System have determined the
logical structure of the channels, each of which must perform the following
functions:

accept and decode IO instructions from the processor;

establish communication with the external device (VU) specified by an 10 instruction;

64

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 11. CS" Fields

Bits Funct ion

 

 

0-3 storage protection key, from CA"

4-5 zeros. Flag for unsxecuted logging

6-7 deferred condition code

8-31 address of following OCH, differing from current CCU by a byte
32-39 external device status byte

32 attention

33 status modifer

34 Wt! [control unit] end
35 busy

36 channel end

37 device end
38 unit check

39 unit exception

40-47 channel status byte

40 program-controlled interruption
41 incorrect length

42 program check

43 protection check

44 data check

45 control check

46 interface check

47 data chaining check
48-63 residual count for the last CCU used

fetch the channel program from main storage;

decode channel conlnands, test then for validity and execute the operations
specified by them;

accept/send control signals from/to an external device over the 10 interface;

provide for receiving. sending. checking, counting and storing data during an
exchange between main storage and an external device;

generate signals on channel status, receive and store signals on peripheral status,
form the CSH and store it in location 64 of main storage; and

accept interrupt requests from an external device. organize them and send them to
the processor.

4.2. Development of Principles of Input/Output Operations

To enable operation of the block-aultiplexer channel and to raise the effective
data transmission rate, the Yes m-z offers new capabilities:

the mode of multiplexing blocks of data;
additional 10 instructions;

channel counsnd retry;

expanded IO interface; and

indirect data addressing.

65
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Data Blo.k Multiplexing Mode. From a programmer's viewpoint, the block-multiplexer
channel is an independent device having several aubchannels and operating in paral-
lel with the processor program. The mode of operation of this channel depends on
the state of the multiplexing control bit (bit 0 of control register 0 in the CPU).
If the value fo this bit equals zero when a START 1/0 instruction is received, the
block-multiplexer channel will operate in the selector mode, and in this case, it

is functionally equivalent to the selector channel (multiplexing inhibited). If the
value of this bit is one when a START IlO instruction is received, the block-multi-
plexer channel will execute the operation requested by a peripheral on the basis of
block multiplexing simultaneously with operations requested by other peripherals
(multiplexing allowed).

The selector mode or block-multiplexing mode is maintained by the channel for the
entire time of execution of the channel program. In the block-multiplexing mode,
during execution of a channel operation by a program not associated with data trans-
fer, the channel may be switched to execution of the data transfer operation for
another channel program. Such switching may occur between data blocks, if command
chaining is specified in the channel program or the channel command retry procedure
is being executed, since data transfer within the bounds of a block is effected by
the channel in the burst mode.

Fig. 18 shows the timing diagram for the sequence of operation of the block-multi-
plexer channel in the data block multiplexing mode.

If a channel receives a channel-end signal from a peripheral while executing a
channel program in the command chaining mode, it stops execution of this program
without waiting for the arrival of the device-end signal, specifying thereby readi-
ness for execution of an 10 operation with another peripheral. The channel keeps
the status of the discontinued operation in subchannel storage in the form of

a unit control word (UCH).

When the disconnected external device is ready to operate with the channel, it tries
to communicate with the channel and again make use of its resources. If the channel
is free, the value of the UCH is read from subchannel storage and the channel re-
sumes execution of the interrupted channel program. But if the channel is busy,

the external device must wait until the channel is free.

The efficiency of operation of the block-multiplexer channel in the block mode is
achieved only with the support of an external device in this mode.

Additional 10 Instructions. Tb raise the efficiency of use of the I0 system in
the Yes EVHwZ, additional 10 instructions have been provided (table 12).

 

 

Table 12 Operation
Name Hnemonic Coda
START Io FAST RELEASE SIOF 9C01
CLEAR IO CLRIO 9001
HALT DEVICE 'HDV 9301
STORE CHANNEL [0 STIDC 3203

66
INJR OFT!(]AI.USE1(N§LY
FOR OFFICIAL USE ONLY

amuhmnuunnuw-awmiauraw

    
  
 

 
 
 

ﬂundbwvaauw

I'WMM
dmwua4blsw

, ”NM M W!

       
     
 
 

  

      

mgr: “my”
;( 1 2 ).m ~——"Jamaw~m

’II%:NF~ '9’

 
   
 

(10)

I
I impala/m - I (5) means

Immﬂﬂd (5) III. W 'l I MN "I,” Ml MU WW‘
9 «m I I «cuts 92 not TM ' .m yum Haﬁ—

m mm . mm m ! 2.2% '~ 0-

. mm MI I yer :r- . mn— n:

(8) I (is) I am
(3) -I .Jmkswunm an
I |

”MN WWII

“Flu! man .‘I (15)
mum may Macadam: my nu -
'0 MW-

. _
mm an no- :uamwvsrnuw reﬁ_________
:—+-—— "a,“ m W ”an In

 

(1) , ' (6) 3m 59/ g F—"__gg__ '2"—"'
'(11) ' (13)

Fig. 18. Timing diagram of sequence of operation of block-multiplexer channel in
the mode of block-multiplexing of data

Key:
1. start of operation for external 9. command chaining specified for £02
device [ED] 1 by $10 instruction 10. resumption of channel program for

2. transfer of data block for EDl EDZ upon device-end signal
3. interruption of channel program 11. generation of device-end signal for
for EDI by channel-end signal EDI
a. command chaining specified for 12. channel busy
£01 13. end of channel program and genera-
5. channel free tion of interrupt condition for £02
6. start of operation for E02 by 16. resumption of channel program for
$10 [START 1’0] instruction 301 upon device-end signal
7. transfer of data block for £02 15. end of channel program and genera-
8. interruption of channel program tion of interrupt condition for EDI

for EDZ by channel-end signal

The instruction START I/O FAST RELEASE starts an 10 operation in the external de-
vice addressed. If the value of the multiplexing control bit is 0, the channel
executes this instruction just like a START I/O instruction.

If the value of the multiplexing control bit is 1, then the channel fetches the CA"
from main storage location 72 and immediately releases the processor, rather than
after completion of the device-selection procedure as is done when the instruction
START IIO is executed. At the same time, the data block-multiplexing mode is
started in the block-multiplexer channel. In parallel with processor operation,
the channel performs the device-selection procedure and starts the I0 operation.

The 10 operation is not initiated when the channel or device detects errors in
executing the START I/O FAST RELEASE instruction. In this case, the status of the
channel and device, as well as the deferred condition coda (bits 6 and 7), are

67
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

indicated in the CS" which is stored during the next IO interruption. Bits 6 and 7
in the CS" indicate whether conditions have been encountered subsequent to the set-
ting of a condition code 0 for START 1/0 FAST RELEASE that would have caused a dif-
ferent condition code setting for START I/O.

Table 13 shows the possible setting of these bits and their meanings.

 

 

Thble 13
Bit 6 Bit 7 ‘ Meaning
0 0 normal 10 interruption
0 1 deferred condition code is 1
l 0 not used
1 1 deferred condition code is 3

The instruction START 1/0 FAST RELEASE has the advantage over START 1/0 that the
processor can be released sooner for other work. A disadvantage, however, is that
if a deferred condition code is presented, the resultant CPU execution time may be
greater than that required in executing START 1/0.

Hhen operating in the mode of block multiplexing of data, the block-multiplexer
channel enables simultaneous execution of several channel programs and [0 operations.

Each channel program requires its own subchannel. If several channel programs
using all available subchannels are being executed in the block-multiplexer channel,
then the next START I/O FAST RELEASE instruction will start an 10 operation and
switch the channel to the selector mode. The channel selector mode is maintained
until the end of execution of the channel program. After the end of execution of
the channel program, the channel is switched to the node of block multiplexing of
data and continues the 10 operations begun earlier with other devices.

Execution of the CLEAR I/O instruction depends on the value of the multiplexing con-
trol bit.

when the multiplexing control bit is 0, this instruction is executed just like the
TEST [/0 instruction. If this bit equals 1, then the CLEAR 1/0 function causes

the current operation with the addressed device to be discontinued, the stste of
the operation at the time of the discontinuation to be indicated in the stored CS",
and the subchannel to be switched to the available state. After completion of
these operations, the processor is released and the condition code is set to l.

The CLEAR I/O instruction will switch a aubchannel to the available state consider-
ably faster than the “ALT l/0 instruction. To free a subchannel after completion
of a HALT 1/0 instruction, the processor has to process the 10 interruption from

the given aubchannel.

The HALT DEVICE instruction causes the current operation at the addressed 10 device
to be terminated. with this instruction, a channel does not halt burst operation
with a device other than the one addressed (in contrast to the “ALT 1/0 instruction).

68

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

After termination of the current operation in the addressed device, the channel is
switched to the interruption pending state, and to free the subchannel, the pro-
cessor must process the 10 interruption.

The instruction STORE CHANNEL ID causes information describing the addressed chan-
nel (channel type, channel model, maximum length of the extended logout) to be
stored in locations 168-171. The channel stores this information in main storage.
This information is used later by the program to allocate storage for the extended
logout as well as during channel error-recovery software operation.

Channel Command Retry. The Yes EVE-2 has the capability of channel command retry.
Command retry is a function of the channel and device that permits retrying the
command without requiring an 10 interruption. Causand retry is initiated by the
device presenting either of two device status-bit combinations by means of a
special 10 interface sequence.

Fig. 19 shows the algorithm for using the command retry procedure in the channel
and device.

If s retry can be performed imnndietely, the device issues these indicators in the
status byte: channel end, unit check, status modifier and device end. After re-
ceiving the status byte with these flags. the channel starts executing the command
retry procedure. During the command retry, operations in the channel are similar
to those performed for contend chaining.

If the device end flag was not put into the device status byte, then the channel is
just adjusted for command retry. After a statue byte with the device-end flag is
received, the channel will start execution of the command retry procedure. If the
V0 [external device] presents a status byte with the device-end and status-modifier
flags, then commmnd retry is suppressed and when necessary, either command chaining
is continued or an 10 interruption condition is generated.

Expanded [0 Interface. Compared to the Yes EVH-l, IO interface capabilities have
been considerably expanded in the Yes EVH-Z. To raise IO interface throughput.
parallel two-byte transfer of date has been introduced. Two sets of data buses
have been provided for this: channel buses (18 lines) and subscriber buses (18
lines). The additional channel lines (channel marker) and two additional subscrib-
er lines (subscriber marker) specify the presence of data on these buses.

For compatibility with the Yes EVH-l interface, the channel and subscriber buses
are divided into two sets: the first sets of buses (with 9 lines each) are used
in both the first and second phases of the Unified System, while the second sets
of buses (with 9 lines each) and the marker lines can be used only in the Yes EVE-2.

Fig. 20 shows the capabilities of operation of the expanded two-byte IO interface
in the data transfer mode during reading (a) and writing (b).

Accelerated data transfer has been provided for in the Yes EVE-2 10 interface. For
this, two lines (DAN-A and DAN-K) have been added that accompany the corresponding

data on the buses and are shuilar to lines INF—A and INF-K. The DAN-A line signal

may be present in the 10 interface while the INF-A line signal is cut-off and vice

versa.

69

e
\

FOR OFTWC]AI.USE¢DNLY
Fig. 19.

Key:

1.

2.

3.

be

FOR OFFICIAL USE ONLY

 

Algorithm for using the command retry

channel progra-

CCHI: operation code/data address]
To! [chain-command flag]
- 1/ count

CCHZ: operation codeldata address]

chain-command flag - 0/
count
status byte received from device
by channel after execution of
CCHI and CCUZ commands
is coanand retry procedure
required? (channel-end, unit-check,
status-modifer and subscriber sar-
ker 0 signals are present simul-
taneously in the status byte)
execution of command chaining for
CCHI or generation of 10 interrupt
condition for CCHZ

70

S.
6.
7.
8.
9.
10.
11.
12.

15.

procedure in a channel and device

immediate retry? (device-end signal
is presented in status byte)

retry of preceding CCHl or CCHZ
cunnsnds

wait for next status byte from de-
vice vith device-end signal

cancel retry? (status-modiﬁer signal
is present in status byte)

cancel retry

execution of command chain possible?
issue next command under command
chaining (CCHZ)

continue 10 operation under control
of CCHZ

generate IO interruption condition

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

 

 
  
 
      

 
    
  

Ef'
HIT}

l

"h

1
III

.E].
rJ-

iﬂ

q

      
 
   

"If:
.JII

iii;
:1:

d

 

I
pun

   

Fig. 20. Capabilitiee of expanded two-byte to interface in the node of data
tranefer during reading (a) and writing (b)

Key:
1. hue-K0 -- firet eet of channel 6. marker-A0 -- eubecriber Iarker line
bueeo 7. bus-A1 -- aecond eet of eubacriber
2. marker-K0 -- channel marker line bueee
3. hue-Kl -- eecond eet of channel 8. marker-A1 -- aubecriber narker line
bueee 9. INF-A -- eignalo accompanying data
k. marker-K1 -- channel marker line on eubecriber bueee
S. bus-A0 -- first set of oubecriber 10. INF-K -- aignalo accompanying data
buses on channel buaee '
(1)1004

  

(2) "'4

(3) gwl

(6) “"

(5)}unqv ﬂ

(6)u_-__w-y_-___.‘__.:._‘_I_L1_l_
- a b

Fig. 21. Interaction of signals INF-A, DAN-A, INF-K and DAN-K in node of date
transfer during reading (a) and writing (b)

Key:
1. INF-A a. DAN-K -- oignale accompanying data
2. INF-K on channel bueoe
3. DAN-A -- eignale accompanying 5. bus-AD
data on aubacriber bueee 6. hue-K0
71

IWJRIJFFNJA1.USE¢JNLY
FOR OI-‘ﬂCIAL USE ONLY

The introduction of the additional lines,
DAN-A and DAR-K, permits the IO interface
to provide throughput to 1.5“ bytes/sec.
for one-byte data transfer, and to 3H
bytes/sec. for two-byte.

Fig. 21 shows the interaction of the sig-
nals INF-A, DAN-A, INF-K and DAN-K in

the node of data transfer during reading
(a) and writing (b).

In the Yes EVH-Z, all coaumnication lines
in the I0 interface are structurally com-
bined in four cables. of which two are
fully compatible with Yes EVH-l IO inter-
face cebles, which permits connecting

Yes EVE-1 external devices to Yes EVH-Z
IO channels and vice versa (fig. 22).

Connectors Al-Ah are used both for con-
necting Yes EVH-l external devices and
for connecting Yes EVM-Z external de-
vices (one-byte interface). Connectors
AS-Aa are used for connecting only Yes
BVH-Z devices (too-byte interface).
Blocks of matching resistors are shown

at the connectors marked with an asterisk.

Table I“ gives the 10 interface connector
designations and their function.

 

 

Table 16
fig. 22. Diagram of connection of
Conventional external devices to IO channel
Connector :
Designation Function 1. VUl -- Yes EVH-l external device
A1 Intended for connection to g‘ V02 " Yes EVH-Z external d'V1c'
. Yes EVH-Z IO channel
IO channel or preceding * A3 Ah A7 A3 - blocks of
o s o ’
device and for transfer of tchin resistors
data signals (first sets of ma 3
buses)
A2 Intended for connection to 10 channel or preceding device and for trans-
fer of control signals (one-byte and accelerated modes)
A3 Used for connection of next device and for transfer of data signals
(first sets of buses)
A6 Used for connection of next device and for transfer of control signals
(one-byte and accelerated modes)
A5 Intended for connection to 10 channel or preceding device and for trans-
fer of data signals (second sets of buses)
A6 Intended for connection to IO channel or preceding device and for trans-

fer of control signals (two-byte node)

72

FOR<HHHCJAL.USE(NVLY
FOR OFFICIAL USE ONLY

[Continuation of Thble 16]

Conventional
Connection

Designation Function

A7 Used for connecting the next device and for transfer of data signals
(second sets of buses)

AB Intended for connection of next device and for transfer of control
signals (two-byte mode)

Channel Indirect Data Addressing. Channel indirect data addressing [CIDA], a com-
panion facility-to dynamic address translation in the processor, translates data
addresses for 10 operations. It permits a single channel command word [06"] to
control the transmission of data that spans noncontiguous pages in real main
storage.

CIDA is specified by flag bit 37 in the CC" which, when one, indicates that
the data address in the CC" is not used to directly address data. Instead, the
address points to a list of words, called indirect-data-address words (IDAH's), each
of which contains an absolute address designating a data area within a 2,068-byte
block of main storage.

when the indirect data addressing bit in the CC" is one, bits 8-31 of the CC" spe-
cify the location of the first indirect data address (KAD) word to be used for data
transfer for the command. Additional IDAH's, if needed for completing the data
transfer for the CC", are in successive locations in main storage.

The number of IDAH's required for a CC" is determined by the count field of the CC"
and by the data address in the initial IDA".

Each IDAH is used for the transfer of up to 2,048 bytes and can designate any loca-
tion in main storage. Data is then transferred, for read, write, control and sense
conumnds, to br from successively higher storage locations or, for a read backward
command, to successively lower storage locations, until a 2,0hB-byte block boundary
is reached. The control of data transfer is then passed to the next IDA“. The
second and any subsequent IDAU's must specify, depending on the command, the first
or last byte of a 2,048-byte block. Thus, for read and write commands, these
IDAH's will have zeros in bit positions 21-31. For a read backward command, these
IDAH's will have ones in bit positions 21-31.

Except for the unique restrictions on the specification of the data address by the
IDA", all other rules for the data address, such as for protected storage and in-
valid addresses, and the rules for data prefetching, remain the same as when
indirect data addressing is not used.

The format of the IDA" and the significance of its fields are as follows:

 

.. 1 8 ﬂ
1 zeros | date address
73

F08‘0FFNJAI.USE(NVLY
FOR OFFICIAL USE ONLY

Bits 0—7 must contain zeros. Bits 8-31 specify the location of the first byte to be
used in executing the 10 operation. For the first IDAH. the dsta address does not
have to be a Iultiple of a 2,068-byte block. For subsequent IDAH's, the data
address must be located on a boundary of a 2,068-byte block.

Fig. 23 shows the algorithm for executing an IO operation with indirect data addres-
sing. Fig. 24 shows the replacement of data addresses in using indirect dsts ad-
dressing.

1. fetch and reception of CC" from
Iain storage

2. program errors?

3. abnormal end of operation and
generation of IO interrupt
condition

a. bit 37 in con . 1?

5. execute 10 operation without
indirect data addressing

6. fetch and reception of first
IDA" fron main storage

7. bits 0—7 in IDA“ - 0?

8. exchange data between channel
and main storage. With each
access, the channel modifies
the address of the data taken
from the IDA” and analyzes for
end of 2,048-byte block

9. end of 2,048-byte block?

10. CC" byte count - 0?

11. continue 10 operation by chain-

ing or end operation and gener-

ste 10 interrupt condition

12. add 6 to [DAN address

13. fetch and reception of next

IDA" from Main storage

14. write, read, sense

15. read backward

16. bits 21-31 in IDA" - 0?

17. bits 21-31 in IDAH . 1?

 

Fig. 23. Algorithm for execution of IO operation with indirect data addressing

74

FOR OFFICIAL USE ONLY
FOR¢0FFKJAL.USE(NULY

a. channel address 90rd [CAR]
b. protection key

c. channel progra-

d. CC" 1

e. CC" 2

f. operation code

g. bit 37 --1

h. byte count i 0

1. list of IDAH's

1. mm 1
1:. 1m 2
1. mm 3

 

Fig. 26. Replacement of data addresses uhen indirect data addressing is used in a
channel:

1 - address of start of channel program;

2.3 -- address of start of IDA" list;

6-8 -- address of start of data block in IDA“;

9-13 -- data blocks (no more than 2,048 bytes) in main storage

4.3. Operation of Input/Output System
to operations include data transfers between main storage and external devices.

In accordance with the channel program stored in main storage, an IO channel orga-
nizes and executes an 10 operation. and controls data exchange between an external
device and main storage. The processor establishes communication with a channel at

the start of the execution of the operation to issue the initial data for its orga-
nization, at the end of the operation to obtain information on the nature of its

execution. in certain caaee end during execution of the operation to obtain current
information or to halt execution of the operation. Fig. 25 shows a block diagram
of the 10 system operation.

75

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Key:

1. Execution of processor inntruction
START [/0 EAST RELEASE

2. Selection of device and deternins-
tion of type of IO operation

3. Bxecution of IO operation. Data
enchange between device, channel
end nain storage using facility
of indirect data addressing

lo. Execution of data chain

5. Execution of cosnand chain,
contend retry end nultiplexing of
data blocks

   

I

M ”new

man clue

MN I. 0y.

'0 Mus" m
a not" an»

an! sum-aqua a.
new

       
     

Fig. 25. Flowchart of [0 system operation

The CPU progrua initiates 10 operations with the instruction START lIO FAST
RELEASE (mac) (1).* "hen the addressed channel is available, not performing an
operation previously begun and has no interruption pending, it fetches fro. loca-
tion 72 of main storage a CA" that contains the protection key and the starting
address of the channel program; otherwise, execution of the SIOF instruction is
completed with the condition code set to 3 or 2. Hhen progran errors are detected
in the CAR received, the channel generates and stores in location 66 of nain stor-
age the CS“ and ends the $10? operation with the condition code set to 1.

"hen there are no errors, $10? is completed with the condition code set to 0 and
the CPU proceeds to execution of the operating cos-ands. The channel, operating in
parallel with the CPU, fetches from slain storage the first OCR and in the indirect
addressing node the first mm, and also generates the real address of the data in
the CCH.

“hen program errors are detected in the CC" or IDA", in executing the $10? instruc-
tion, the channel generates a CS" with the deferred condition code set to 1 and
requests an IO interruption.

 

*The nuher in parentheses denotes the block number in the algorithn diagram.

76

FOR ONCIAI. USE ONLY
FOR OFFICIAL USE ONLY

After the CC" and IDAH are fetched successfully from main storage, the channel
organizes selection of the addressed external device by sending the address of the
device to all devices connected to the interface for this channel (2). If the de-
vice with the given address is not in the IO interface. the channel generates a
CS" with the deferred condition code set to 3 and requests an 10 interruption. A
device that recognizes the address connects itself logically to the channel and re-
ceives from it the command code specified by the CC". In response to the command
code, the device sends a status byte to the channel. The channel analyzes the
status byte received and when necessary may generate a CS" with deferred condition
code set to l and request an IO interruption.

If the device can execute the I0 operation specified by the CC", the channel and
the device start this IO operation and in parallel with the CPU operation organise
the data transfer (3). In executing the operation, the write bus of the channel
receives the data from amin storage and transfers it through the 10 interface to
the external device (one or two bytes at a time depending on the mode).

In executing a read operation, the device transfers one or two bytes at a tune
through the IO interface, and the channel receives and places them in main storage.
Uith each reference to main storage, the channel changes in the CC" the data ad-
dress field and byte count field and analyzes their value.

If the data address in the CC" is a multiple to a 2,048-byte block boundary and
the indirect addressing mode is specified, the channel fetches from main storage
the next IDA", generates the new real data address in the CC" and in the absence
of errors continues the 10 operation (3). IO operations are possible that consist
in transfer of data in several areas of storage. In this case, a CC" chain is
used, each of which indicates an area of storage for the operation specified at

the start of the chain.

If the byte count in the CC" equals zero and the data chaining mode is specified,
the channel fetches the next CCU from main storage. when operation with indirect
addressing is required, the channel also fetches the first IDA" from main storage,
generates the real data address in the CC" and continues the same IO operation
under control of the new CCH (k). If program errors occur in receiving the CCH's
or IDAH's, the channel ends the IO operation abnormally and receives from the
device the status byte describing the end of the operation.

If the byte count in the CC" is zero and the data chaining mode is not specified,
the channel completes the 10 operation, receives the status byte from the device
and analyzes it. If the values of the device status byte specify the caunsnd retry
mode, the channel fetches from main storage the preceding CC" and organizes the
command retry mode (5), similar to command chaining. In the process, the channel
again selects the device (2) without CPU participation.

Command chaining is used for transferring several data blocks through a channel or
when sequential execution in one device of a series of different operations is

required.

f command chaining is specified in the CC" and the value of the status byte permits
execution of this chain of commands, the channel and device determine the necessity
of organizing the data block multiplexing mode. In organizing the block-multiplex

77

FOR OFTWCLAL.USE‘0NLY
FOR OFFICIAL USE ONLY

mode, the channel fetches from main storage the next CC" and activates the chain

of commands for another, higher priority device (5). In the process, work with the
previous device is halted temporarily and the necessary control information is
stored in the subchannel.

If the block-multiplexing mode is not specified, the channel fetches from main
storage the next CC" and continues operation on the chain of col-sands with the
same device (5). If comand chaining is not specified in the OCR or the status
byte does not permit execution of it, the channel generates the CS" and requests
an 10 interruption (6).

During execution of the procedure for following up an IO interruption, the channel
stores the CS" in location 64 in main storage, and the address of the channel and
device in the P89 register. After completing the procedure, the CPU replaces the
PS“ and starts execution of the program for processing the IO interruption (6). At
this time, the channel is available for receiving a new CPU instruction or for
receiving requests for service from a device.

By the instructions CLEAR 1/0, HALT 1/0 and HALT DEVICE, the CPU can stop execution
of a previously started operation, and by the instructions TEST CHANNEL and TEST

1/0, can test the status of the entire IO system, including the addressed channel
and device.

At the end of channel program execution, the signals describing the halt of the 10
operation are sent to the main program either through an IO interruption (6) or
during execution of the CPU instruction TEST 1/0.

In any case, these signals cause storage of the 68" which contains information
pertaining to the IO operation being performed.

4.4. External Storage Units

External Storage in the Unified System of Computers. Computer throughput and com-
puting capabilities to a considerable extent are determined by the composition and
characteristics of its storage. The main function of external storage consists in
substantially extending the amount of computer storage for storing the main bulk of
data, intermediate computing results and the necessary software. In the largest
computing systems, external storage is measured in tens and hundreds of gigabytes
compared to the megabytes of main storage.

In contrast to main storage which can be represented by a specific block (or blocks)
made with particular physical elements (ferrite cores, films, integrated circuits,
etc..‘-, it is rather difficult to designate external storage with the same definite-
ness. External storage is more properly thought of as the aggregate of media with
information, as a library of these media in which by using particular devices
(external storage units, etc.) any independent amount of information is remved and
sent to computer main storage or received from it and recorded for storage on a
suitable medium.

From this point of view, external storage units (VZU) are functionally similar to
10 devices and organization of operating with them is similar to the organization
of operation of WV [[0 devices].

78

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The external storage for modern computers and complexes is built on the principles
of magnetic recording on movable media in the form of tapes, disks and drums
covered with magnetic materiel.

Additional requirements for the developsent and operation of external storage units
emerged with the creation of the Unified System of Computers:

to provide for interchangeability of data media. While this requirement was met
earlier within the limits of a single computer, for the Unified System interchange-
ability is required between different computers located not only in different com-
puter centers, but even in different countries. This led to standardization of the
main parameters of data media: electrical (signals, resolution), physical (length,
width, thickness, diameters), recording methods, recording densities, recording
formats and organization of a service for standards;

to standardize communications between computers, control units and storage units,
i.e. to introduce interfaces at various levels. This made it possible to make use
of the entire pool of external storage units and the different computers in the
Unified System and to put into the composition of computers the new devices as
they were developed and assimilated in production;

to increase the capacity of external storage which, as a rule, in modern computers
is several hundreds of megabytes and more; and

to improve technical characteristics: data exchange rate, information access time,
reliability and others.

The efforts on external storage units made within the framework of the Yes EVM-l
and -2 made it possible to solve these problems to a large extent.

Types and Characteristics of External Storage Units. It its composition, the
existing pool of external storage units is far from uniform and includes devices
with various technical characteristics. Because of mutual contradictions, the
main parameters--capacity of an individual medium, data exchange rate, specified
data access tiae--cannot assume the desired values at the same time. Therefore,
in each external storage unit these contradictions are resolved in accordance
with particular needs.

The classification of units used in various combinations in computer external
storage is shown in fig. 26.

A structural feature is the availability of two types of units: direct access units
(disks or drums) and sequential access units (tape). ‘lhe former are considerably
more complex than the latter in design and technology of manufacture, and storing
data in them is more expensive. however, their relatively fast access time ensures
their mandatory use in external storage of modern computers in "online modes," as
well as further improvement and development.

In the Yes Elm-2, this group is represented by these subsystems: YeS-SOGé/YeS-5566,
YeS-SOSO/YeS-SSSI, YeS-SOSZ/YeS-SSSI, Yes-506l/YeS-5561 and the YeS-SO61/YeS-5568.

Using the disk subsystem based on lOOH-byte units (the YeS-SO66/YeS-5566) has made
it possible to substantially increase computer external storage capacity and expand
computer functional capabilities. A number of technical problems was solved in

79

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

 

Fig. 26. Classification of external storage units

Key:
1. external storage 6. m [magnetic drum storage unit]
2. direct access units 7. library of media
3. sequential access unite 8. automated library of media
6. NSMD [removable disk storage 9. removable modules of disks

unit] 10. mass storage
5. mm [disk storage unit]

in developing this storage unit: development of thinner disk magnetic coating, ob-
taining stable floating of the magnetic head at a small height above the disk sur-
face, development of a read/wite path with high resolution and development of a
sensitive servo system. The Yes-5566 control unit also has important advantages
over earlier used devices of the same type.

External sequential access storage units are now represented by magnetic tape stor-
age units (NHL). Despite their relatively slow average information access time,
they are firmly secure in the composition of computer external storage because of
the low cost and convenience of storing information recorded on magnetic tape.
Large computer centers have libraries of tens of thousands of reels of magnetic

tape with 1012-1013 bits of stored'information. All source data and results of

computations, irrespective of which external storage units they appear on in pro-
cessing, are recopied for storage and "dumped" onto magnetic tape.

The most cannon magnetic tape storage units operate with a data recording density
of 32 and 63 bits/m and the data transfer rate ranges from 32 to 315 kilobytes]

second. In the Unified System of Computers, this group consists of the Yes-5012,
Yes-5017. Yes-5025, Yes-5002, Yes-5003, modifications of them and subsystems based

on them.

Characteristics of the main external storage units in the Unified System of Compu-
ters are given in tables 15 and 16.

80

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 15
Basic 'l‘echnical Characteristics
Information
lbdel number of capec ity per Data transfer
removable disk spindle , rate . ki lobytesl Mean access
a tor-age un i ts Developed by megabytes second time . ms
Yes-5050 USSR 7 .25 156 80
Yes-5052 Bulgaria 7.25 156 60
YeS-SOS6H USSR 7 .25 156 90
Yes-5061 Bulgar ia 29 312 75
Yes-5066 USSR 100 806 105
Yes-5067 Bulger ie 200 806 30
Yes-5080 USSR 200 806 30
Table 16
Basic Technical Charac teristics
Mode 1
number of
magnetic Recording Maximum data
tape Real density , ‘l'ape Startl transfer rate ,
storage Developed capacity , charec- speed , Record ing atop ki lobytes/
unite by megabytes ters [Ila ml sec Method time I ma second
Yes-5017 USSR 20 8/32 2 NRZ-l 5 61¢ _
Yes-5019 Poland ' 20 8/32 3 NRZ-l I. 96
Yes-5022 CSSR 20 8/32 lo NRZ-l 3 128
Yes-5025 USSR 20/60 32/63 2 NRZ-l/PB 5 66/126
Yes-5612 Bulgaria 20/60 32I63 3 NRZ-IIPE 3 189
Yes-5002 GDR 20/60 32/63 3 NRZ-l/PB 3 96/ 189
Yes-5003 Bulgaria 20/100 32/63 5 NRZ-l/PB 2 160/315
Yes-5004 CSSR 20/40 32l63 2 NRZ-l/PE lo 610/126
Bulgaria
Yes-5027 Bulgaria 120 63/246 3 PE/GC 1 750

Organization of Operation of External Storage. 'lhe decisive factor in organizing
the operation of external storage units is the attempt to maximally decrease the
effect of the parameters of these devices on the rate and reliability of operation
of the individual computers and the systems as a whole. In the process, greet im-
portance is attached to questions associated with ensuring the capability of chang--
ing the set of, equipment in complexes already in operation, modernization and con-
nection of new. more improved devices, convenience of operation and others.

81

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

1. computer 1

2. computer 2

3. processor

4. channel 1

5. channel 2

6. UU [control unit]
7. IO interface

 

Fig. 27. 'Diagram of connection of external storage units

In the Unifies System of Computers. the following scheme has been implemented for
connecting external storage units to a machine: processor--channel--control unit
(UU)--external storage unit. In this chain, several channels can be connected to
the processor, several control unite to a channel, and each control unit can serve
a certain number of external storage units. Thus, dozens of external storage units
can operate with a machine in accordance with a user's desire.

This scheme, supplemented by unified principles of software and one type of connec-
tion between channels and control units and the latter with external storage units,
allows organizing the operation of external storage units, while meeting the re-
quiremants for their functioning within the computer structuresnd for changing the
external storage equipment set upon user's requests.

Interaction of external storage units with a machine is similar in its organization
to the interaction of 10 devices. Therefore, from the point of View of program
processing, external storage units are part of the external device group in common
with them.

Having relatively high speeds, external storage units are connected to selector or
block-multiplexer channels and while monopolizing all facilities of the channel do

not_permit other external devices to be connected through it to the machine. The
channel and control unit communicate through a standard 10 interface.

82

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In addition to the main, standard 10 interface, there is a so-called minor inter-
face between the control unit and an external storage unit which is a set of lines
and signals. The set and function of the minor interface cummunication lines are
largely similar to that of the standard 10 interface. But the time relations of
signals, since they reflect the external storage unit design features, vary for
different groups of equipment. Therefore, the minor interface is standardized
within the bounds of the same type of device (for example, magnetic tape storage
units of a particular class).

The channel--control unit--externsl storage unit communication system permits
several versions of mutual connection.

1. Channel--control unit--externsl storage unit. This is the simplest connection
scheme.

2. An external storage unit may be connected through a special control switch to
two or more control units, and the latter themeselves to one or more channels.
With such a connection, the possibility of access to a specific external storage
unit is ensured while bypassing a busy or malfunctioning control unit. The flex-
ibility and reliability of a system are enhanced, but a new unit, the control
switch, appears in the circuit in the process.

3. A control unit has independent circuits for connection to two channels or a
switch is used for the same purpose. This method allows two channels of one ma-
chine to operate with a specific external storage unit, and also allows several
machines access to one external storage unit, i.e. allows providing a common extent
of external storage for several computers joined into a system.

6. The most complex method of connecting external storage units, both in the
hardware and the software sense. It includes all features of the methods discussed
above.

Various schemes may be used for various types of external storage units with re-
gard to their functions and purpose in creating intricate computer complexes and
systems. In typical computer configurations in the Unified System, the third ver-
sion is now used mainly for connecting external storage units.

The scheme for organization of interaction between external storage units and the
machine considerud and adopted in the Unified System has the folowing advantages:

convenience and ease of programming with the presence of a large variety of exter-
nal storage units, since the basic principles of organization are the same and
device-independent;

flexibility of changing the mix of external storage units in accordance with the
user's desire (variety of configurations of external storage). as well as the
capability of increasing within broad limits the composition of external storage
units without any changes in the processor and channels;

the capability of maintaining system operating capability when units malfunction
with several paths for access to external storage units;

the capability of operation of several computers joined in a system with a common
extent of external storage; and

83

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

standardization of control unit interface to a channel which permits moderniza-
tion and development of new external storage units and connection of them as part
of a computer system as they become available.

Prospects for Development of External Storage Units. An active quest is now in
progress to find ways of applying new physical principles in the storage of large
amounts of data by using laser technology, holography, optical and magnetic-optical
effects.

On the other hand, considerable progress in the development of microelectronics,
especially in the field of integrated storage circuits, charge-coupled devices,
cylindrical magnetic-bubbles and others, already makes it possible today to deve-
lop storage units competitive with equipment of lower level of external storage
units in terms of amount of data storable, throughput and reliability.

Despite this, the capabilities of traditional magnetic tape units are far from
exhausted.

'l‘ape units are being improved in two directions: development of large-capacity
units and improvement in reliability and operating characteristics.

efforts in the first direction should result in . ' units with a higher recording
density, including through new methods of coding, that will permit a several-fold
increase in data capacity of a reel of magnetic tape and data transfer rate.

The second direction should result in a considerable extension of the service life
of the most critical unit elements, the magnetic heads, as well as elimination of
direct operator contact with magnetic tape thanks to the introduction of an auto-
matic tape loading mechanism.

A natural development of removable magnetic disk units is the development of units
with an increased data capacity of a pack which in the near future will be 200 and
300 megabytes. However, development of such devices even on a large scale will
exacerbate the problem of ensuring interchangeability of removable packs.

In connection with this, a promising direction in the development of units with re-
movable disk packs is the development of devices with removable modules in which
sets of disks are combined with magnetic heads. This design solution eliminates
the complex and laborious operation of alignment of magnetic heads, and substanti-
ally increases the capacity of the devices through a lower level of floating of
magnetic heads on the surface of a disk. The one-time amount of data storable in
such a subsystem of external storage may reach 20 gigabytes. These devices sub-
stantially increase reliability and facilitate system operation.

The next step in development of computer external storage is the ao-called 'ﬁnass"
storage that combines the basic positive qualities of both tape and disk units.

The capacity of mass storage units reaches 1012-1013 bits, data transfer rate is
800-900 kilobytes/second and maxnnum access time is no more than 15 s.

with virtual organizati :, for the user, this storage in parctice becomes online
direct access storage with very high capacity and corresponding time characteristics.

84

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Structural mass storage is represented in the form of a two-level hierarchy:
automated storage and an executive buffer unit that is linked directly to computer
main storage. Information in the library is kept on sections of magnetic tape and
by requests is sent to or removed from the executive level through the write/read
apparatus. The executive level, the parameters of which are determined by through-
put, number of logical addresses, capability of virtual organization and other sys-
tem indicators, consists of disk units with a capacity of 100-200 megabytes or of
semiconductor storage units.

Optomechanical extarnal storage units are arousing great interest. Their develop-
ment has become possible thanks to the evolution of laser technology. Optomechani-
cal external storage units have a number of advantages over electromechanical; the
most important are: high surface density of data recording (on the order of

106-105 binary-coded characters/unz), high data transfer rate and high data
capacity of the unit.

By method of data recording, optomechanical external storage units are divided into
two main groups: discrete storage units with bit-by-bit recording and holographic
storage units. The former are realized with media made in the form of disks or
bounded segments of tape, and the latter by the use of tape media.

A substantial improvement in computer characteristics can be expected in the near
future when these directions of development of external storage and other solutions
on its improvement are realized.

“.5. Input/Output and Data Preparation Units

Expansion of the nomenclature and improvement of the parameters of data 10 devices
are major aspects in the development of the [0 system that largely determine the
efficient and versatile use of computers. Operation of these devices is supported
by a complex of data preparation devices and development of them has also
received serious attention.

Despite the fact that a rather broad nomenclature of IO and data preparation units
was developed for the Yes EVH-l and that these devices are being successfully ap-
plied in the Yes EVH-Z too, efforts were continued both in the direction of improv-
ing the parameters of the devices developed earlier and in the direction of
developing new units.

10 and data preparation units were evolved in the following directions:
enhancement of rate of operation and reliability;

development of combined and grouped devices;

development of problem-oriented IO complexes; and

development of data preparation units oriented to magnetic media.

Given below are the major characteristics of the basic 10 devices that, on the one

hand, confirm the distinguishing features of the Yes BVM-Z devices, and on the
other, describe the new capabilities of their application.

85

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The rate of operation and reliability of the IO devices (the Yes-6019 card reader
(USSR). alphanumeric printers Yes-7037 (USSR) and Yes-7039 (CSSR), typewriters and
printers YeS-7076 (Poland), Yes-7181 (CSSR), Yes-7183 (GDR), Yes-7186 (Poland) and
Yes-7188 (Poland)), as a rule, were improved thanks to application of the new
principles of their operation. -

Applied in the Yes-6039 card reader were feeding of cards by the narrow side in a
horizontal plane and a vacuum feed system; thanks to this, the card input rate was
1200 cards/minute. Data is read from cards having 65 and 80 columns. Also, the
card usage factor was increased several fold with the use of the vacuum feed system.

The principle of tape or chain printing which makes use of removable type began to
be used for line impact printers.

The use of the continuously moving print chain has allowed increasing the printing
rate, providing for high repairability through convenient and easy replacement of
both the individual sets of characters without additional mechanical adjustment and
the entire print carrier, and also using perforated paper with various formats.

The Yes-7037 prints 132 characters per line at 800-1000 lines per minute. The
Yes-7039 prints 160 characters per line at 1200 lines per minute.

The dot matrix principle is the basis for the serial printers and their mechanisms
(the Yes-7076, Yes-7181, Yes-7183, Yes-7186 and the Yes-7188) which provides a
printing rate of 180, 150, 100, 180 characters/second and 200 lines/minute,
respectively.

The Yes-7902 (GDR and CSSR) and Yes-7903 (USSR) perforated tape 10 stations with a
read rate of 1000 and 1500 characters/second and a punch rate of 100 and 150 charac-
ters/second respectively were developed in place of individual perforated tape de-
vices. The introduction of these data stations allows reducing equipment cost and
power consumption and enhancing operating convenience.

Efficient use of computers in time-sharing modes is possible only with man—machine
interactive facilities. In connection with this, much attention was paid in dsve-
loping the Yes EVH-Z to developing cluster units for data input from a screen and
output of it to a CRT screen that allow online communication with a computer.

Added to the Yes-7061 and Yes-7063 (dungary), the Yes-7063 (CSSR), the Yes-7066 and
Yes-7096 (USSR) alphameric displays in use in the Yes Eva-2 were the Yes-7920 alpha-
meric cluster display station, which was developed with the participation of speci-
alists from the VNR [Hungarian People's Republic], the GDR, the PNR [Polish Peo-
ple‘s Republic]. the USSR and the CSSR, and the Yes-7905 (USSR) cluster display
terminal for input/cwtput of graphic information.

The Yes-7920 is designed for operation as an operator's console and as an informa-
tion display unit in various operating modes, for which several modifications have

been provided:

local cluster: YeS-7920-00, YaS-7920-Ol;
remote cluster: YeS-7920-10, YeS-7920-ll; and
remote single: YeS-7920-20, Yes-7920-21.

86

FOR 0FFIC|.’-.l. USE ONLY
FOR OFFICIAL USE ONLY

Table 17. Scale Technical crux-accentua- of Indlvldunl Units in the Yes-7920
Dloplay System

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

_439- x—Jﬂ—CGL—‘LIL
Unit Model Eu : é. : ..
‘ “mat-1r = a 3 g: I 3
E mm '3 g 3 :. I ' 3'
g IWMIM _‘ ‘i 'g"; .§ 3 Ea
; (1) me a _ |__.: § {ﬁg :3 ____2;_ :3
Chm" r-.c MI 00 I.200. II-0II1 m 310 32
Control 2400. um. olnt.
3. mm- (8) K01-7__ m
— ---~ --——-— c2
8
é: EC-ﬂm-OI 000 I200 K0II1 "no :50 200
. 9% mm; «00
§g__ ._ _ _ :18)- __-... "-26.?”
gt". now-2200 Hem-9).»: Hm}: _I ”MI ”I mI2anu.
lg: _. ._ _. ._. Lioﬁoj'“'lt_ ._-___ .. __.. ﬂung“
Um: III-.1022 m m III-«(9) RKBII ImI; IasonI an
.____ are male—__-- ____|_1°_
. 82
EC 102500 2%Ifggo «on-1 «Io .2233 450 10 joint
no
01091. MM. “OI-7 mm- Cull
_- .__.__ __.—__.,—
nc-msm 000. I200. KOIIJ I920 249,13 450 10 .
2400. 1300. II no
Woman/c K0!- 7 Mann
'5 (8)
g __. __.. __ __.
I?! 001921.00 gar». nous m Imam 43 "MR
‘ H (12) KOI-a 10.1101. 53;».
. ...__. _. __.. -- ._— .(..ﬁ)___ _H- 6.10
Izcmm ﬂea—lam. KOIIII I020 24m... 300 . 230$}...
”(12) «oz-s 332.. (13)

 

Prtnter I'm-mum III- mW’ﬁ—

— —I I!) ID 101650 I lw I
. __ I13_III_II_IonI__c _________ llﬂl ('15

 

 

 

 

 

8 8 EC 7931 0| Ho 2%“) - I I920 I64 JIIII 660 I I”

g I; _ _._r.0_-_v.«.«-I_c_ __-—5241.5

q

: Pitt-79.1102 "0mg!” — \— 4010m- m 10 .__llagj?

IE 66 nuns/c Im- (15 III-maul
Ml ne-
nun:-
uoII no.
1011

-.. ... —.__. . --_. _ -_ __—-.—-——_

 

[Key on following page]

87

FOR OFFICIAL use om'x
FOR OFFICIAL USE ONLY

Table 17. [Continuation]

1. [Russian "EC" - English "YeS"L 8. bits per second

2. interchange code 9. no less than 250 kilobytes/second
K01 [information interchange code] 10. 12 lines, 40 characters each
DKOI [decimal information 11. 26 lines, 80 characters each

interchange code] 12. kilobits per second

3. buffer capacity, characters 13. serial by 16-bit words

6. display or printer format 1b. no less than 66 characters/second

5. power consumption, VA 15. characters

6. weight. kg 16. parallel for print mechanisms

7. communications interface

The Yes-7920 cluster display stations enable a large number of operators to inter-
act with computers both in direct proximity to the machine and at a large distanc‘
away from it (remote). Cluster local units are connected to the computer directly
through the selector, byte-multiplexer and block-multiplexer channels by the
Ye8-7922-00(01) cluster control unit. In doing so, the Yes-7920 peripherals, the
Yes-7927 display and Yes-7934 printer (no more than 32 units), can be connected to
the cluster control unit at a distance up to 1200 meters.

The YeS-7920-10(ll) cluster remote units. which contain the same peripherals and
have the same characteristics, are connected to sclector, byte-multiplsrer and
block-multiplexer computer channels through a dItL transmission multiplexer, modems
and dedicated telephone lines by using the YeS-7921-00(01) cluster control unit.

The YeS-7920-20(21) single remote units, which include the YeS-7925-00(01) display
and the YeS-7936-02 printer, are connected to the same channels both directly and
through a data transmission mutliplexur in the case of remote use.

The main technical characteristics of the individual units in the Yes-7920 display
system are given in table 17.

The Yes-7905 cluster unit is designed for input/output of alphanumeric and graphic
information in the real-time mode with automated design of documentation.

Ihe Yes-7905 unit includes:
the Yes-7565 cluster'control unit; and

the Yes-7065 display console which consists of a display and plotting unit for
input of graphic information with a «00 X bOOIun working field.

Each Yes-7565 cluster control unit can be connected to two to four Yes-7065 display
consoles at a distance of no more than 500 meters. The main technical data for
the display are given in table 18.

Problem-oriented complexes which have begun to be developed in place of individual
two-coordinate graphic units allow broad functional capabilities of the Unified
System. Problem-oriented complexes ale built with the application of minicomputers

88

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

and function both autonomously and as part of the models of the Unified System.
Four such complexes have now been developed: the Yes-7907 (CSSB), the Yes-7908
(USSR), tho Yes-7961 (6583) and tho Yes-7962 (CSSR). The first two complexes are
designed for 10 of graphic information. and the latter two for performing graphic
design operations and technological production operations, respectively.

Table 18. Basic Technical Data for the Yes-7065 Display Console

 

Characteristics Parameters
working field, mm 250 X 250
number of addressable raster units 1026 X lOZé
character code DKOI [decimal information interchange code]
number of brightness levels 2
number of characters in a line:

basic size 76

extended size «9
number of lines for characters

basic size 52

extended sire 35
maximum number of characters on the screen - 2100

Data preparation units were developed further in the Yes EVM-2.. These include:

the Yes-9004 (Bulgaria) unit for preparing data on magnetic tape with a recording
density of 32 characters/mm;

the Yes-9111 and Yes-9112 (CSSR) individual units for preparirg data on floppy
disks for one or two work places;

the Yes-9113 (Bulgaria) unit for copying data from floppy disk to magnetic tape
with a width of 12.7 In;

the Yes-9003 (Bulgaria) multiconsole system for preparing data on magentic tape
with 16 operator consoles;

the Yes-9006 (Bulgaria) cassette system for preparing data on magnetic tape
with eight operator consoles; and

the Yes-9150 (Poland) cluster system for preparing data on magnetic tape with up
to 32 operator consoles.

The new units in this class are oriented mainly to magnetic media: standard and
cassette magnetic tapes and magnetic disks.

89

FOR OFFICIAL USE ONLY
FOR13FF"JA[.USEZONLX

Chapter 5. Means of Organization of Computer Systems

A distinguishing feature of phase-two computers in the Unified System is the build-
ing on their basis of different computer systems that offer the user new capabili-
ties and are characterized by high efficiency.

These systems include first of all those with virtual organization of main storage.

In shared-use systems, the Unified System is supported by software and hardware for
data teleprocessing facilities (facilities for organizing the mode of time sharing
of the processor, local and remote terminals with the capability of independent ac-
cess)to a computer, data transmission equipment, data transmission multiplexers,
etc. .

Complexing facilities included in the models for building computer systems meet the
increased requirements for throughput and reliability and join computers at the
levels of common main and common external storage.

There are two types of complexing of computer systems. multiprocessor and multina-
chine, which differ in the level of computer coupling, software and hardware.

5.1. Multiprocessor Systems

A multiprocessor system presupposes two or more processors, each of which is con-
trolled by a common operating system. Each processor has access to a common main
storage and to all or some of the In devices.

Complexing of several processors at the level of common main storage is supported
by facilities of multiprocessor operation or multiprocessing facilities.

Multiprocessing facilities include a permanently allocated area assigned to each
processor in a common main storage, prefixing, interprocessor signaling and time-
of-day-clock synchronization.

The structure and purpose of the fields of the permanently allocated area of
storrge are discussed in chapter 2.

Prefixing. Since each processor ina multiprocessor system has its own permanently
allocated storage area, these areas are allocated within the bounds of the common
extent of main storage by using the hardware mechanism of prefixing, i.e. the
storage area with addresses 0-h096 is displaced by the value of the prefix assigned
to each processor.

The mechanism of translating addresses by using a prefix allows achieving the
minimum mutual effect of the processors operating with a common extent of main
storage.

All addresses subject to translation by the prefixing mechanism are referred to as

real. Storage addresses not subject to this translation and all translated addres-
ses, whether or not they are changed, are referred to as absolute. As a result of

the computation of the absolute address, real addresses 0-4095 are increased by the
value indicated in a 12-bit prefix register. Two new instructions have been

90

F0i10FFNﬂAl.US£10NLY
FOR OFFICIAL USE ONLY

provided for operating with the prefix in the Yes INN-2: SET PREFIX and STORE
PREFIX. During execution of the first instruction, a 12-bit value located in bits
8-19 of the second operand is stored in the prefix register. During execution of
the second instruction, the contents of the the prefix register is stored at the
address of the second operand which specifies a 32-bit storage location. In thiI

case, zeros are put into bits 0-7 and 2-31, and the prefix value is placed in bits
8-19.

Prefixing is effected in the multiprocessing mode, does not depend on the control
mode and does not alter the address where it is generated. The address is changed
by using the prefix in the storage control unit unmediately before referencing.
For this purpose. the storage control unit contains circuits for analysis of the
incoming main-storage reference addresses, as a result of the operation of which
the addresses are either translated (table 19) or remain unchanged.

Table 19.

Storage

Address

Bits Value of Bits Actions in Translation
8-19 equal to zero replaced with the prefix
8-19 equal to the prefix replaced with zeros
8-19 not all zeros and not equal to the prefix remain unchanged

20-31 in all cases remain unchanged

The essence of translating storage addresses can be undara_tood proceeding from the
purpose of prefixing: allocation of a permanent directly addressable area of
storage of each processor within the bounds of a common extent of main storage.

Interprocessor Signaling. In addition to exchange of large amounts of data or
their joint use in a multiprocessor system, there must be direct comunication be—
tween the processors to exchange control information. This necessity may occur in
many cases, for example when a processor has to start or stop another processor,
and also stop or interrupt its operation. A special instruction, SIGNAL PROCESSOR.
has been provided in the Yes EVH-Z to organize cosuunication on control information
between processors, in addition to the instructions READ DIRECT and WRITE DIRECT.
This instruction, format as, specifies the address of the processor with which

comunication has to be established, the code of the order being called and the
result of execution of the order.

The address of the processor with which connunicstion is being established is
placed in a general register. The number of this register is specified by the
third operand in the field R3 of the instruction (see fig. 2). The address of each
processor is fixed and assigned during assembly of the special switch of the
control circuits intended for this.

The order codes are specified in bits 24-31 (see table 20) in place of the address
of the second operand specified by fields 82 and D2 of the instruction.

91

FOR OFFICIAL USE ONLY
Table 20.
Codes
0000 0000
0000 0001
0000 0010

0000 0011

0000 0100
0000 0101
0000 0110
0000 0110

0001 1000

0001 0000
0010 0000

0011 0000
0100 0000

0101 0000-
1111 1111

FOR OFFICIAL USE ONLY

Orders and Codes for Comnmnications among Processors

Orders

unassigned

 

external call

emergency signal

start

stop
restart

initial program reset

program reset

stop and store status

initial microprogran
load [IMPL]

initial CPU reset
CPU reset

unassigned

Order Function

—_—.—-——————

obtain information on status of called processor

generate an external interruption with the ex-
ternal call order at the addressed processor.
The code and address of the processor sending
the signal are stored when the interruption
occurs.

generate an external interruption vith the emer-
gency signal order at the addressed processor
addressed processor is placed in operating state

addressed processor is placed in stop state
addressed processor performs restart function

effect initial program reset at the addressed
processor, i.e. reset of processor and all
channels

program reset at addressed processor, i.e. reset
of processor and channels. Differs from preced-
ing in that other control information must be
reset in this case

place addressed processor in stop state and
store status after that

perform program reset and after that start
initial microprogram load if provided for in
model

perform initial reset of addressed processor

perform reset of addressed processor. Differs
from preceding in information that must be reset

In response to the sense order, the addressed processor issues information on its

status, stored in the general register designatod by the

PROCESSOR instruction. The status conditions and their bi

field of the SIGNAL
positions in the regis-

ter in which they are stored are given in table 21.

Accepted or rejected orders at the addressed processor by the SIGNAL PROCESSOR
instruction are confirmed by storing of the corresponding condition code and status

condition by the issuing processor.

Clock Synchronization.

Each processor in a multiprocessor system may have its own
time-of-dsy clock or all processors may share a clock.
"accesses only one clock.

In any case, a processor

Hhen more than one clock exists in a system, they must be

synchronized so that all programs obtain the same time readout.

The clock synchronization facility together with the operating system supervisor sn-

sure

that tiae-of-day clock readouts appear as if one clock were used, irrespective

92

FOR‘0FFK]A1.USE(NVLY
FOR OFFICIAL USE ONLY

Table 21. Status Conditions for Indication of Response to an Order

 

 

Register
Bits Status Condition Definition
0 equipment check malfunction of addrssed processor that
affects only execution of this instruction
1-23 unassigned (zeros)

24 external-call pending addressed processor has not yet completed
processing of interrupt with external call
because of processing of previously issued

» SIGNAL PROCESSOR instruction

25 stopped addressed processor is in stopped state

26 operator intervening operations from console in progress at
addressed processor

27 check stop addressed processor is in check-stop state

28 not ready required microprogram not loaded at
addressed processor

29 unassigned (zero)

30 invalid order addressed processor received invalid order
or order has not been isplementsd

31 receiver check malfunction in addressed processor that

may have affected generation of other
status conditions

of whether a clock is used in one or more processors. The operation of them con-
sists in the fact that they simultaneously change the contents of low-order bits of
all clocks. In addition, they ensure that a clock is started by another. Lack of

synchronization is considered a disruption to the operation of a multiprocessor sys-
tem and causes an external interruption.

These multiprocessing facilities are governed by the principles of operation of the
Yes EVH—Z and presuppose the capability of organizing multiprocessor operation. To
implement this capability in each specific model, it is necessary to provide for
equipment that provides access by a processor to the main storage of another, and
vice versa, i.s. access by each processor to a comn extent of sain storage. Orga-
nization of this access varies and specific implementation of it largely determines
the efficiency of operation of a multiprocessor system. By topology of cousunica-
tions between the main resources, there are now several types of organization of
multiprocessor systems. The main ones are:

systems with a consnon bus;

systems with a cross switch; and

multiple bus systems.

Organization of multiprocessor systems with a cannon bus is based on the principle

of connecting all system resources through a cannon bus. Inforsation is transferred

between processors, 10 channels and independent blocks of main storage through the
connon bus with time sharing.

93

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Such organization is noted for simplicity of implementation, flexibility, conven-
ience of adding on additional resources, standardization, simplicity of interfaces
of the individual devices and low cost of switching equipment. Also, because of
time sharing of transfers, the problem of conflicts and protection of information
is essentially solved since each unit monopolizes the bus from start to end of the
transfer.

At the same time, such systems have a number of shortcomings, among which the main
ones are long time delay in data transfer and relatively low system reliability.

The data transfer delay increases as the load increases, i.e. as additional units
are connected. This is due to time-sequential transfers and the need of additional
time for identification of the unit establisging communication and for organization
of communication. The low system reliability compared to that of other types of
systems stems from the operation of the common bus being provided for by one con-
trol unit.

It should be noted that these parameters may be improved by dividing the common bus
into two or more and such systems have already emerged in design practice.

Organization of systems with a cross switch is based on a switch matrix with spatial
division that allows connecting uniport devices with each other in any combination.
In this system, the transfer rate is higher than in the common bus system since the
processors can access storage over several paths. The system with a cross switch is
somewhat less flexible than the common bus system, yet this system can grow to a
sufficiently large extent and this is governed by the amount of equipment of the
switching matrix. The switching matrix device is separate functionally from the
main equipment and may be used to interface 10 channels with a processor that has to
communicate with a peripheral at a given time. Conflicts arising between processors
during reference to main storage are resolved by special apparatus placed in the
swicthing matrix. The relatively high functional complexity and cost of the switch-
ing equipment for this system should also be noted. Tb organize operation on the
order of 10 processors with a common extent of main storage, the amount of apparatus
of the switching matrix is commensurate with the amount of equipment of one proces-
sor.

For their organization, multiport multiprocessor systems make use of main storage
units with multiple ports or units for interprocessor communications that allow ex-
panding the number of ports to storage. Just as the preceding system, multiport
multiprocessor systems have a high data transfer rate and high reliability through
the capability of organizing several paths of access to main storage. Also. there
is less switching equipment and consequent‘y lower cost. At the same time, the
add-on capability in this system is limited to the number of main storage ports.

Selection of a particular organization of multiprocessor systems is governed both by
their purpose and the structure of the components, especially the processor.

The architecture of the Unified System of Computers is designed both for building
both general-purpose large-scale and economic single-processor models and for build-
ing multiprocessor systems that maintain these qualities. The logic structure of
the processor, channels and main storage of the Unified System makes it possible to
organize, as a rule, multiport multiprocessor systems and systems with cross

94

FOR OFHCIAL USE ONLY
FOR OFFICIAL USE ONLY

       
    

        
 

(1) MW! 00A: chip-vulva} new": by
__.._._._.______._._.__._1 .
f | 1. common extent of main storage
I ":33“ _":;:f:" | 2 2. main storage for processor
wefm- "My"! |( ) 3. storage adapter

lo. 10 channels

5. processor

6. device for interprocessor
communication

Fig. 28. Duel-Processor System with Canon Extent of Main Storage

switching. These systems may be built, for example, on the base of models
Yes-1035. Yes-1045, Yes-1060 and Yes-1065. A coupon bus is used in the Yes-1015
computer; a multiprocessor system can be built that enables data transfer through
this bus with time sharing.

‘No possible configurations for a dual-processor system with a cannon extent of
main storage based on Unified System models are shown in fig. 28.

Shown in (e) is s multiport multiprocessor system in which multiport storage adap-
ters are used for switching of data buses. The storage adapters can be physically
placed in both the main storage unit and in the processor. In both cases they per-
form the same role: they expand the number of main storage ports and resolve con-
flicts between the processors during reference to main storage.

Shown in (b) is a multiprocessor system in which a device for interprocessor com-
munication (UHS) is used for processor communication with main storage. This func-

tionally independent unit may be implemented in the form of both an adapter that
expands rhe number of main storage ports and a switching matrix. An interproceseor

95

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

communication unit affords great system flexibility and at the same time allows
releasing the computer from superfluous equipment when the single-processor
version is used.

The logic structure of the processor unposes specific requirements on the organiza-
tion of data transfer control in a multiprocessor system. In the Yes EVE-2 proces-
sors, especially rigorous requirements are imposed by buffer storage, protection
key storage and the apparatus of dynamic address translation in organizing virtual
storage. The presence of these facilities, located in the storage control unit,
requires an exchange of control signals between the two processors, by which speci-
fic actions are performed in the storage control unit for one processor intiated

by the other. These actions include:

establishing of invalidity of data in buffer storage;
executing operations with storage keys; and

establishing invalidity of information in the translation-lookaside buffer.

Since in a multiprocessor system, main storage is common and buffer storage of
each processor contains data that are copies of data of some areas of main storage,
when the data in these areas are altered by a processor, the data must be deleted
in the buffer storage of the other processor. These actions are performed in a
manner similar tot he actions for establishing the invalidity of data in buffer
storage in writing data to main storage by IO channels in a single-processor
system (see section 3.2).

Main storage protection keys may be placed in both the storage unit itself and in
the processor. In the first case, no special difficulty occurs in organizing
operation with protection keys in a multiprocessor system. But quite often, com-
puter structure organization requires placing storage protection keys in the pro-
cessor. In this case, in organizing a multiprocessor system, the operations with
storage keys, SET STORAGE KEY, IRSERT STORAGE KEY and RESET REFERENCE BIT, must be
executed in all processors. In executing these modes, real addresses, storage
protection keys and operation flags must be exchanged between all processors.

To speed up the mode of translation of a virtual (logical) address into a real ad-
dress, a trenslation-lookaside buffer is used in the processor. Each location of
the translation buffer contains the logical address of a page, the real address of
the page corresponding to it and the storage protection key for this page. Full
translation (using tables) is performed only when the first reference is made to
some page and the result of the translation is placed in the translation buffer.
Subsequent references to this same page do not need full translation since the
real address for the corresponding logical address and the storage protection key
can be fetched from the translation buffer.

In a multiprocessor system, if a page-table entry is changed or storage protection
key of some page is changed in a processor, the information in the corresponding
location of the translation buffer in which the real address of this page is found
must be deleted in all processors. For this purpose, exchange of control signals
between all processors must also be organized.

The capacity of common main storage in multiprocessor systems based on Unified Sys-
tas models varies but is no more than 16H bytes. Also, it must have the capability

96

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

of being changed in event some logicel block of storage malfunctions. The neces-
sary control facilities have been provided to specify the required capacity of
common storage and to reconfigure storage in event s block malfunctions. These
controls are on the computer control consoles or on special panels for the multi-
proeeesor system.

Thus, these multiprocessing facilities and hardware facilities for organizing the
common extent of main storage in conjunction with the operating system allow build-
ing multiprocessor systems with efficient organizstion on the basis of Unified Sys-
tem computer models.

5.2. Hultimechine Systems

Hultimechine systems are basically two-machine computer complexes (VK) based on
series computers that are united for joint operation by one or more complexing fe-
cilities. In contrsst to multiprocessor systems, multimachine systems have no com-
mon extent of main storage and each computer that is pert of the complex is con-
trolled by its own operating system.

Computer complexes are intended for solving s broad range of information, computing
and administrative problems in the modes of multiprogram batch processing, reel
time end shared use through communication channels. They are used as the central
link in data processing at the top levels of automated management systems as well
as in sYstems for acquiring, storing and processing large files of information.

Within the Unified System of Computers, there are now the VK-1033. the VK-ZR-JS,
the VK-ZR-bS end the VK-ZR-GO computer complexes built, respectively, on the base
of the Yes-1033, Yes-1035, Yes-1045 and Yes-1060 computers.

Configuration of Computer Complex. Each of these computer complexes hes its own
complement of equipment in accordance with its purpose and makes use of various
complaxing fecilities; nevertheless, they are all built on the same principle that
allows forming a generalized configuration of a computer complex based on Unified
System models (fig. 29).

Each computer in the complex has a central processor (TeP), main storage (0?). one
or more byte-multiplexer channels (MK), a group of selector or block-multiplexer
channels, a set of [0 devices linked to a multiplexer channel through a logic re-
peater (RTL), a set of external storage units and a set of channel-to-channel
edsptere (ARK). Each line of externel storage units consists of a control unit
and the etorege devices served by it.

The processors communicate through the computer complex control unit (UUVK), end

the main storage units for the first and second computer through the chain of the
first computer's 10 channel, the chennel-to-channel adapter and the second compu-
ter's 10 channel and vice versa.

In the configuretion of a computer complex, one can allot external storage units to
be accessed by just one computer and units to be accessed by both computers in the
complex forming a cannon extent of external storage. In fig. 29, the cannon extent
of external storage is formed by the group of lines of magnetic disk storage units
and the line of magnetic tspe storage units in each computer. In doing so, two

97

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Key:
1. line of NHL [magnetic tape
storage units]
2. line of “MD [magantic disk
storage units]
3. AKK [channel-to-chsnnel adapter]
4. 0? [main storage]
5. SK [selector channel]
6. To? [central processor]
4. UUVK [computer complex control
unit]
8. HM [multiplexer channel]
9. WV [10 device]
10. RTL [logic repeater]

 

Fig. 29. Generalized configuration of computer complex based on models of unified
System of Computers

lines of the group of common magnetic disk storage units of each computer are used
as alternative access for the unlike selector channels of both computers, and one
line for like channels.

Each computer usually uses its own external storage units to store the operating
system and the programs used often and most important for operation. The common
units are used to store the input batch of jobs and data files containing both in-
.formation for common use and information needed to organize the interaction of both
computers in the complex and the backup to replace a computer that has gone down.

One group of channel-to-chsnnel adapters is used for intermachine communication
within the complex effected through an IO interface of like channels of each compu-
ter, and two other groups afford communication for the first and second computer,
respectively, with other similar computer complexes.

This structure of multimachine systems stemmed from the need to meet the main re-
quirements for such systems: ensure continuous functioning of the computer complex

with high reliability. Computer complexing raises the reliability of a computer
complex not only through the backup to the main equipment that allows switching

98

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

computers during failures, but also through backup storage of vital data in compu-
ter storage and the magnetic disk and tape storage units used jointly by both com-
puters. Computer complexing also allows achieving higher throughput than the
throughput of one computer when the complex functions in the mode of distributing
tasks.

The system throrghput of each individual computer in the complex is a function of
the processor load which is governed by the size of main storage and the number of
IO channels. The structure of the computer complex makes it possible to have for
each computer the largest size of main storage and the maximum number of IO chan-
nels defined for a specific model. This enables achieving a high level of multi-
progrmuaing, a high degree of reactivity of the operating system and an extension
of the degree of overlap of 10 operations for various programs in various IO chan-
nels. This results in a considerable increase in the number of programs ready for

processing by the processor which leads to an increase in its load and the computer
throughput.

Large amounts of data to be processed and the requirements for problem solving time
in ASU [automated management systems] have determined the availability in the com-
puter complex of external storage with considerable capacity and rather high speed.
The Unified System architecture allows solving this problem both by connecting
large-capacity units and by increasing the total number of units.

Computer Complexing Facilities. Meeting the main requirement of a computer com-
plex, ensuring high reliability of operation, imposes a number of additional re-
quirements on the organization of the structure and the composition of the complex

equipment.

Thus, for continuous functioning of a computer complex when the main computer
solving the main problem in the complex goes down. there must be provided the ca-
pability of replacing it by a backup that while switched on does not assume the
load, but only "keeps track" of the operation of the main computer.

During operation of the complex. loss of input messages, intermediate results and
statuses is impermissible. To prevent this, the dependent computer has to be able
to assume part of the load of the host computer, i.e. both computers must have the
capability of solving some common problem, exchanging results of computations and
control information.

The requirement of preventing a malfunctioning computer from affecting the opera-
tion of the complex, restoring it without interrupting complex operation or per-
forming scheduled preventive maintenance, as well as the presence of problems that
must be solved simultaneously and independently in each computer in the complex
dictate the necessity of dividing the complex in these cases into two independent
computers.

To meet these requirements, the computer complex must implement the mode of hot
standby, distribution of tasks and independent functioning; the assignment of modes
and the shifting from one to the other must be effected both by software to achieve
the highest efficiency and by the manual method. The latter is needed for an emer-
gency change of modes at the option of the complex operator, for example, in case

a complex computer fails when it not only cannot change the complex operating mode,
but cannot even message its status to the other computer.

99
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

To implement manual control of computer complex modes, there must be provided with-
in the computer complex a computer complex control unit that is built into the line
for exchange of codes of control information and equipped with mode controls and
indicators that record the status of the complex as 0 whole and each computer
separately.

Hhen computers are united into a complex, facilities for intermachine exchange
must be provided. Change of modes must be effected by the transfer through some
line of a control code from the computer acting as the host to the other machine
in the complex and the correspondingresponse from the latter.

Cases of exchange between complex computers not only of codes. but also of files
of control information are frequent. This necessity arises, for example, when
changing from the mode of distribution of problems or independent functioning to
the mode of hot standby. For this, the capability of rapid exchange of consider-
able portions of information must be provided in the computer complex.

The modes of hot standby and distribution of problems require both complex compu-
ters to access the same programs and data files located on some common external
storage unit. Therefore, there must be facilities in the computer complex to pro-
vide each complex computer free access to some of the external storage units.

The majority of these requirements are met by facilities that allow joining two
Unified System computers at the processor level by direct control, at the external
storage unit level by using a two-channel switch, and at the to channel level by
using a channel-to-channei adapter; each complexing level operates under the con—
trol of corresponding software.

Direct control facilities ensure rapid communication through the standard direct
control interface between central processors by using the special instructions,
"RITE DIRECT and READ DIRECT. and the mechanism of external interruptions. Direct
control facilities are used for rapid exchange of small amounts of data which are
usually control or synchronizing information.

The channel-to-channel adapter is connected to two 10 channels, using the standard
10 interface for the Unified System. It is intended for exchange of control infor-
mation. but its main function is exchange of data files at a rate close to the

rate of opetation of the channels.

Ihe channel-to-channel adapter can physically be integrated into the [0 channels
(the Yes-4060 in the YeS EVM-l) or be a structurally standalone unit, which is the
case for the Yes-#061 used in the Yes EVH-Z that contains two functionally
independent adapters.

The Yes-4061 channel-to-channel adapter operates in the burst mode with maximum
throughput on the order of one megabyte/second. For each 10 channel. the adapter
connected to it responds to channel requests, and accepts and decodes channel co;-
mands just like any peripheral control unit, but it differs from it in that these
commands are used to provide ccaumnication between channels and synchronization of
their operation. Thus. during communication of two computers using the channel-to-
channel adapter, any one of the computers is considered an external unit with re-
spect to the other. The adapter functionally consists of two exchange control
units connected to each other by signal lines.

100

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In contrast to the Yes-4160, the Yes-4061 chennel-to-chennel adapter can operate

in two modes: in the compatibility mode. i.e. in the Yes EVH-l mode. and in the
expanded mode, in the Yes EVH-Z mode. In the letter mode, the Yes-4061 has certain
features competed to the Yes-4060:

new commands are introduced: MODIFIED IDLE, SENSE STATUS BYTE and "RITE END 0?
FILE;

the sensed status byte is introduced which allows defining in detail the nature of
a malfunction situation that has occurred in the adapter;

the additional indicators of ADAPTER CHECK and SPECIAL CASE are introduced in the
status byte;

mandatory processing of the interruption condition is effected for the indicator
ATTENTION which prevents exchange of information with random matching of commands;

the status NOT READY is introduced end used to inform a channel that the adapter
is not ready for operation.

The two-channel switches enable connecting an external storage control unit to two
channels of different computers. forming thereby a common extent of external stor-
age on the units connected to them. The mutual effect of computers in accessing
an external storage unit belonging to the common extent of external storage is
eliminated by reserving the device for the time of its operation with a given
channel and releasing it after completion of the operation with the channel.

The levels of device reservation differ for the units that control disk storage
and tape storage. The cannand RESERVE DEVICE for disk storage control units re-
serves one storege unit connected to it, but for tape storage control units, the
control unit itself is reserved, i.e. all devices connected to the given control
unit are reserved. The instruction RELEASE DEVICE is intended to release the
reserved units.

when computers are united into a complex, the problem arises of creating facilities
for centralized control needed .a organize expeditious control of the complex to
make the fullest use of its resources and increase its readiness. In developing
centralized control facilities. a compromise between software and hardware solu-
tions is expedient. The computer complex control unit is a hardware facility for
centralized control that supplements and expands the corresponding software control
facilities.

The computer complex control unit is intended for assigning modes of operation of
the computer complex, indication of its status and performing the functions of
operator consoles for both computers that are part of the complex. It enables
performing the following functions:

manual switching of the computer complex to the required mode of operation;
specification of the functional states of each computer included in the complex;

receiving from a computer and sending to a computer the functional states of a
computer;

indication of the modes of operation of the complex;

indication of the functional state of each computer in the complex;

101

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

automatic audible and light signalling in event of malfunction of at least one
computer in the complex or during emergency disconnection of power when power sup-
ply malfunctions for any computer and the control unit tself;

computer power onloff;
power status indication;
processor status indication;

initial program loading; and

external interruption of program.

The computer complex control unit is connected to the two processors through a
standard interface for direct control and is structurally a standalone unit.

Computer Complex Operating Modes.

It is evident that computer complex operating

modes are determined as a function of a large number of factors: restrictions on
time for solving problems, required validity of results of their solution, current
status of complex hardware and other operating conditions. In the process, the

meaning incorporated in the compute
tional states is determined by the

r complex operating modes and computer func- '
specifics of the ASU [automated management sys-

tem] in which the computer complex is used. In exactly the same way, the specifics
of the A80 is taken into account in the specific interpretation of the control sig-
nals and response signals to them that are generated by software or by using the
controls on the computer complex control unit and transmitted between computers or
to both computers when a change in the functional state of the computer complex is
required. The possible computer complex operating modes are listed in table 22

and a most general description of these modes is given.

Functional States

 

Table 22
Modes Computer 1
1 working
backup
2 working
parallel
3 working
auxiliary
a independent
5 working
standby
6 independent
working

Computer 2 _

backup
working
parallel
working
auxiliary
working
independent
standby
working
working
independent

Mode 1. Used when the dynamics of the control problems require expeditious connec-
tion of the standby computer and maintenance of past history of control. In this
case, both computers in the complex execute the same job, but the results of oper-
ation of the backup machine are not output (blocked), and are used only for a
check comparison. Connecting the standby machine consists in blocking the working
computer and unlocking the output of the backup machine.

102

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Mode 2. Used to get over overloads on the working computer that may occur, for
example, when control algorithms are changed so that the time of processing cer-
tain jobs on the working computer will be extended.

The working computer can keep track of its own load; for example, it counts the
number of jobs in the queue for processing. Hhen a certain critical load factor

is reached, the standby computer is readied for the mode of parallel operation.
Hith the onset of an overload, the standby computer assumes part of the load on the
working computer, operating in parallel with it, and after the overload is worked
off, it may switch, for example, to the backup mode.

Mode 3. In this mode, both computers handle control problems, but the working com-
puter solves the main, basic problems of the ASU, while the standby computer pro-
cesses control problems of an auxiliary nature. for example, some preprocessing of
jobs.

Mode 4. In this mode, the computer complex is essentially split into two separate.
independent computers operating under completely different programs and processing
individual problems.

Mode S. in this mode, the working computer handles all ASU problems, and the
standby computer may be either in the waiting mode or the test check mode.

Mode 6. in this mode, one complex computer (the working one) processes all ASU
problems, and the second solves problems not associated with control.

In all complex operating modes, the capability of switching one complex computer
to the state for preventive maintenance or repair has been provided for.

The functional capability of the computer complex operating modes is governed to a
considerable extent by both the capabilities of the operating system for each com-
puter and by the capabilities of the software developed for a specific ASU.

In the Yes EVH-Z, to support the computer complex operating modes, the operating
system includes complexing facilities that provide for:

program control of the direct control facilities;

program control of the operation of the channel-to-channal adapter;

program control of the common extent of external storage on magnetic disks; and

program control of the common extent of external storage on magentic tapes.

These software facilities are discussed in detail in chapter 7.

5.3. Data Teleproccssing Hardware

One of the most effective ways of meeting user system requirements now is the de-
velopment and application of facilitiez for remote processing of data. Modern de-
velopment of information and computing systems and control systems is characterized
by extensive use of data teleprocessing. The number of automated data processing

systems in which teleprocesaing is the main component of operation with data is
increasing.

103

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

— ~ 53 82 81 $2 $3
E1 I’EJ-‘IgHﬁJ

‘2’ . :3) Ta.) (5)(6) (6)(5) (7)

Fig. 30. Diagram of teleprocessing of data in the Unified System of Computers

Key:
1. processor 5. U20 [error protection device]
2. main storage 6. APD [data transmission device]
3. 10 channel 7. AP [terminal]
a. HPD [data transmission 81, 82, S3 -- junction interfaces

multiplexer]

In the program for the Unified System of Computers. a central problem is that of
developing the hardware and software for data teleprocssaing systemm and networks
that provide the capability of distributed processing. It should be noted that
the modular structure of the Unified System of Computers and the availability of
interfaces at various functional and structural levels provide the necessary pre-
requisites for establishing systems for various purposes. primarily shared-use
systems with a developed network of remote terminals and systems for intermachine
exchange of data.

in the broad sense, data teleprocessing facilities (STD) using a computer include:

the teleprocessing hardware proper (data transmission multiplexer, data transmis-
sion equipment, terminals);

communication systems (telephone and telegraph.channels. radio relay lines and
others); and -

the software.
This section covers hardware; the software is described in chapter 7.

Fig. 30 shows the basic diagram of the data teleprocessing system adopted in the
Unified System of Computers. The data transmission multiplexer (HPD), connected
to an 10 channel, a multiplexer as a rule, through a standard interface controls
the transmission and partial processing of information from a computer to termi-
nals and back. If the level of processing of transmitted information increases,
the HPD moves up to the rank of a data teleprocessing processor (PTD). A PTD
allows reducing the load on the central processor. The Yes-8371 communications
processor (Poland, Bulgaria) is an example of a PTD in the Unified System.

Data transmission equipment (APD) is designed to join logical discrete devices,
data transmission multiplexers and terminals, to communication channels.

104

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Terminals (AP) transmit information to a computer and receive data from it. If a
terminal preprocesses data received and transmitted, it is called an intelligent
terminal.

Logical channels for connunication are classed as switched and dedicated. The
latter include the physical lines enabling regional transmission of date.

For dedicated coauunication channels, permanent electrical coununication is main-
teined between a computer and the terminals. Switched communications implies that
both the computer and the terminals are subscribers to some switched camsunication
systan (the telephone, for example). To establish connunications, either the com-
puter or the terminal must give the couaunication system the required address (num-
ber) of the subscriber being called.

By a physical comunication line is meant wire, cable connunication between the
computer and terminal without use of state-wide (and departmental) telephone-tele-
graph connunication channels. As a rule. physical lines operate within the
bounds of some region.

If one channel connects a computer with one terminal, such comunication is called
single-point. One channel may connect a computer with several terminals too, so-
called multipoint conlnunication, under which terminal-terminal exchange is possible
without use of a commnication channel.

There are three modes for transmitting data over cosinunication channels:

simplex (transmission in one direction only);

half-duplex (alternate transmission in two directions); and

duplex (simultaneous transmission in two directions).

There is also a special transmission mode, when service information is transmitted
(at a rate of 75 bits/sec) over the return channel at the same time in the half-
duplex data transmission mode.

The validity of data transmission over comaunication channels is on the order of

10-3. Therefore, in a data teleprocessing system, effective checking and recovery
of' transmitted information is performed at both the hardware and software levels.
The main method of obtaining correct data is the method of retransmission when
errors are detected. Various types of hardware checking are used to detect errors
(parity check, cyclic codes, check sums and others).

No-wire and four-wire channels are used in communications. The latter are used in
duplex transmission. There is also a version of duplex transmission over a two-
wire channel that incorporates additional equipment for separating the forward and
reverse channels.

Data transmission equipment mainly includes the following:
modems and signal converters (UPS);
calling units (VU) for switched connunication lines; and

error protection devices (020).
105

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Key:

1. 000 [data processing equipment]
£5? £1 2. junction 52 (series 100)
7 3. junction 81
‘ suan 4. communications channel

‘ '"'(“) 5. junction 82 (series 200)
6. V0 If, V0 TO [telephone and
telegraph call units]

 

fig. 31. Diagram of connection of call units

Data transmission equipment is classed as low-speed to 200 bits/s (over standard
telegraph channels), medium-speed to 4800 bits/s (over voice-grade channels) and
high-speed of more than 4800 bits/s (over wide-bend channels).

Modems convert the binary signals from a terminal (HPD or AP) into the modulated
signals sent on a communications line. Reverse conversion occurs for receiving.

A typical representative of the family of modems is the modem 200 (Yes-8001,
Bulgaria, USSR, Romania) used for synchronous or asynchronous duplex transmission
over voice-grade channels at 200 bits/s. Frequency modulation is used. Logical

1 and 0 are transmitted on the forward channel_at 980 and 1180 Hz. and on the re-
verse channel at 1650 and 1850 Hz. During transmission, the frequencies are mixed.
and separated by filters upon reception. The frequency of 2100 h: is used for
automatic call.

Differential phase shift modulation (single, doube and triple) is used for modems
2400 and 4800. in single modulation, the information bits 1 and 0 are coded by the
two phases 0° and 180° , in double, a pair of bits (a dibit) is coded by four values
of the phase; and in triple. a group of three bits is coded by eight values of the
phase. There are experimental modems with 16-phase coding. Modems allow service
telephone conversations when data is not being transmitted.

Communication is possible up to 13,900 km over telephone lines with retransmission.
The number of retransmitters depends on the transmission rate. For the Yes-8010
at 600 or 1200 bits/s, the number of retransmitters is 12, and at 2400 bits/s, 6.

Physical lines are used in a limited region. Tb match terminal equipment to the
physical lines, the Yes-8027, Yes-8028 and Yes-8029 low-level signal converters
(UPS NU) are used. Line length depends on the transmission rate. Ihus. for the
Yes-8028:

tvo-vire line, duplex mode. 2400 bitsls--10 km;
four-wire line, duplex made, 2400 bitsls--14 km;

106

FORiOFFﬂﬂAl.USE(MVLY
IUII OFFICIAL USE ONLY

and a faur-wire line. duplex mode, 6800 bits/s--7 km.

To establish consnunication over switched lines, one uses telephone and telegraph
call units (VU TI" and V0 TO) connected to data processing'equipment according to
the diagram shown in fig. 31.

Unified System data transmission equipment includes the Yes-8122, Yes-8135 and

Yes-8140 error protection units designed to raise the validity of transmitted data.
An 020 [error protection unit] is connected between the 000 [data processing equip-
ment] (junction S3) and the modem (junction 51). This unit organizes transmission
of data in blocks with cyclic checking. Different generating polynomials are used

for checking:

'for the Yes-8135: x16 + x12 . x5 + 1; and

for the Yes-8140: X2“ 4- X23 + X608) + X‘s?) + X2 + 1.

The polynomial for the Yes-8160 is reorganized for two versions.

When an error is detected, a request is made to repeat the data transmission.
With a validity of data in a consnunication channel at

10-3, the error protection unit provides for overall validity of 10-7. The size
of the buffer storage for the Yes-8135 enables data transmission to 13,900 Ian
(at 21.00 bits/s) and to 6,000 ion (at 6800 bits/s).

Data transmission multiplexers are connected to Unified System computers through a
standard [0 interface. With a two-channel switch, a data transmission multiplexer
can be connected to two multiplexer channels of one or two computers. ‘lhe data
transmission multiplexer operates according to the channel programs generated in
computer main storage. The data transmission multiplexer establishes and discon-
nects coumunication with a remote terminal, transmits data with checking from and
to a computer, provides a response to control symbols and generates corresponding
control information to implement algorithms for data exchange.

if a data transmission multiplexer has sufficiently developed facilities (software)
to preprocess data and control the data transmission network, than as mentioned
earlier, it belongs to the category of comunications processors or data
teleprocessing processors.

Another variety of these units are the so-called remote data transmission multi-
plexers that allow economizing on communication channels. The Yes-8021 (Hungary)
remote data transmission multiplexer can combine low-speed cosmunication channels
into one high-speed and vice versa.

Let us briefly discuss the principle of operation of a data transmission multi-
plexer using the Yes-8602 (HPD-Z, USSR) as an example. This multiplexer enables
operation in the half-duplex mode with the maximum number of conunicstion channels
(176) of which 64 can be switched. The number of connectable channels depends on
the transmission rate and on the exchange algorithm (aynchronous--ssynchronous,
duplex--half-duplex). Two communication channels with a remote terminal are used
to organize the duplex mode. Operation of the MPD-Z over switched and dedicated
telephone and telegraph lines, as well as over physical lines, is provided for as
a function of the data transmission equipment used.

107

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

(-1) auﬂ'fﬁmiiﬁ
' 6 I. a

"s ... 1 .
M ""‘e' "”"" <4) m

m
-<3) ' (7) -m

  

I ' ‘
Fig. 32. Diagram of HPD-Z data transmission multiplexer
Key:
1. IO interface 5. ECU-A“ [group control unit,
2. UPD [data transmission control asynchronous]
unit] 6. BLA-A [line adapter unit, asynchronous]
3. ECU-$1 [group control unit, 7. SUV [call control unit]
synchronous] 8. OLA-V [line adapter unit, call]
4. BLA-s [line adapter unit. 9. BLA-Tc [line adapter unit, telegraph]
synchronous]

The Yes-8001, Yes-8002, Yes-8010. Yes-8011 and Yes-8015 modems, Yes-8030 telegraph

line interface unit, and the Yes-8027 physical line interface unit can be connected
to the HPD~2.

Transmission rate is up to 4,800 bits/s. Maximum device throughput is 60K bytes/e.

It provides for operation of the AP-l, AP-Z, AP-lo, AP-61, ”-63 and AP-70 terminals
as well as for computer-computer exchange.

‘me validity of the transmitted information is no lower than 10'6 with a probabili-

ty of error in the channel of no more than 10'3. A general diagram of the HPD-Z
is shown in fig. 32.

108

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The data transmission control unit is intended for:

interface to the channel;

storage of control information and data coming from the channel and terminal;
control of all units in the [1?!) [data transmission multiplexer];
implementation of exchange algorithms; and

checking and diagnostics of all HPD units.

The basic logic for operation of the II?!) [data transmission control unit] is imple-
mented by microprogram read-only memory with “096 words of 72 bits each.

The BGU-S and ECU-A plug-in units perform group control of the BLA-S and Shh-A
line adapter units respectively in the synchronous and asynchronous (start-stop)
modes of data transmission. The BLA units send and receive the next bit of infor-
mation in turn for the coanunication line. The BLA-T‘G operates either through a
UPS-TC [signal converter, telegraph] or directly for a telegraph line. The call
control units (BUV) and the line adapter units, cell, (BLA-V) control the automa-
tic call units on switched communication lines (Yes—8061).

In sending data to a terminal, the “PD-2 executes the WRITE coal-and. UPD storage
(1024 x 36 bits) accumulates up to 8 bytes of data from the channel; then the data
1 byte at a time for the synchronous mode or 1 bit at a time for the asynchronous
mode are sent to local storage in the group control unit and then 1 bit at a time
to the line adapter unit. In dialing the call number, the UPD sends one digit at
s time to the call control unit and the line adapter unit, cell.

The “PD-2 counend system includes both the standard channel connands (such as
RESERVE, SENSE, TEST I/O and others) and the comands needed to implement the algo-
rithmsfor exchange with the various terminals. A brief description of the second
group of comands is given in table 23.

 

stle 23
AP-Z, AP-lo, AP-61, AP-61, AP-63

Cousnand AP-63 (synchronous AP-70 (asynchronous

Code Command transmission) telegraph transmission)

01 WRITE + e +

02 READ + e +

05 LOOP “RITE + + o

06 PREPARE - + -

06 PATH mm + - -

09 POLL + -

0A READ-H - 4-

23 831‘ STATE + - -

27 0N + 4- -

29 DIAL NUMBER - +

20 OFF 4» + -

The ON comand connects the HPD-Z to the APO [data transmission equipment] and
establishes character synchronization in the data transmission channel.

109

FOR OFFICIAL USE ONL'.’
FOR OFFICIAL USE ONLY

1. computer 1

2. computer 2

3. DR? [two-channel switch]
lo. HPD-Z [data transmission

multiplexer]
5. AP‘.‘ [data tranuission
equipment]
6. switch unit

a. without backup
b. with backup

 

* control signals (I‘IPD READY, HPD'
I ‘ b NOT READY, NP!) CONNECTED)

Fig. 33. Diagram of backup during operation with the “PD-2

The SET STATE comaand is used only in operating with synchronous terminals and is
the first contend, with which exchange of information with terminals begins. This
con-sand is intended for setting in the UPD [data transmission control unit] the
state of operation with a check of the intermediate unit.

The READ coumand takes data from the comunication channel and sends it to computer
main storage.

The WRITE coanand sends data from the computer to the comunications channel and
then to the terminal.

The PATH READY conIIand looks after character synchronization in the communications
channel and the start of operation of a terminal. This is an expectation, charac-
teristic for the HPD, of a response from a terminal.

The POLL conmund polls the terminal equipment (AP [subscriber station] and its com-
ponents) in the comunication channel.

The LOOP “RITE cosnand checks the MPD-Z. Information sent through some 10 sub-
channel is always sent back to the computer through the zero subchannel.

The OFF comsnd is intended for disconnecting the RFD-2 from the APD.

The READ-H coumand differs from READ in that there is no measurement of time-out
(for the start-stop mode of transmission, when time between two transmitted charac-
ters is not defined).

The PREPARE coumnand defines the start of operation of a start-stop terminal.

110

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

>H0>uu00900h .:m0>: 0:. =m¢= panda: I :0”: Bl :ﬂH<.. Blah-a
h~o>uuuuaoou .ucoﬁouous vac um .30. zanumo—ou on. such a... nus".

300:0 ozuao I o Kandy-.— oouo>a¢cuunuw5oauaw¢os xuozu 5.53. I t "9050-. 53030.3 uouuo .N
nova.- suas “253—0 no non-5: 55x06 .A

 

. «Sign:
— STA—m:

 

 

      

«no
e838 2 3086.:
. .15..
. «mm:
o _8$.S « . 303-25
_ _ — «.2:
Sale: .ll
0 . «an:
. 85.8 8 a. 8936...:
s «.2:
I .. ..lI|1|..d!|3l.
2 8.23 v 3 339?:
<75:
-ilo; .. I - can:
88.3 g 2 80360.3
2 3.2:
Illa:
3 3 Y Y
M M W W not-lo I\Iu._. 2...."an
P r. w W 1-D“: .3”...qu nova
Illl I ..u.lI|I||I “9...! .OUCH :1 In. KIA." Om:

  

 

2.. mummy. umdmawaaeamliil 5 . d..........aﬁ.

ouuunuuouoluoao Toucan—:1! camouﬂage-nu. 33”— nm: .QN 0.31....

111

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Operation of the HPD-Z with a backup is provided for systems with high reliability
(fig. 33). Characteristics of other Unified System IiPD's are given in table 26.

Terminals. The nomenclature of Unified System terminals is rather extensive and it
is continually being expanded and modernized.

A terminal is one or more peripherals with a special control unit that performs
various functions. The terminal control unit implements the terminal operation al-
gorithm, performing actions to establish and disconnect conlnunication between the
HP!) and terminal and to control the data exchange itself between them. For this.
the control unit generates and recognizes the necessary control characters, counts
and compares check sums of data blocks when the exchange takes place with division
of information into blocks, and messages the HPD on its readiness for operation,
desire to change direction of transmission or to end the comunication session.
Upon receiving information from the computer, the terminal control unit translates
the data from the transmission code to that of the peripheral at the station to
which this data is directed. Reverse translation occurs when sending information
from a terminal to a computer. The control unit enables standalone operation of
the peripherals making up the terminal station. As mentioned before, the mode of
multipoint operation of a group of terminals for one camnunications channel is
possible for some terminals. In this case, terminal-terminal coanunication is pos-
sible. haltipoint connection can be implemented both through an 81 junction (using

matching units, fig. 34) and an 32 junction (fig. 35).

(3)

      

Fig. 3a. Hultipath connection of Fig. 35. Vultipath connection of
terminals by an 51 junction terminals by an 52 junction
Key: Key:
1. comunication line 1. comunication channel
2. SU [matching unit] 2. hundreds of meters
3. thousands of kilometers 3. modem
a. modem 1.. AP [terminal]

5. AP [terminal]

Terminals differ in composition of peripherals, exchange algorithms (synchronous,
asynchronous) and connectable data transmission equipment (table 25).

112

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 25. Terminal Characteristics
Date Data
Transmiaaion Trans

Input Output Device

 

E
Es?

tape

jetone
tape

Terminal
Model

Countrz
APl YeSBSOl BU x x x x x x x

APZ YeS8502 HU x x x x x x
USSR x x x x x x

AP3 YeS8503 BU
HU
AP“ Ye58504 UR

x
x
APS YeS8505 GE x
A96 Ye88506 GS X
A214 YeSBSlh P0 x
AP31 YeS8531 BU x
x
x
x
x
x
x

perf. cards
perf. tape
edge cerde
aer. printer

AIN printer
error control

perf. carde
modem 200

e13. conv.L
eig. conv.T

keyboard
paaeport
perf. tape
edge cerda
telegraph
telephone
low~level
aynchronoue

“8a
CRT

mag.

modem 2400
modem #800
half-duplex
eeynchronou

modem 1200

duplex

 

x
I

II
XII
I
3‘
KNX
x
x
I

I“ X

X
X
I
K
ﬂ

X

X

X
33000:

I

x x x H;C x
H,C x

x x x M,C

X X X N I i

”XXX!
X

XNNNﬂN
N
X

APSO YeS8550 HU

AP61 Ye38561
USSR

AP62 YeS8562 HU
A263 Ye58563 UR
AP64 Ye$856h HU

n70 Ye58570 nu
ussn "

TAS YeS8S9l CZ x x x
TAS Ye88592 GS X x x x

TA? Ye58593 g; x x x ‘

x (Mod

)4

(Mod

u x x x x x x u x
a x x x x
x x I: 3 3.:
x
a

X

Key:
BU
C2
GE
HU

Bulgaria H_- matrix
Czechoslovakia C - cyclic

German Dem. ROP- LL - low-level
Hungary

PC Poland T6 . telegraph
UR USSR

A/N = elphameric

113

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Prospects for Development of Data Ieleprocessing Facilities. There is now a
definite trend in shifting from data teleprocessing systems based on a single com—
puter to data teleprocessing network systems where the end user has the capability
of accessing a computer network.

Hith the network organization of information and control systems, there arise many
intricate and laborious problems both in compatible software and in realization of
hardware. The network organization implies a multilevel structure with mandatory
availability of standard protocols for interface between levels. Development of
these interface protocols on the union and international levels is a complex prob-
fem.

Among hardware for the network organization, there will be needed devices such as
data teleprocessing processors, remote data transmission multiplexers and various
types of communication line concentrators. Data teleprocessing processors, on the
one hand, must reduce the program load on the network central computers, and on

the other, provide optimal control of information transmission to the networks
(message and packet switching). In connection with the great progress in electron-
ics technology, the intelligent level of terminals is growing and a family of
intelligent terminals, which in a certain sense are minicomputers, is emerging.

For our country, developing data teleprocessing network systems is especially im-
portant and at the same time this is very difficult because of the great
geographic expanses.

To solve these problems, it is necessary to develop a unified principle of the
systems approach to organizing data processing systems, including shared-use sys-
tems, computer networks, and data transmission systems or networks. This principle

must reflect the unity of the various parties: the user (list of services offered
the user) and the developers of the communication lines and computer hardware

(ensure coordination at all levels and compatibility).

Resolving these questions has led to the problem of the architecture of open sys-
tems of network teleprocesaing (088T), which can be formulated as the capability of
interaction by a user or program of one computer system with a user or program of
another computer system. It is evident that this problem requires providing for
system-wide compatibility in computer and data transmission networks.

Development of the OSST includes:

developing a logical model of the system architecture with a formalized description
of facility functioning logic;

distribution of functions at functional levels between end users and development of
protocols for inetraction of the distributed components of a level; and

introduction of a language for describing the functions and interaction in an
open system.

In the system plan for an OSST, the network is logically built from sequentially
positioned functional levels: the lower levels correspond to the telecommunica-
tions facilities in the data transmission subsystem, and the upper to the standard
application of data processing and to the users (computers, terminals and user
application programs.

114

FOR‘OFFKJAI.USE1ONLY
FOR OFFICIAL USE ONLY

Open systems of network teleprocessing are a major step in the evolution of sys-
tems use of computer technology in the socialist community countries; it is ex-
pected that they will promote considerable expansion of computer applications.

Chapter 6. Development of Checking and Diagnostic :1cilities

Unified System computer use in various sectors of the national economy, the broad
range of users, complication of equipment and the need to ensure high technical and
economic indicators required taking special steps to raise computer operating re-
liability. Achievements in structural solutions or technology may not yield an end
high effect for a user if the problems of checking the operation of computers and
recovery of the computing process are not solved.

The main directions in implementing requirements for raising reliability of compu-
ter operations are hardware and software checking facilities, diagnostics and re-
covery. At today's level of computer technology development, these facilities are
intertwined and separating them is very arbitrary; because of this, in further

discussion we will use the concept of hardware-software facilities, which provide:

machine-check handling;
correction of errors in main storage;

CPU retry;
[0 operation retry;

microdiagnostic procedures;
recovery within operating systems; and

maintenance programs.
6.1. Machine-Check Facilities

In connection with the byte organization of data, checking each byte for parity is
the main method of hardware checking in the Yes EVH-Z, just as in the Yes EVH-l.
The eight information bits of a byte plus one check bit always have an odd number
of ones. This method allows detecting single bit errors and malfunctions of the
type 1 0 (constant lack of a signal) in the control circuits. In the general case,
checking modulo two allows detcting errors present at the same time in an odd num-
ber of bits. Assuming the appearance of double errors in any two bits of an infor-
mation word has equal probability, the percentage of such undetected errors when
both bits are part of one nine-bit byte is:

4- ﬂ
‘9 - 1mg; r323" for a four-byte word and

 

c}...

.t?
17? ° “’09:. .— ll'ﬁi for an eight-byte word.
11

Parity check circuits easily and economically allow checking ripple through trans-
fers of information and storage of information in registers. 0n the other hand,
parity checking of functional assemblies such as decoders, counters and adders re-
quires considerable equipment (50-80 percent of the main hardware). Considering

115

IWJR 0F11C1AL.USEZ(NHLY
FOR OFFICIAL USE ONLY

 

Fig. 36. Self-Checking Check Circuits

Key:
1. data 7. register
2. 08h--error signal 8. KL--combinationsl logic
3. SSK-oself-checking check 9. duplication check
circuit 10. adder
a. SK--check circuit 11. decoder
S. FKR--check bit generation 12. logic of control signals

6. KR--check bit

that modulo three and higher checking and duplication checking are more efficient
in the degree of error detection, the application of mixed methods of hardware
checking in Yes EVM-Z CPU's is apparent. Thus, the CPU's in the Yes-1035 and
Yes-1060 computers are fully checked for parity, including the adders. In the
Yes-1045 computer CPU, parity check is combined with duplication of the main adder.
The adders in the YeS-1065 computer CPU are modulo three checked.

Mixed checking is critical from the point of view of validity in assemblies for
shifting from one form of checking to another. Therefore, self-checking check cir-
cuits are used at such points, for example, in the YeS-lObS computer, in which
these circuits are employed wherever loss of the check signal itself is possible
due to malfunction. As a rule, these are the beginning and ending points of the
check path (fig. 36).

116

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The use of self-checking check circuits seems to be promising with the incorpora-
tion of LSI and VLSI circuitry.

C. Shannon posed the problem to computer developers: Hho will check the checkers?
Prior to the introduction (let us noteo-widespread introduction) of self-checking
check circuits (and here additional research is still needed), Shannon's problem
was solved by introducing through the special CPU instruction DIAGNOSE procedures
for simulating incorrect parity and testing of check circuits in the diagnose mode
with test programs. Periodic execution of these test programs practically guaran-
teed operative readiness of the check circuits to perform their finctions. This
method has been implemented in the CPU's for the Yes-1052 and Yes-1060 computers.

Selecting a specific check circuit for units that transform information is governed
by:

depth of checking;
bulk of check equipment;
effect of check circuits on operating time diagram;

convenience (inconvenience) of packaging operating and check circuitry in plug-in
units; and

the diagnostic capability of the check circuits themeselves and the operating cir-
cuits.

In modern computers, especially great attention is paid to the problems of validity
of information kept in main storage. This is because memory sizes have increased
sharply as a result of the increased packaging density of storage elements. It may
be said that the weight of storage bit reliability malfunctions is declining. Cor-
recting codes have long been accepted and applied in external storage units and
they are now being used extensively in the Yes EVE-2 for amin storage. The popular
and efficient modified ﬂaming code (see chapter 3) that allows correcting single
and detecting double and some multiple errors is being used to check information

in main storage.

The Hamming code apparatus also requires solving the problem of checking the
checkers. Check circuit test modes must be specified by the DIAGNOSB instruction.
Progress in diagnosing main storage malfunctions is due to the generally

accepted method of structural-bit organization.

6.2. Machine-Check Handling

A major factor in maintenance efficiency is the mechanism adopted to handle signals
from the circuits that detect errors in the machine-check system. Yes EVH-l compu-
ters perform the following operations upon signals from check circuits:

recording of status of storage elements in the CPU and channels in the fixed
area of main storage;

machine-check interruption; and

software recovery of the computing process.

117

IMDR OFTNCIAL USEiCMNLY
FOR OFFICIAL USE ONLY

It should be noted that in the process the main storage recording area was inade-
quate, and at the time of the interruption, except for the "old" PS", no additional
information was recorded, i.e. the interruption code was zero. Software was re-
sponsible for recovering the computing process, and it had three levels:

1. recording and acquisition of statistics on malfunctions in the system log for
Yes 08 (or DOS). There is actually no recovery and as a consequence of this, the
operating system is reloaded after a malfunction;

II. recording, acquisition of statistics and analysis of in what kind of program,
system or user, the malfunction was observed. If it is a system program, it is re-
loaded; if a user program, the job is removed and the operator has to restart it.

III. recording, acquisition of statistics and analysis of the status recording
area and an attempt at software retry of the program instruction or fragment that
caused the malfunction.

Programs at level III are the most effective. But at the same time, these pro-
grams are considerably model-dependent, complicated and laborious in development.
0n the other hand, level III programs in a number of cases yield false solutions
in the area of recovery: the program requires reloading when actually retry of
the computing process is possible; the program notes the fact of recovery when in
fact there is no recovery (or it is partial), and in this case, the job is ended
with incorrect results. The latter situation is most dangerous.

The experience of operating with level III programs led to the necessity in the

Yes EVH-Z, on the one hand, of imposing some of the recovery functions on hardware,
making use of microprogram control, and on the other, of standardizing procedures
for handling error signals and expanding the composition of information on the
malfunction situation and in turn standardizing this information. In the opera-
ting system enabling operation of the Yes EVH-Z models, level III programs are
clearly divided into model~dependent and model-independent modules. The labor-
iousness of development and maintenance has been reduced. The instruction that has
failed is retried mainly by hardware (microprogram) facilities which raises the
validity of recovery considerably.

Depending on CPU structural complexity, hardware retry is effected either from the
beginning of the instruction that has been incorrectly executed or from a check-
point within the instruction. The instruction that failed is retried up to eight
times, after which an interruption signal is genzratsd if recovery has not occurred.
In low and medium throughput CPU's with nonconcurrent structure and microprogram
control, retry, as a rule, proceeds at the level of a microinstruction. In CPU's
with concurrent levels of instruction processing and with units having hardware
control, retry is performed from the beginning of the instruction, except for in-
structions with variable-length operands; these are retried starting from the
current doubleword of the operand. During retry, the CPU is switched to the non-
concurrent mode which makes it possible to "push through" more easily the
instruction that failed.

The retry facilities do not affect CPU speed because additional equipment was in-
troduced for expeditious buffering of certain information during program operation.
This equipment takes up one-two percent of the CPU apparatus and allows buffering
of instruction addresses, operand addresses, operands changed during instruction

118

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

execution, and other information needed to recover the computing process. Anti-
hang-up facilities are also introduced into the processors.

A hang-up occurs when no hardware malfunction is recorded, yet the system cannot
continue operation since some procedure begun in the system has not been completed.
This may happen, for example, in event of CPU looping in an algorithm of some in-
struction without disturbing parity, or when signals are dropped in the CPchtorage
or channel-storage interface.

The anti-hang-up facilities in the processors contain an apparatus that upon expir-
ation of the maximum permitted interval of time for execution of any desired long
instructions generates a signal causing amchine-check interruption and informing
the program of the hang-up with recording of the CPU state. In case of an incom-
pleted instruction with an 10 channel, the correspodning channel is reset to obtain
access to the system external devices. After receiving the signal on the CPU hang-
up, the software, just as when a check malfunction occurs, performs the procedures
to recover system operating capability.

let us discuss and analyze the standard machine-check handling facilities that have
been incorporated in the YeS EVH-Z. The effectiveness of these facilities has been
primarily facilitated by the clear classification of machine-check interruption
conditions into two types: repressible and exigent.

Repressible conditions are those in which the instruction processing capability of
the CPU has not been affected. Therefore, these interruptions can be delayed until
the completion of the current instruction or even longer if necessary. Repressible
conditions are of three types: recovery. alert and repressible damage.

Recovery conditions can be either circumvented or discarded. Malfunctions causing
them are either not reported or if reported are grouped in one subclass, system
recovery. ‘

A machine-check interruption condition not directly related to a hardware malfunc-
tion is called an alert condition. The alert conditions contain two subclasses:

degradation (for example, size of buffer storage has been reduced, fast multiplier
has been disconnected, counter main storage errors to be corrected has overflowed
and others): and

warning (for example, signal for disconnection of air conditioning or fans,
exceeding climatic conditions and others).

Repressible damage conditions are divided into three subsclasses:

timer damage;

timing-facility damage; and

external damage (IO malfunction, channel buffer malfunction in the storage control
unit, for example, and others).

Repressible condition interruptions enable execution of the CPU instruction, then
the waiting program and supervisor interruptions are processed, and only after that
is the machine-check interruption taken if the corresponding masks are open.

119

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Conditions that govern exigent interruptions do not allow the CPU to continue
execution of instructions since direct damage has occurred to its operation.

Exigent conditions are divided into two classes:
instruction-processing damage or incapability of continuing an interruption; and

system damage (all severe situations in the system that cannot be isolated to the
preceding class).

Exigent conditions terminate execution of the instruction and cancel processing
of program and supervisor interruptions.

In accordance with the classes and subclasses of the interruptions, a system of
masks is built that is defined by bits 4-7 of control register lb (table 26).
Just as in the Yes EVH-l, PS" bit 13 controls masking of the entire check as a
whole. If this bit is zero, the check in the machine is inhibited; if one, it is
permitted.

 

 

Table 26
Mnemonic Control Register
Designation Mask Bit Number

RM Recovery 4

m Degradation 5

EM External Damage 6

HM Warning 7

The EH mask is propagated for all three subclasses of the repressible damage class.
In contrast to the Yes EVH-l, another signal has been introduced: CHECK-STOP
which in certain malfunction situations leads to a system halt. This signal is
governed by the status of the zero bit in control register 14. Special attention
should be paid to this. The computer halt mode was not provided in the Yes EVH-l;
it could hang up, loop and stay in the wait mode. Experience of Yes EVH-l opera-
tion showed that it was necessary to isolate a set of malfunction situations in
which it is advisable to provide for halts to preclude destruction of the results
of the system operation prior to the malfunction, to analyze situations from the
engineer's console and make a decision. These are malfunctions after which
recovery cannot be transferred to level Ill programs. The logic of operation of
the check-stop signal, check masks in the PS" and exigent interruption conditions
are model dependent to a considerable extent. The main principle is that a system
halt (hard machine-check) occurs with an exigent interruption condition when the
95“ bit 13 is 0 and there is a check-stop signal.

The algorithm for system actions when a second interruption condition occurs is
shown in fig. 37. The flowchart describes the system response when two machine—
check interruption conditions occur in succession. With two exigent conditions,
the response depends on the state of the check-stop bit. It should be mentioned
that a halt occurs in certain Yes EVH-2 models even when this bit is zero. Three
combinations of two interruption conditions are classified by the status of SYSTEM
DAMAGE. Two or even more represeible conditions lead to a single interruption,

but all repressible conditions that have occurred are reflected in the interruption
code. '

120

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

malfunction 1

lat exigent condition

2nd exigent condition
check-stop bit?

halt

attempt to continue;
conditions maintained
repressible condition
system damage

1st repressible condition
2nd repressible condition
interruption by masks with
two conditions

 

Fig. 37. Flowchart of processing of secondary interruption condition

The standard procedure for processing an error signal from the check circuits is

shown in fig. 38. The real algorithms for processing machine errors are more com-
plex and consider the structural features of the processors. With s machine check,
upon a signal from the check circuits, in certain cases information from the stor-

age elements is stored in main storage. This procedure is called a machine-check
logout.

‘me status logouL is divided into two types:
synchronous--during the interruption procedure; and

asynchronous-mot at the same time as an interrupt. if there is no interrupt or in
the case of a delayed interruption.

In turn, each logout type is divided into two forms:

logout in a fixed storage area; and

extended logout in a storage area, the starting location of which is specified by
the contents of control register 15.

121

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

2. interruption condition

3. repressible

A. interruption enabled?

5. continue operation

6. write extended information in
main storage

7. store interruption code

8. replace PS"

9. Yes 05

10. exigent

11. extended logout

12. instruction being retried?

13. check stop?

14. halt

15. PS“ bit 13?

16. attempt to continue operation or
halt

17. retry counter

18. instruction retry

19. error?

20. interruption enabled?

21. retry counter - 1
7-0

 

Fig. 38. Flowchart of CPU error signal handling

The fixed logout area is used primarily for storing additional information in a
hardware retry of instructions (the Yes-1045 computer CPU). Because of this, fixed
logout can only be asynchronous. To control logout, three bits of the mask in con-
trol register 16 are used: bit 1 -- synchronous extended; bit 8 -- asynchronous
extended; and bit 9 -- asynchronous fixed.

Extended logout is used for model-dependent level III recovery programs and for
statistical diagnosﬂcs on malfunctions. The size of the area in main storage for
extended logout forthe different Yes EVH-Z models is given in table 27.

Table 27
Models Size of Extended liogoutl Bytes
Yes-1025 16
Yes-1035 128
Yes-1045 644 (about 20 percent of the logout area is reserved
for future development)
Yes-105$ 128.
Yes-1060 512
122

FOI;0FFK]AL.USE‘0NLY
FOR OFFICIAL USE ONLY

The machine-check extended interruption information consists of seven fields,
which are stored at machine-check interruption time. Two fields are allocated for
logout of timing facilities: the comparator and the CPU timer.

The contents of the clock comparator are stored in the doubleuord starting at
location 226. The contents of the CPU timer are placed in the doublevord starting
at location 216.

The address of the main storage location in which an uncorrected error in informa-
tion or protection key occurred is stored in bits 8-31 of the word at location 248.

The region code is stored at location 252 and contains model-dependent information
which more specificallydefines the location of the error. This may be, for exam-
ple, the address of the system unit that caused an external interruption or
recovery report.

The register save srea uses three fields starting at loactions 352, 384 and 4&8.
The contents of the floating-point, general and control registers, respectively,
are stored in them.

The main integrated information is an eight-byte interruption code (KP). Eight
bits in the interruption code identify the interruption subclasses, and 14 bits
in this code indicate the validity of information stored in the interruption pro-
cess.

The validity bit of some field is set to one if the stored information is valid
with respect to the point of interruption. fully stored and no additional errors
occurred in storing. Otherwise it is set to zero. It should be stressed that the
validity bits are important to reliable operation of the Yes 08 recovery programs.

The interruption code also contains bits specifying the location of the interrup-
tion point relative to the error location and more specifically defining the nature
of an error in main storage and protection key storage; it also contains the size
of the area for extended logout of information.

6.3. Hicrodiagnostic Procedures

Yes EVH-Z processors and channels make use of the mode of microdiagnostics (the
terms microteating and mcirotest are also used) that permits a substantial reduc-
tion in the time needed to find a malfunction and the skill-level of maintenance
personnel.

Compared to software checking and diagnostics, the main advantage of microteating
on principle is the capability of logging hardware status at each step of synchro-

nization and the capability of accessing additional checkpoints within the makeup
of the extended logout area.

The microteating mode requires additional hardware. Thus, it makes up three-four

percent of that for the Yes-1060 computer processor. It is hard to name a precise
figure for part of this.hardware is used for other purposes: extended logout dur-
ing h malfunction, loading of mlcroprograms, etc. The microteating mode also re-

quires rather laborious development of an information base:

123

FOR OFFNJA1.USEIDNLY
FOR- OFFICIAL USE ONLY

microtest files proper with a size up to one megabyte;

diagnostic information including glossaries and manuals for operation for when the
glossaries do not give a unique diagnosis; and

diagnostic monitors.

As an illustration, given belowarn a brief description of the microdiagnostic sys-
tem for the Yes-1060 computer processor and some features of its realization in the
Yes-1035 and Yes-1045 computers.

The Yes-1060 computer includes the Yes-5009 console cassette storage unit that
effects bit-by-bit storage on two tracks with duplication. Size of the cassette is
about 70K bits. The Yes-5009 storage unit is used both to load working micropro~
grams and to input microtests. In the processor, there is a special unit, the con-
sole storage unit adapter (APN), with 512 bytes of internal high-speed storage that
controls input of information with checking either into microprogram control stor-
age or into circuits for decoding APN diagnostic instructions.

To understand the capabilities of the microtesting mode, it is expedient to examine
the system of APN diagnostic instructions. let us stress right away that AP“ in-
structions are in no way related to CPU instructions. In this sense, the AP" to-
gether with the console storage unit and the storage proper is a kind of minima-
chine, a service processor.

Instructions have a fixed format of l to 506 bytes. Instructions with a length of
1 to 3 bytes are generally used. Long instructions are intended for loading storage
of microprograms. One byte is allocated for the operation code.

The APN instruction system contains a set of instructions for setting two microin-
struction registers. A three-byte instruction sets two register bytes. The setting
instructions are divided into two groups: with and without execution of micro-
orders. There is an instruction to reset the microinstruction registers.

An elementary microtests consists of a string of instructions for setting without
execution and one instruction for setting with execution. Prepared microorders
are executed within one machine step.

Two three-byte instructions are used to poll the status of the CPU storage elements:
DIAGNOSTIC BIT COMPARE and DIAGNOSTIC BYTE COMPARE.

The polled bits and bytes have conventional addressing used in the mode of extended
logout of status and during display on the engineer's console. The bit address,
containing 12 bits, or the nine-bit byte address is specified in the instruction.
The instruction also contains a reference for comparison consisting of one or eight
bits. If the polled result conincides with the reference, the next A?" instruction
is executed; if not, a halt occurs and the instruction address and instruction it-
self are displayed on the engineer's console. After this, the operator refers to
the diagnostic information on the microtest printouts or in the glossary.

In the testing mode in question, execution of microorders is blocked and blocking
is removed only for one step. Operating synchronization is not blocked. To perform
multistep microtests, several instructions for setting with execution have to be

124

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

used in succession. In the process, fetching of microinstructions from control
storage is blocked.

The APN instruction system includes the one-byte instruction LOAD PROCESSOR which
allows loading with initial information the internal processor registers (instruc-
tion buffer, general registers and others), by making use of the LOAD service
microprogrsms located in microprogarm control storage. Service microprograms are
loaded at the same time as working ones. Before the LOAD PROCESSOR instruction,
instructions are used to set the microinstruction register without execution to set
its address part. That is how entry into the service microprogram is defined. The
LOAD PROCESSOR instruction transfers control to the service microprogram. The
loaded data comes directly after the instruction into the APN. There may be indi-
vidual service routines for loading the instruction buffer, general registers, etc.
It is possible, but not advisable, to compile general-purpose loading routines.
Service microprograms must be as simple as possible and require minimum operating
capability of the hardware “nucleus," which should be tested using elementary micro-
tests. A service microprogram is terminated by a synchronization halt. blocking of
microorder execution and transfer of APN control. Then, by using strings of setting
instructions, execution of more complex microtests is possible.

The START SYNCHRONIZATION instruction allows turning on synchronization for a given
number of steps (up to 256).

The one-byte instruction, EXECUTE OPERATING MICROPROGRAHS, allows transferring con-
trol of some operating microprogram, the address of entry of which is specified by
setting instructions, and stepping the operating algorithms for execution of CPU
instructions, starting with the START SYNCHRONIZATION instruction with the number
of steps as one. The latter mode allows reducing the laboriousness of development
of microtests and partially automating this process. There has been developed for
this an experimental generation system which on a computer in good working order
upon the DIAGNOSE instruction logs by steps the individual instructions or combina-
tions of instructions of the CPU. The information obtained is selected and used

to automatically derive sets of microtests.

The APN instruction system contains a number of auxiliary instructions:
RESET MICROINSTRUCTION REGISTER;

SIMULATE KEYS--for microtests that test the circuits for manual operations for the
engineer's console;

END MICROTEST--for organization of looping in case of manual diagnostics;

SET TESTING FROM BUFFER--specifies the mode of loading a microtest into the SlZ-byte
buffer and cyclic execution of it. The alternative mode--the microtest read from
the console storage unit is executed at once one time; and

SIMULATE INCORRECT PARITY-ofor checking check circuits.

The YeS-thS computer APN executes the system of instructions for its structure
quite similarly to that described above for the Yes-1060 computer. It is also used
for checking individual TEZ's [standard exchange cards], and the check tests are
entered from the console storage unit. This APN operating mode is called the
auto-tester mode.

125

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Finally, the Yes-1045 computer APR also controls automatic switching of the modes
for routine checking of the power supply, providing for the running of microtests

together with the unit for the automatic system for power supply checking and disg-
nostics when there is deviation in the ratings of the secondary power sources.

In the Yes-1035 computer, there is no special system of instructions for the APN.
Hicrotests are fragments of microprograms and are loaded from the console storage
unit directly into the micorprogram control storage.

Development and debugging of the microtests themselves involve considerable diffi-
culties. In connection with the large size of the microtests, special automation
facilities are required for these purposes. The HD60 symbolic language for CPU
microtests has been developed for the Yes-1060 computer. The translator from HD60
into the codes of the APN instructions generates a listing of the microtssts and
the data medium on cassette tape. The translator incorporates facilities for
making changes from a display.

The HD60 language is modeled on Yes Assembler and the macro apparatus has been pro-
vided for. The latter substantially facilitates writing of microtests. Variables
in the HD60 language are mnemonic designations of the registers and flipflops
adopted in the technical documentation. A list of the main HD60 statements and
their functions are given in table 28.

Table 28
Statement Statement Functions
SBR is translated into the instruction SINULATE KEYS with the CPU reset
feature -
SRHK is translated into the instruction RESET HICROINSTRUCTION REGISTER
UST is translated into a series of instructions for setting without
execution. Used as operands are the designations of the fields of
the microinstrnrfiom register and the values to which they are to be
set
USTV similar to the UST statement. but is translated into instructions
for setting with execution
KT is translated into the instruction START SYNCHRONIZATION. Operand
specifies number of steps in decimal form
OPR is translated into a series of instructions for byte and bit polling.

Operand structure is similar to that of the UST statement. For exam-
ple. RAV (0-7) - FF means that in polling the register RAV its
reference value must equal FF

The macro apparatus for the HD60 language was designed on the basis of Assembler
macro facilities. The symbols SET and internal macro instructions are used. The

instructions of conventional compilation SBTA, LCLA, AIF, A60 and ANOP have been
defined.
6.6. ommss Instruction

In the instruction set for Yes EVH-Z CPU's. just as in the Yes EVM-l, there is the
special model-dependent instruction, DIABNOSE, intended to extend the capabilities

126

FOR OFFICIAL USE ONLY
FOR OFTNCTAL USFZCNULY

of program checking and diagnostics. The functions of the DIAGNOSE instruction
vary with the model but at the same time have general properties.

These are primarily simulation of hardware errors for checking check circuits and
retry. The DIAGNOSB instruction uses a control word, the individual bits of which
specify the mode of parity inversion at particular points in the CPU. The inversion
mode may be specified for a prolonged time before the next DIAGNOSE instruction or
for two-three machine steps. The latter is needed in checking retry circuits for
simulation of malfunction. Using the control word also enables storing incorrect
information in main storage to check the Ruining code circuits. There is the caps-
bility of turning on and off correction by the Humming code, for example, in detect-
ing malfunctions in the check circuits. In general, turning some CPU equipment on
and off is a characteristic function of the DIAGNOSE instruction. It can be used

to partially or completely disconnect buffer storage, the translator buffer, units
for speeding up operations and other equipment.

The DIAGNOSE instruction also specifies modes for channel checking or diagnostics.
In doing so, it provides for checking check circuits, disconnection of the inter-
face from peripherals and connection of it through the shmulation register located
in the channel. Disconnection of the channel-main storage interface is also possi-
ble. Channel diagnostics, if built into the CPU, are performed in the same way as
for the CPU. if the channel is made as a standalone device, diagnostics are per-
formed by synchronization steps with polling of internal checkpoints.

in the YeS-lObS computer, the DIAGNOSE instruction allows pecifying the micropro-

gram storage address and number of microinstructions required for execution; this

provides for the capability of realization (for testing purposes) of the micropro-
grsm fragments that are loaded from the console storage unit.

Using the DIAGNOSE instruction. logging of the CPU status at a given time can be
effected. To this end, for example, a two-byte field for the synchro—pulse counter
has been defined in the instruction control word in the Yes-1060 computer. In
operating in this mode, the instruction DIAGNOSB loads the two-byte counter that
subtracts one with each pulse of the main synchronization. when the counter is
filled with zeros, a ficticious error signal is generated, CPU status is logged and
a machine-check interruption occurs. Thus, one can produce a "frame-by-frame" pic-
ture of the execution of an individual operation or group of operations. The algo-
rithm for "frame-by-frame" logging of CPU status in some sequence of instructions

is shown in fig. 39. The log "images" are serially accumulated on external storage.

Based on the information obtained, one can construct a program for diagnosing equip-
ment that goes beyond the "nucleus" (in this case, required'as the “nucleus" is
equipment that permits execution of the algorithm shown in fig. 40, i.e. statements
marked with an asterisk). This program, using the DIAGNOSE instruction, effects
step-by-step "photography" of the sequence of test instructions (“instruction 1,"
"instruction 2," "instruction 1") and comparison of the frames obtained with the
reference information derived earlier on a computer in good working order.

6.5. Software Checking and Diagnostic Facilities

Software checking and diagnostic facilities are divided into off-line and on-line.

127

FOR OFFICIAL USE ONLY
’18. “o.

 

Flouchert of diesnoetic
routine

eynchronizetion etepe
DIAGNOSE inetruction

etep counter - N

Instruction (1, 2, i)
logging and nechine-check
interruption

coepere fro-e N to etenderd
print -out reeulte of no match
etep counter - N - 1

so to next caries of "true."
FOR OFFICIAL USE ONLY

On-line routines operate under control of operating systems in parallel with running
of user jobs in the multiprogram mode. The peripheral to be tested is switched to
the off-line mods for user jobs and teh job is started for execution of particular
test sections of the given device. On-line teata allow performing preventive main-
tenance and repair of computers without reducing considerably computer throughput
as a whole. This pertains primarily to computers with a large set of peripherals
among which these is redundancy. Using on-line tests, it is also convenient to
perform preventive maintenance of peripherals operating occasionally in the system
(plotters, optical readers and others). The main aim of on-line tests is to sub-
stantially reduce the time for preventive maintenance of computers end thereby
raise the factor of technical use of the equipment.

Off-line test routines in both the Yes EVH-l and EVH-Z are part of the set of Yes
TEST-MONITOR (THYsS) programs. The set includes the THYeS test control program,
utilities for generating and maintaining media of the set (tapes, disks, cards) and
a set of test-sections of all devices, including central.

The control routine interprets a simple and convenient job language, enables stan-
dard output of messages to the operator and has a set of utility subroutines facili-
tating programming of test-sections. The control routine is compiled so that only
#0 of the simplest instructions (of 183) are used which require minimum serviceable
hardware "nucleus" of the CPU and the input path.

To ensure serviceability of the control routine, the CPU and minimum path of input
from magnetic tape are checked with the so-called base test. The latter checks
the above mentioned 40 instructions and path of input from magnetic tape only in
the read mode.

in the base test, messages are not printed out. Incorrect execution of test samples
is indicated by looping of an unconditional branch instruction to itself or by a
halt upon error signals from the check circuits. Then maintenance personnel per-
form analysis by the display on the engineer console and when necessary the micro-
test system is used (see section 6.3).

The set of off-line routines loadable directly from the medium of an external stor-
age unit amy include any sort of measuring routine for one-time use, for example,
routines to determine throughput of the CPU and channels, checking the accuracy of
timers, checking disk rotation rate and the like.

Development of the complex automatic testing system (SKAT) for the Yes EVM-Z is
planned as a prospect for development of test software. A characteristics feature
of SKAT is the parallel testing of peripherals by the method of elimination: the
devices are serially connected for parallel operation. If n devices are already
operating and an error appears in the system when the n+1-th device is started, by
a halt and start retry among the n+1 devices SKAT defines the minimum configuration
in which the error remains. In the minimum configuration, it is easier to localize
the source of the error. As a rule, these are complex interface errors occurring
in parallel operation of the devices. During operation of SKAI, the CPU handles
background test jobs. By operating modes, SKA? approximates the work of operating
systems and at the same time has testing facilities ("elimination," tracing of
events prior to the error, program halts upon specified conditions and others).

Use of SKAT, an off-line system, permits checking computers with a large set of IO
peripherals within 5-10 minutes.

129

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

A second promising direction in development of maintenance teat software is the
trend to having one (and not two) set of test-sections for a peripheral both in the
off-line and in the on-line testing systems. This will lead to introduction of new
control routines in the TEST-FDNI‘NR and operating systems.

The third direction involves increasing the diagnsotic properties of software tests.
This will require incorporating additional hardware diagnostic modes in the device.

6.6. Computer Haintenance

In maintaining computers during preventive maintenance and prescribed operations
and when malfunctions occur, all hardware-software facilities for checking and
diagnostics typical for the Yes mm are used:

hardware checking and improvement of the machine-check handling system;
hardware retry of instructions upon failure;

system of microdiagnostics;

DIAGNSE instruction;

software testing;

hardware facilities for recovery of channels and 10 units; and

software facilities for recovery of operating systems.

Daily prescribed operations include checking the computer with the base test and a
limited set of the test-sections of the Mes. The configuration sufficient for
starting Yes 08 and the initial batch of user jobs is checked. A complete check of
the configuration needed for the current day is performed with on-line tests under
control of Yes 08.

A malfunction may be detected either during performance of the prescribed opera-
tions or in the working mode. Hhen a peripheral fails, the malfunction may be lo-
cated by using the on-line tests. For this, the peripheral is switched to the off-
line mode, tested by off-line facilities through the unit console and again con-
nected to the system for checking. If there is no capability of repairing the
peripheral by using the on-line tests, repair is either put off till the next
scheduled prescribed operations (if possible) or a search for the malfunction is
made with the THYeS test-sections, as a result of'which running user jobs on the
computer is terminated.

Failures of the central part (CPU, main storage, channels), as a rule, lead to com-
puter failure. It is possible to continue operating in some cases when one can get
by with reduced size of storage or without some number of channels. Hhen the CPU

fails, the base test and the set of TMYeS test-sections are executed to find the
10cation of the malfunction.

when maintenance personnel have some preliminary information on the malfunction,

the single-purpose set of test-sections is executed in specific order. The test
sections enable localization down to a block, instruction and mode. Then the micro-
test system is used selectively. And in the most necessary case, a switch is made
to manual diagnostics using either microtests, the base test or test-sections
(tracing, step-by-step mode, time logical analyzers and the like).

130

FOR OFFICIAL USE ONLY
FOR 0F?ﬂC1Al.USEiDNLY

Information from operating system recovery facilities is used by the engineer for
forecasting the source of failures and further planning of the next scheduled
operational checks.

Chapter 7. Software

Software, which largely determines the capability of hardware, holds a major place
in the development of computer technology. The role of software in extending the
sphere of application and efficiency of the use of computers is decisive. This is
due to the relation of cost of development of hardware and software steadily and
continually changing in favor of the letter.

A considerable stock of user software has now been accumulated and continues to
increase rapidly; this must be taken into account not only in the development of

new computer systems. but also in choosing the directions of development of software.
Therefore, in developing the Yes EVH-Z, considerable attention was paid to

improving Unified System software.

The Unified System software system consists of operating systems, application pro-
gram packagaes (PPP) and maintenance programs.

The main function of operating systems is to increase the efficiency of use of the
resources of a computer installation and to raise the convenience of operator-compu-
ter interaction. Extensively used in the Uhified System are the Yes 08 and Yes DOS
operating systems that are discussed in detail in this chapter.

The makeup and function of 9?? are also considered in this chapter; they extend the
capabilities of operating systems and are oriented to solving specific user
problems.

Maintenance routines are intended for determining the technical condition of compu-
ters both in the mode of preventive maintenance and while jobs are being executed
(see chapter 6).

7.1. Evolution of the Yes 08 Operating System

Yes OS is designed for use in medium and large Unified System models. Its evolution
in developing the Yes EVH-Z was determined by:

expanding the sphere of services offerrad the computer user;

raising the efficiency of software proper; and

raising the efficiency and reliability of use of hardware capabilities.

Within the Yes EVH-Z. expanding the sphere of services is expressed in the follow-
ing:

development of multiprogramming;

expanding the makeup of basic data structures and standardized methods of operating
with these structures;

development of teleprocesaing support;

131

FOR OFTWC1A1.USEIMVLY
FOR OFFICIAL USE ONLY

improvement in the facilities for program debugging and those for checking the
operation of a‘computer system..

Fundamentally important to the Yes EVE-2 is the incorporation of virtual main stor-
age, one of the main resources in a computer system. In the Yes EVH-Z, up to 16H
bytes of virtual storagearesude available to all job steps to be executed and are
allocated among them dynamically. The use of virtual storage for mutual protection
of jobs from each other as well as protection of the operating system control pro-
gram from the jobs has made it possible to increase the number of simultaneously
executable jobs and thereby raise the degree of multiprogrammability.

The development of multiprogruuning in conjunction with the improvement in telepro-
ceasing facilities and methods has allowed creating the time-sharing mode that
enables shared access to the computing resources of the Unified System of Computers.
The user is also offerred the capability of remote job entry based on the developed
capabilities of teleprocessing.

From a software point of view, the transition from the Yes EVH-l to the EVE-Z was
effected by an evolutionary development of the Yes 03 and nos operating systems as
well as by accumulating a stock of application programs.

Yes 08 was developed in the following directions:

A new version of the control program was introduced: SVS (virtual storage mode),
available with NWT and “VT versions from the Yes EVH-l;

A new common telecommunications access method, 0THD, is used in all versions of the
Yes 05 control program;

The time-sharing mode (SRV) and interactive remote job entry (DUVZ) is supported in
all versions of the ccntrol program;

Yes EVM-Z disk storage facilities with 100" and 200“ bytes with sector search are
used in all versions of the control program;

In the SVS version, the user is offerred a new type of data organization on direct
access devices and the corresponding access method, the VSAH virtual access method;

A new component, the dynamic debugging monitor (DDH), has been developed and in-

cluded in 05 to enable debugging of user programs and extend the operating system
capabilities; and

A new component, the generalized trace facility (UST), has been developed and in-
cluded in OS to trace the operation of individual programs and obtain statistics.

To make use of the advantages of the new functional capabilities of the Yes EVH to
the full extent, measures to raise reliability and ammunity to failures were also
taken at the software level. In the Yes 08. existing software facilities for re-
covery and logging of malfunctions were improved and new facilities included, and
the capabilities of dynamic reconfiguration of peripherals and selecting alterna-
tive paths for peripheral access were extended. Programs for handling specific

errors of Yes BVH-Z peripherals were developed and included in the corresponding
components of OS.

The inclusion in OS of facilities for building multimachine configurations also

helps solve the problem of reliability and meet growing requirements for throughput
of computer systems.

132

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

7.2. General Structure and Functions of Yes 08

Closely associated with the development of information processing hardware is the
development of operating systems oriented to specific structures and functional
capabilities of CPU‘s and allowing efficient resolution of the problems facing the
user.

The Yes 08 operating system is an integral part of the computer system and is a
software extension of Unified System computer hardware. It is based on the modular
principle that allows selecting facilities for a specific computer system in
accordance with user requirements. The process of adjusting an operating system
to a specific application is called generation.

Functions of the Yes 08 Operating System. In working with Yes 05, the user formu-
lates his jobs in one of the high-level programming languages: PLIl, FORTRAN,
COBOL, ALGOL or RPG or in the Assembler machine-oriented language. He then sends
his work to the computer center in the form of a job consisting of a sequence of
individual operations associated with the execution of the Yes 05 defined programs.
The operating system executes the job in three stages:

preparation for job processing;
execution of the individual steps of job processing; and

output of results.

Based on the job, the operating system forms a sequence of tasks making up the
individual units of operations for the Yes 08. The operating system optimizes use
of the resources in the computer installation by overlapping in time processing of
several tasks belonging to various jobs. The operating system itself functions on
the basis of tasks that are system tasks. The used principle of overlapping of
execution of several different operations making up the basis for the mode of pro-
cessing of several jobs is one of the versions of the multiprogruuming mode of
operation.

Needed to execute user jobs are certain hardware resources (such as main storage,
10 devices and others) and logical resources stored in the form of programs or
files. Yes 05 special components coordinate the use of all resources in the compu-
ter system, allocating them among the different jobs in accordance with requests
and priority (job control). Requests for computer system resources are a job com-
ponent and are formulated in job control language.

The resources needed are allocated after a job is fetched from the job queue. The
job is entered into main storage and put on the list of active jobs. Execution of
the basic tasks located in main storage at the same time is controlled by special
operating system programs (task management).

Results of the operation that emerge in executing jobs in the form of data are in-

tended for slowly operating devices (printer, puncher, microfilm output) and may be
preliminarily accumulated in storage with direct access. The accumulated informa-

tion is output to the required devices after the job is completed under control of

system output programs.

133

FOR OFFICIAL USE. ONLY
FOR OFFICIAL USE ONLY

Yes 08 Structure. The Yes 05 operating system consists of a control program and a
set of processing programs (fig. 101). The control progrm, intended to control the
CPU for data processing in a computer system, consists of the following components:

job management;
task management;
data management; and

diagnostic facilities.

 

Fig. 41. Yes 08 Operating System Structure

Key :
1 . Yes OS operating system 11 . linkage editor
2 . control programs 12 . loader
3 . processing programs 13 . uti 1i ties
lo . service programs 14 . sort/merge program
5 . translators 15 . Assembler
6 . problem programs 16 . PL/1
7 . job management 1 7 . FORTRAN
8 . task management 18 . 00301.
9 . data management 19 . A160].
10. recovery facilities 20. RPG

Processing programs are the translators and service programs supplied by the soft-
ware developer as well as the programs written by computer users.

There are several different configurations of the control program that can be
formed at generation time:

the MIT mode--control program with a fixed number of tasks;

134

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

the HVT mode--control program with a variable number of tasks; and
the SVS mode--aystem with virtual storage.

Under Ml-“l‘, several jobs can be executed simultaneously. Except for the area for the
nucleus of the operating system, all main storage is divided into fixed partitlons.
The number of partitions, equal to the number of simultaneously executable jobs, and
the sizes of the partitions are defined at system generation time. The computer
operator has the capability of reducing the number of partitions and changing their
size.

Under HV'l‘, the number of simultaneously executable jobs may vary dynamically. A
storage partition is allocated for each job step and its size may also vary from
job to job.

'lhe maximum number of partitions used for job processing under I‘ll-“1' and WT is 15 and
all partitions have different values of protection keys.

In contrast to WT and HFT, the number of partitions is not restricted under SVS,
because not only protection keys but also the structure of dynamic addressing are
used for protection of main storage. 'lhe number of partitions in which jobs are
executed depends on the number of operating initiators. Other limitations on the
number of simultaneously executable jobs under SVS are discussed in section 7.3.

The principles of functioning under SVS are considered in detail in section 7.3.

Operating System Modes of Operation. 'lhe mode of operation governs the basic organ-
ization of the process of processing by compuetr. The Yes 08 may be used in two
modes: batch and shared use.

Operating in the batch mode ensures continuous and efficient use of a computer.
However, the time between receipt of the user job and return of the results to his
may be substantial.

The user operating in the shared-use mode is linked directly to the computer and
controls the processing from a terminal, which substantially reduces the time for
obtaining results from execution of jobs. Yes OS offers the following facilities
for operating in the shared-use node:

conversational remote job entry (DUVZ); and

time sharing system (SRV).

Job Management. Job management facilities effect input of user jobs into the system
and perform all actions associated with allocation of resources, execution of jobs
and output of results to 10 devices. In accordance with functions performed, the
software for job management is divided into the job scheduler, that receives and
processes jobs prepared by the user in the job control language, and the master
scheduler, the facility for interaction between the computer operator and Yes 03.
Jobs coming in for processing from remote terminals are controlled not by the job
scheduler, but by the correspodnlng programs that are part of the shared-use
facilities.

135

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

A programmer uses the job control language (JCL) to plan the processing of the job
and request the resources needed for this. The language includes the JOB statement,
the EXEC statement for a job step and the DD data definition statement. The JOB
statement assigns the job name, class and priority. The job name is used to identi-
fy the job in operator communication with the operating system. The job class sf-
fects the process of forming the input queue, and the priority determines the order
of job entry from the queue of the given class for processing. Also indicated in
the job statement are the size of the storage area needed to execute the job and a
number of other parameters specifying modes for job execution. The EXEC statement
is used to indicate the program or procedure to be executed. A procedure consists
of previously prepared job control statements that can be modified when referenced.
Each job may contain several EXEC statements. For each data set to be processed or
formed during execution of a job step, a DD statement must be provided to code the
data set description, type and number of IO devices requested.

In the operating system, jobs are processed in several stages. In the first stage,
the read—interpret program, a component of the job scheduler, reads the stream of
jobs from the input device and forms the input queue in accordance with the job
class and priority. If there is input data in the input stream among the JCL state-
ments, it is placed for storage on external storage with direct access. Input of
jobs into the system can be effected simultaneously by several input streams from
different 10 devices. Jobs in which JCL errors are detected are excluded from
further processing.

Another componentof the job scheduler, the initiator, selects jobs from the input
queue in accordance with class and priority, allocates the resources needed and
sends them for processing, effecting subsequently the planning of each successive
job step. Parallel execution of several operations results from the start of
several initiators, each of which serves the jobs of well defined classes. Results
of the operation of each job are sent to defined output classes. For each output
class, the statement assigns a system output program and the corresponding external
device. Operation of the system input and output programs and job processing are
effected in parallel, which results in a high degree of automation of the process
of job processing and high throughput of the operating system.

In job processing using the job entry subsystem (KROS), raising the rate of job pro-
cessing is provided for by preliminary reading of the input stream and placing it

in direct access storage. The statements are interpreted when the jobs are selected
for processing. As a result, the job input unit operates at the maximum rate (fig.
42). After allocation of the needed resources, the problem program is laoded and
receives control. Output data sets are stored on direct access storage. KROS
ensures output of output files and system messages to the appropriate output device.

The user can control output by using DD statement parameters or through computer
operator commands.

In loading the operating system and in the process of its operation, the computer
operator communicates with the operating system. The operating system requests
data on operator actions and decisions pertaining to removal and mounting of data
media and reports the status of IO devices. In turn, the operator has the capabili-
ty of controlling system operation, requesting information on its status, and
changing parameters of the system and individual jobs to raise system operation

136

FOR OFFICIAL USE ONLY
INJR 0FTWC]AI.USE!)NLN

 

Fig. 42. Structure of the KROS job entry subsystem

Kay:
1. system input program 5. job control infatuation
2. interpretation of control 6. job control internal data
information 7. input data
3. system output program 8. output data

a. job step processing

efficiency. Using the appropriate commands, the operator starts system input and
output programs, monitor programs and the shared-use mode.

The master scheduler communicates with the operator for the system. In generating
an operating system, both a single-console and a multiconsole mode for its opera-
tion may be selected. In the latter case, the capability is available for using

up to 32 devices operating as consoles. In doing so, one device must be selected as
the basic console since certain commands can be sent only through this device.

Task Management. Yes 08 ensures efficien: passage of user tasks thanks to opera-
tion in the multiprogremming mode. Operating system multiprograsming facilities
that allow simultaneous handling of several tasks on data processing permit these
tasks to make joint use of system computer resources. Steps belonging to the same
job are executed in strict sequence. Overlapping of execution is possible only for
steps of different jobs. However, within a step, several tasks or subtasks may be
formed that will be executed at the same tune with each other and with other tasks.
Processing efficiency is raised substantially through use of programs used in para-
llel that can serve several different tasks at the same time, which saves main
storage (it is sufficient to have one copy of the program in storage) and reduces
program loading time.

The supervisor is the main task control program. Frequently used programs of the
Yes 08 supervisor are part of the nucleus kept permanently in main storage. The
other programs are loaded to main storage as needed. The main function of the
supervisor consists in servicing other operating system programs as well as compu-
ter user programs. The supervisor prevents an uncalled-for effect of programs on
each other and on the operation of a control program, making use of storage protec-
tion facilities and effecting complete control over 10 operations.

137

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In operating in the multiprogramming mode implemented in a single-CPU computer
installation, a maximum of one task can be processed by the CPu at any given time.
This task is called the active task. The active task is selected from those ready
based on priority in accordance with the dispatcher algorithm. When an active task
can not make use of the CPU, for example while awaiting the result of an I0 opera-
tion, or when a higher priority task becomes ready, a new task is selected and made
active.'

The task control program receives control of the CPU after interruptions. The
cause of interruptions may be the emergence of an event that a task is waiting for.
In processing interruptions, information ne ‘ed to restart operation of the inter-
rupted program is stored. Further processing essentially depends on the cause of
the interruption. For example, in the virtual storage mode, in event of an inter-
ruption due to the absence of a needed page in main storage, the mechanism for re-
trieving and loading the required page to main storage begins operating. An inter-
ruption may occur as a result of a special request for supervisor facilities from
another operating system program or a computer user program.

Data Hanagement. Yes 08 standard data management programs support user program in
data processing. Considering that the entire operating system is kept in data sets
on volumes of external storage, data management facilities. in organizing exchange
of information betweeen external and main storage, play a key role in the organiza-
tion of control and processing processes in a computer system. Data management im-
plements control of 1/0 operations, initial processing of data, overlap of IO opera-
tions with processing and protection of data sets from unauthorized access. The
operating system has a catalog used by data management facilities to identify and
find any data set. An increase in the number of programs and data during system
operation leads to an increase in the size of the system catalog.

A data set is a collection of logically associated records with a specific struc-
ture. The operating system offers the user the capability of using fixed, variable
and undefined-length records (fig. 53). A record is considered the smallest logi-
cal unit of information transferred between a program and data management facilities.
To raise the efficiency of information transfer and make fuller use of the surface
of the magnetic media, several logical records are combined into a block that is
written/read tolfrom the medium in one reference to IO facilities. Blocking and
unblocking are performed by data management routines. The blocking method depends
on the type of data used. In using fixed-length records, the block size, as a rule,
is a multiple of the record size; in the case of variable-length records, an addi-
tional field describing the total block length is included in the block. The length
of a variable-length record is contained in the initial bytes of each record.

Data set characteristics are usually stored on external storage with the data set
itself and reflect data set organization, location and size.

The operating system provides an extensive set of IO routines (access method rou-
tines) that free the programmer from writing routines to acess data sets. These
routines automatically perform such functions as overlap of data processing with
10 operations, and preparation and checking of labels for volumes and data sets.
Instead of using Yes 08 data management routines, a programmer has the capability
of writing his own channel routines and IO are management routines. A programmer
may request data by a similar method irrespective of the features of a specific 10
device.

138

FOR OFHCIAL USE ONLY
FOR¢0FFKJAL.USE(NNLY

(1)Mamhuw

Key: ———-(2.JL—-—___
;; 32:3”me lam-lla—
3. records (3) ' - (a) nﬁuqnims
a. blocked '

5. interblock gaps
6. unblocked
7. variable-length records
8. block length
9. data record
10. date
11. record length
12. undefined-length records

 

Fig. 43. Fixed, variable and undefined-
length records

The Yes 08 permits the following types of data set organization: sequential, direct,
library, indexed sequential and telecommunications. let us note also the organiza-
tions associated with creating microfilms and the generalized form of organization
of files on direct access devices that is characteristic for devices with a capacity
of IOOH and 200" bytes.

Sequential organization of data sets is characteristic for the majority of existing
devices and is oriented to sequential processing of records without skipping.

In indexed sequential data sets. records are ordered by the value of a key that pre-
cedes each record. Records in this data set may be processed both sequentially and
randomly. In the latter case, the key of the required record has to be specified.
Similar capabilities are offerred by the direct organization of data sets that per-
mits an arbitrary value of the record key.

A data set with partitioned organization consists of a collection of sequentially
organized partitions. A directory is located at the beginning of the data set. A
record in the directory is selected by keys, and within the bounds of a partition,
sequentially. This form of organization is used to store program libraries and
groups of logically interrelated sequential files of date.

139

FOR 0FTWC1A1.USE1NVLY
FOR OI-l-IL'ML USE. ONLY

Data sets with partitioned, direct and indexed sequential organization may exist
only on direct access devices.

Massages sent over communication channels and kept in an IO buffer are no different
from ordinary data obtained from local devices, and the telecommunications organiza-
tion is provided for message queues.

Data management facilities provide for two data access methods: the method of
access with queues that automates execution of IO operation to the maximum, and the
basic method that permits a programmer to directly participate in managing IO opera-
tions. The queued access method effects automatic synchronization of processing
programs and execution of 10 operations.

An access method may be defined as the aggregate of the data set organization and
the access method used used to process the data set. Basic access methods are in-
tended for all types of data set organization, but queued access methods are used
only for sequential, indexed sequential and telecommunications data sets. The list
of access methods supported by Yes OS in all modes of the control program is given
in table 29.

 

 

Table 29
Data set
organization Acc°°° “'thod
(accesses) Basic eued
sequential BSAH sequential method QSAH sequential
indexed BISAH indexed sequential QISAH indexed sequential
sequential
partitioned SPAM for data sets organized by
partitions
direct BDAH direct access
graphic access method (GMD)
remote method of access for remote extended method of access for
processing of processing of data (BTHD) remote processing of data
data [BTAM] with program control of

messages (0THD) [TEAM]

It is important to note that the graphic access method (GHD) [CAM] is organized in
a way that a request for transfer of data may originate not only from a program,
but also from a display operator. The capability of identification of messages
sent in random sequence between terminals and main storage is provided in the GA"
in data teleprocessing.

ETA“ and TCAH differ in the number of services offerred the user. STAN, the simpler
and more economical method, is a series of macro instructions for organizing IO and
translating messages. Using these macros, the problem program participates directly
in controlling the teleprocessing hardware. TCAM presumes use of a special message
control program oriented to a specific configuration of a teleprocessing network.

As a result, the problem program becomes independent of the specifics of the tele—
processing network.

140

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

UTAH and TCAH are considered in more detail in sections 7.5 and 7.6.
VSAH has been developed for virtual storage systems (see section 7.9).

Recovery Facilities. Software recovery facilities are part of the 08 control pro-
gram and process interruptions from the machine check circuits.

Recovery facilities enable acquisition of information on system errors and the
time of their appearance, recovery of the serviceability of a task or the system
after an error occurs or emergency termination of processing if system recovery is
unsuccessful.

Recovery facilities are discussed in more detail in section 7.13.

Programming Languages. The Yes 08 user is offerred various programming languages
to compile programs: in addition to the Assembler machine-oriented language, he
may use the problem-oriented languages of PL/l. FORTRAN. COBOL, ALGOL and RFC.
Problem-oriented languages are closer to conversational language and mathematical
notation than to machine instructions. Using problem-oriented languages to write
an algorithm makes it independent of the computer instruction list. The program is
written in brief form and outlays for developing it are far less than when pro-
gramming in Assembler.

Problem-oriented languages have certain limitations with respect to external de-
vices used snd functions of the operating system, but at the same time do not re-
quire precise knowledge of the operating system and specifics of specific devices
on the part of the programmer.

Programs written by the user are teh source data for the corresponding translators
that translate the source data into machine codes.

The Assembler machine-oriented language is maximally adapted to computer features.
Programming outlays are rather high compared to using the problem-oriented langu-
ages. Assembler is divided into the basic language and a macro language.
Mnemonics are used to code machine instructions.

PLII is a multipurpose language suitable for both commercial and scientific and
technical problems. The broad range of application of this language is charac-
terized by the wealth of different types of date. PL/l offers the user a large set
of standard functions. There are several different versions of the compiler for
this language. The standard compiler translates source statements into machine
code and produces a listing of the translation and messages on errors detected.
The optimizing compiler generates object code that results in reducing the time for
program execution and substantially reducing storage taken up.

The debugging version of the PLIl compiler is intended for operation in the inter-
active mode with the capability of checking individually input statements of the
source language. The optimizing and debugging versions of the Pill compilers may
be efficiently used in the time sharing mode.

FORTRAN is a problem-oriented language for representation of formulas and calcula-
tions in science and engineering. It has a simple structure and is easy to learn.

141

FOR OFFICIAL USE ONLY
FOR|0FFHJAI.USE(NNLY

Computational operations are in the form of expressions in which arithmetic and
logic operations as well as operations with binary strings and compare operations
may be performed.

"hen the source text is compiled, a listing is produced of the translation and
messages on syntactic errors detected.

There are different versions of the compilers. The ST (standard) FORTRAN compiler
has additional debugging facilities. The OP (optimizing) FORTRAN compiler is used
to generate optimized machine code.

The SS interactive version of the FORTRAN compiler is intended for use in the time-
sharing mode, in which the new expanded versions of the standard and optimizing
compilers, FORTRAN SE and FORTRAN OE, may also be used.

RPG is s problem-oriented language developed for solving simple comnmrcial problems
which requires processing of extensive data sets using simple operations and output
of them on a printer. Only alphanumeric strings and decimal numbers with fixed
point are used as data. The RPG compiler prints out the translation, detects syn-
tactic errors and corrects some of them. The new expanded version of the RPS-2 com-
piler has autoreport facilities.

AUGOL is one of the early problem-oriented languages. Programs written in this
language have a blcok organization. The compiler supports all capabilities provided
in AWOL-60 .

COBOL is a problem-oriented programming language oriented to commercial applications.
Programs in this language process numeric and alphanumeric data.

COBOL compiler capabilities under Yes 08 are the same as those under Yes DOS. The
only difference is in system-oriented elements.

The new expanded version of the COBOL compiler includes additional facilities
enabling its efficient use in the time-sharing mode. There are English and Russian
language versions of the COBOL compilers.

Service Programs. These Yes 05 programs include the linkage editor, the loader,
the sort/merge program and Yes 08 utilities.

The linkage editor end loader combine load modules of separately compiled parts
(object modules) and other load modules. The input data for these components con-
sist of object and load modules and control instructions. In the linkage process,
links are formed between the different parts of the load module in a way as if all
parts of the program had been translated together. The linkage editor and loader
form a load module in relocatable formln the loading process, the module is
adjusted for a specific location in main storage.

The load module may have an overlay structure (structure with planned overlap), for
which it is divided into individual segments loadable into main storage in accor-
dance with a scheme specified by the user. This allows saving on main storage
needed for execution of the module. In operating with a virtual storage system,
the overlay structure loses its value.

142

FOR 0F?1C1Al.USE(MVLY
FOR OFFICIAL USE ONLY

The sort/merge program sorts or merges fixed or variable-length records in ascend-
ing or descending order. This program may be used with Assembler, COBOL and RH.

Yes 08 utility programs include standalone service programs, system service pro-
grams, data set service programs and system programs: service programs.

7.3. Virtual Storage Support

The operating system supporting virtual storage in the Yes Elm-2 is an evolution of
those versions of Yes 08 used with Yes m-l models. Based on a number of hardware
and software facilities, the user is offerred virtual storage with a capacity of
16)! bytes, which substantially exceeds the size of computer real main storage. Let
us note a number of advantages steaming from the use of virtual storage.

1. Using virtual storage, the user has little need for the overlay structure and
subdividing tasks into a sequence of smaller tasks. Program are automatically
overlapped based on the page swap mechanism.

2. Real storage size ceases to be a critical factor in locating components of the
operating system and user tasks, since they are located in virtual storage. In ex-
tending the real storage of a computer installation, operating efficiency automati-
cally increases based on the concept of paging.

3. Real storage fragmentation is reduced. Using the page organization for storage
management eliminates fragments of real storage between and within partitions.
Fragments may exist only in virtual storage. In real storage, fragmentation is
substantially reduced.

lo. The rather efficient apparatus of dynamic management of a basic resource of a
computer installation, real storage, is realized. If a task is not very active,
because of paging it will use an insignificant amount of real storage.

5. The degree of multiprograming rises significantly, since the most active pages
of a substantially greater number of tasks than in a conventional system may be
present in the same real storage.

6. The system has a greater area for resident functions that may be used simul-
taneously by many tasks. Virtual storage can hold a great number of supervisor
programs and access method programs. When they are not being used, they do not
take up real storage.

The virtual storage system is supported by the control program SVS which implements
multiprogransning with a variable number of tasks that use virtual storage at the
same time.

Virtual Storage. The main aspects of the function and use of virtual storage may
be described by using the concept of address space. There is address space for a
program, understood as the tange of variation of addresses of its instructions and
data. and address space of real storage with reflects the capacity of computer main
storage. There is also the address space of a computer installation that describes
the maximum possibel size of real storage that can be connected to the computer in-
stallation. A computer system with a 26-bit address may have an address space of

143

FOR Ol-‘HCIAL USE ONLY
FOR OFFICIAL USE ONLY

16H bytes. This concept of address space that may be many times larger than real
storage is called virtual storage.

The traditional principles of multiprogramming that became widespread in the compu-
ter systems on the base of the Yes EVN-l were based on the total size of address
spaces of programs being processed at the same time not exceeding the address space
of real storage. The placement of programs in real storage in these systems was
based on the concept of static relocation that consisted in translating program ad-
dresses at loading time in accordance with its location in real storage. Increasing
the degree of multiprogramming was curbed by teh sizes of real storage and the pre-
sence of unused fragments between the partitions occupied by tasks.

The use of virtual storage is based on using the strategy of dynamic relocation im-
plemented by the facilities of dynamic address translation (DPA) [DAT] and on using
the segment-page organization of the address space and external page storage.

Dynamic translation of virtual addresses into real is based on the segment-page or-
ganization of virtual storage. A virtual address has the structure (S, P, i) (see
fig. 4). where S is the segment index, P is the page index and i points to the
specific address (displacement) within a page. In the Yes EVE-2, 4 or 8 bits are
allocated for coding the segment index; therefore, there may be either 16 lH-byte
segments or 256 64K-byte segments in virtual storage. For coding the displacement
of i. 11 or 12 bits may be allocated, and page size is 2K or “K, respectively.

One-megabyte segments may contain, as a function of the structure of the virtual ad-
dress, 512 or 256 pages, while 66K-byte segments may have 16 or 32 pages. Transla-
tion tables, a segment table and several page tables, are used in the operation of
the hardware facilities for DAT. A segment table consists of elements that, as
shown in fig. 64, define the availability of segments and the length and addresses
of the corresponding page tables. Page tables consist of elements that indicate the
availability of a page in real storage and the high-order bits of its real address.
There is an entry in the page table for each page of virtual storage. The structure
of a page table entry is shown in fig. 45.

‘“”' - ulnar Arum-
UWU ' “I. ' , ' I
"‘l'f'i‘ "2°27" (a) W%

Fig. 44. Structure of segment table entry Fig. #5. Structure of page table entry

Key: Key:
1. page table length 1. high-order bits of page address
2. page table address 2. availability

3. availability

The beginning address of the segment table is stored in control register 1. Segment
and page tables must be fixed in real storage.

146

FOR OFFICIAL USE ONLY
r-°v --y— . .-

a. displacement

5. segment and page index
6. reference bit

7. page block address

 

Fig. 66. Associative Registers

Program interruptions with codes X'lO', X'll' or X'lZ' may occur in the process of
dynamic address translation that indicate that reference was made to an unavailable
segment of virtual storage or an unavailable page or an invalid address was detected
for the segment or page table.

Special hardware facilities have been provided to increase the translation rate.
Associative registers-are used in small models, and a rapid translation buffer in
the large ones. A system of eight associative registers is shown in fig. 66. In
referencing storage, the part of the virtual address containing the page and segment
index is compared with the first part of the registers. The registers hold informa-
tion on the eight last used pages. identified by their segment and page indexes.

If there is a match in one of the registers, the real address is generated based on
the displacement and the contents of the right portion of the register. If there is
no match, the tables are used for translation. The information obtained on the lo-
cation of pages in real storage and the correspodning segment and page indexes are
stored in one of the registers in accordance with the replacement algorithm.

External Page Storage. Since virtual storage is many times larger than real stor-
age, the latter holds only the most active pages. Pages to be used are kept in
external storage in the system data set, SYSl.PAGE, that is called the page data
set.

In the process of translating virtual addresses, when the system detects that the
required page is not in real storage, a copy of this page is moved into real storage.

The location of pages in external storage are reflected in a special table, called
the external page table.

165

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Paging organization is a function of the operating system component called the page
supervisor.

Page Supervisor. From the viewpoint of paging organization, real storage is divided
into fixed and page-replaceable (dynamic) areas. The special table reflects the
list of real storage pages available for exchange and their status.

The page supervisor performs the following basic functions:
management of the segment table, page tables and real page tables;
start of operations associated with page swapping;

processing of interruptions associated with the absence of needed pages in real
storage;

management of page replacement in real storage; and

management of the intensiveness of page exchange.

The algorithm for replacement of pages in real storage is the basis for page
exchange.

Two replacement algorithms affording common interface with Yes 08 components have
been implemented in the page supervisor. The Yes 08 user-programmer has the capa-
bility of including the required algorithm in the specific version of Yes 08 when
it is generated.

Translation of Channel Programs. In contrast to the CPU, Yes EVM IO channels can
not translate virtual addresses into real ones. Therefore, virtual addresses used
in channel programs have to be translated into real ones by software. Channel pro-
grams with virtual addresses are translated into logically equivalent programs with
real addresses. Because of this, access methdo rpograms that exist in previous

Yes 08 editions may be used with virtual storage with no change. The channel pro-
gram is translated right before the start of the TO operations. Created in the
system queue area is the logically equivalent duplicate of the channel program, but
now with real addresses, which is used in starting the 10 operations. In such
translation, it may happen that all addresses required are in non-adjacent real
pages. In the Yes EVH 10 channels, there is the hardware facility of indirect ad-
dressing that allows sending data to nonadjacent pages of real storage.

During execution of the 10 operation, all needed pages need not undergo page ex-
change. Before starting the IO operation, theae pages are fixed in real storage,
and unfixed after successful completion of it.

Jobs in which dynamic modification of channel programs is effected during execution
of IO operations are executed in a special mode, when the the virtual addresses of
the instructions and data match their real addresses. In this case, channel program
translation is not required.

Channel program translation facilities are part of the ID supervisor. Channel pro-

gram translation does not require fixations on the part of the programmer and is an
internal function of the operating system.

146

FOR OFFICIAL USE ONLY
FOR OFFICIAL USI-I ONLY

7.4. Virtual Storage Node SVS

‘lhe mode of multiprograming with a variable nuaber of tasks, that make joint use
of virtual storage (SVS). is oriented to Yes EVH-Z hardware facilities and is a
practical implementation of the concept of virtual storage in the Yes EVH. It was
developed on the basis of the HVT mode and affords multiprogram execution on a com-
puer of programs, the total size of which substantially exceeds the capacity of
real storage.

M7 a nun-1a
(2)551:ka ROY:

  
 
  
  

1. virtual storage
2. MAX address

% 3- job (1. 2. so- R)
? is” (0- dynamic area
:65 n . 5. job partitions in batch
gs nun-7m.) rocessin
mam P 3
‘ 6. system queue area

4::

7 . general area

(3) Jsduuuel :. master scheduler
_ . . nucleus
nmrmm ' 10. fixed area
(symm n. address 0

(7%” mar»
rnalwuu‘ MoqulwuN

(11)

C
a " eta-an
: sincere 9

Fig. (07. Structure of virtual storage in SVS mode

Virtual storage is used jointly as one address space by both the control program
and all computer users in accordance with the principles of allocation of storage
in the HVT mode. Virtual storage is divided into two areas: the fixed (containing
the nucleus of the control program, the system queue area, the general area, and
the master scheduler partition) and the dynamic, in which partitions are organized
for execution of jobs (fig. 47). The maximum size of the dynamic area is

V - 16H bytes - vfix

where V is the size of the fixed area.

fix
'Ihe virtual storage size provided with a specific loading of Yes 08 is governed by
UIB size of the page data set used, since the more space for page storage, the
greater the size of virtual storage.

Job execution in the dynamic area is affected by page size: program interruptions
occur when pages are not in real storage and there are delays in program execution
due to page transfers. This effect can be avoided, if desired, by fixing in real
storage both individual apges and entire partitions. Therefore, under SVS, there
are two types of partitions: with virtual ddresses (V-V) and those in which virtual
addresses equal the real (V-R).

147

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Virtual storage for VsV partitions is allocated by segments. The size of a V-V par-
tition is set to s multiple of segment size, even when less storage is requested in
a job for the execution of which a partition is created. The same protection key,
equal to one, is set for all these partitions, because storage protection is orga-
nized not only by using protection and storage keys as in the HVT mode, but also by
using the translation tables. According to the principles of operation of the Yes
EVM-Z, in the segment table used in dynamic address translation, in the entry for
each segment there is a bit for the "availability-unavailability" of access to this
segment. Any reference to the segment (either a write or read) for which this bit
is set as "unavailable" causes a program interruption, perceived by Yes 08 as an
interruption due to a storage protection exception.

In a transfer of control to a task being executed with a nonzero protection key,
availability in the segment table is indicated only for partition segments and seg-
ments occupied by Yes 08. In a transfer of control to a task being executed with a
zero protection key, i.e. having the right of access to any partition, availability
for all segments is indicated in the segment table.

To reduce the time required to readjust segment tables when tasks are switched, two
segment tables are created that differ only in the availability bit setting: a user
table, in which availability is indicated for partition segments and those taken up
by the computer Yes OS, and a system table in which availability is indicated for
all segments. Because of this, readjustment of segment tables is required only
when tasks are switched that are being executed in different partitions. In trans-
ferring control between system programs of the user, readjustment of tables is not
required; loading the address of the corresponding table into the control register
suffices.

In transferring control to tasks being executed with a zero protection key, the
address of the system segment table is loaded for translation; in transferring con-
trol to tasks being executed with a nonzero protection key, the user table is used.

For V-R partitions, virtual storage is allocated by pages. The allocated pages are
fixed in real storage, and the page and segment tables are adjusted so that the
virtual addresses equal the real in dynamic address translation. The size of this
partition may be less than the segment size and a multiple to the page size. For
storage protection in this case segment tables are not used: various protection
keys not equal to 0 or 1 are set for the partitions. Consequently, there may be

no more than 14 V=R partitions. They are created in the real storage area directly
following the nucleus of the control program. The size of this area is set during
generation of the specific version of Yes EVM 08. During loading of it, the com-
puter operator has the capability of changing the size of the area for creating
V-R partitions.

In the partitions of both types, local system queue areas (LSQA) are created in
which control blocks related only to the given partition are placed (under HVT,
they are placed in the SQA [system queue area]). This substantially localizes re-
ferences of tasks to pages of virtual storage, for example in processing storage
control block queues, and reduces the number of references to pages not present.

One segment of virtual storage is allocated for the LSQA. It is allocated by the
control program automatically, above the size of virtual storage specified in the
job for the execution of which the partition is created.

148

FOR 0FF1C1AI.USE¢)NLY
FOR OFFICIAL USE ONLY

This organization of partitions and storage protection under SVS simplifies the re-
striction on the number of partitions under INT: The number of partitions created
is limited not by the number of protection keys, but by the size of virtual storage
provided. Page exchange for the fixed and dynamic parts is organized as follows:

in the fixed part, pages containing the nucleus and SQA storage sectors, allocated
by the virtual storage control program, are fixed in real storage and not subject

to page exchange; pages containing the general area and the master scheduler parti-
tion are subject to page exchange;

in the dynamic part. pages containing V-R partitions and LSQA storage sectors, al-
located by the virtual storage control program, are fixed in real storage and not

subject to page exchange; pages containing V-V partitions are subject to page ex-
change.

For the page data set, it is necessary to allocate a size that enables holding the
pages of the fixed part subject to page exchange and the needed number of parti-
tions from the dynamic part. ‘Ihe size of pages in the fixed part subject to page
exchange varies with the different Yes 05 versions and averages about 3" bytes.
Ihe size and location of the page data set are set only when Yes 08 is loaded.

Paging means that a page is kept in real storage only when it is referenced; it is
withdrawn to the page data set by the paging algoritlu as soon as the need arises
for placing another page in real storage. Placing a virtual page in real storage
or removing it may also be performed upon program requests.

Program requests for placing, fixing, unfixing and removing pages change the normal
conditions for functioning of the paging algorithm, since they reduce the size of

real storage accesible for organization of the page exchange. Therefore, the nus-
ber of simultaneously fixed pages is a parameter that depends on the amount of real

storage, the intensity of requests for replacement of pages and on the intensity
of servicing them.

SVS components subject to page exchange make up a large part of the system and use
external page storage in the process of operation. However, unallocated segments
of the dynamic area of partitions does not use external storage. Similarly, all
pages not used in the segments do not require external page storage. Unallocated
segments and pages unused within segments are "potential" address space.

The distribution of pages in the page data set is reflected in the external page
table.

if an interrupt occurs due to unavailability of a page in the process of program

operation. the system makes use of the external page table to determine the loca-
tion of the needed page.

A page selected for replacement is moved to the page data set only if it is altered.
Pages are stored in an order that ensures a balanced load on the devices holding
the page data set and minimum movement of each device‘s reading mechanism. ﬁne
control blocks describing the location of the external pages are used to determine
the position of the reading mechanism and the free space closest to it to which

the page is moved from real storage. This achieves minimum movement of the reading
mechanism which reduces the time for page exchange.

169

FOR OFFICIAL USE ONLY
FUR UH'ICIAL USE ONLY

To prevent unproductive, extranely intense exchange of pages that is possible when
the number of problems executed at the same time increases, management of page ex-
change intensity has been implemented. The criterion for management is the page
exchange intensity, i.e. the number of pages transferred between real storage and
the page set within a unit of time. When paging increases to the value

Inn a ’0': +4.],

where Iopt is the optimal intensity and A 11 is the permissible increment of inten-

sity, execution of one or more low-priority tasks is halted. "hen intensity de-
clines to the value - -
I...-I...—A.I.

where A 21 is the permissible intensity decrement, execution of some halted tasks

is resumed. The optimal intensity of paging lo the permissible interval of

. Pt'
change in paging intensity M-A.I+A,I, and the time interval used in measuring the

intensity are the major parameters affecting the throughput of computer systems and
depend on its structure, i.e. on the manber of IO channels, types of 10 devices
intended for placement of the page set.

The main difference in the process of loading programs under SVS from that under
HVT is that the programs are loaded not into real, but into virtual storage. Before
loading, the program is in the system or personal library. The loading program
reads the program to be loaded and translates the addresses of the program being
loaded in accordance with the location of the partition in virtual storage. In
doing so, the program being loaded autoamtically seems the segment-page format
and is withdrawn to external page storage in the paging process.

After completion of the program loading, control apsses according to the virtual
address to the entry point of the loaded program. The required page will be placed
in real storage and the loaded program starts its execution.

7.5. Basic Telecomunications Access Method

The basic telecoanunications access method (BTHD) [BTAM] is used for creating pro-
grams that implement exchange of data between a computer and remote terminals by
using consnunication channels. BTAH affors use of only half-duplex channels.
Communication is established through switched or unswitchsd cosnunication channela.

This access method provides the progranner with facilities for creating a subscriber
list that contains the information needed to establish conuunication with a remote
station. BTAH effects addressing and interrogation of terminals, sending and re-
ceivlng of messages, insertion of changes to the the subscriber list, buffering

and code translation.

in developing programs by using BTAH, execution of the following procedures that
enable proper functioning of the teleprocessing hardware must be provided for:

definition of the teleprocessing system;

use of the code translation table;

150

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

opening and closing of data sets; and

management of the data transmission channel.

The teleprocessing system is defined by creating descriptions of channel groups,
data transmission multiplexer parameters and terminal parameters.

The main aim of uniting channels into groups is the capability of making use of the
common resources of the access method for all channels in the group. Therefore,
channels with similar characteristics are united into a group.

Using the Code Translation Table. The Yes EVM internal code is the DKOI [decimal
information interchange code], while the teleprocessing equipment sends information
in other codes. The macro definitions of BTAH contain code translation tables; in-
dication of the name of the needed table in the macro instructions ASHTRTAB and
TRNSLATE by the programmer suffices. The programmer may also specify his own
translation table if required for specific applications.

Opening and Closing of Data Sets. The procedures for opening data sets of communi-
cation channels are performed by using the macro instruction OPEN. As a result,
BTAH programs are loaded into main storage and auxiliary tables are generated. If
it turns out that some channels were not opened due to their unavailability for
transmission, one can later open a single channel by using the maco instruction
LOPEN. After completion of data transmission, data sets are closed by using the
macro instruction CLOSE.

Data transmission channel management consists in establishing communication between
the computer and the remote station and adhering to the algorithm for transmission

of messages over the communications channel. This management is effected by using
the access method programs taking into account the specifics of the operation of

the HPD--APD-AP [data transmission multiplexer--data transmission equipment-terminal]
link. In the process of receiving and transmitting information, a block by block
check is made by using the check sum. when information is received with an incor-
rect check sum, the block in error is retransmitted.

The standard READ and WRITE macro instructions are used for message transmission.
To establish communication with a remote station and send the first block of data,
these maco instructions are used in the modes of intial read and initial write.
There is the capability of transmitting data in the transparent mode, when any bi—
nary code combination can be transmitted as data, even if it matches the control
symbol code.

7.6. General Telecamnunications Access Method

Compared to BTAH, the general telecommunications access method (0THD) [TCAH] is at
a higher logical level. Using TCAH frees the applications programmer from having
to take into account in programming the features of the algorithms for data trans-
mission through the communication channel, to program terminal polling and sampling
and code translation, and to define the network configuration. All this is per-
formed in a separate task by using the message control program (PUS) [MOP].

The “CF is generated for a specific teleprocessing system by using macro instruc-
tions and TCAM program modules; it operates in the partition with the highest

151

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

priority. The MC? has several sections:

activation and completion of the teleprocessing system operation;
definition of data sets needed for MC? operation;

definition of the teleprocessing network configuration; and

message handlers.

The first sectiop of the H6? must be the section for activation and completion of
the teleprocesaing system operation. The first macro in the section is INTRO,
which defines the basic parameters of the HOP. OPEN opens the HOP data sets.

READY transfers control to the HOP dispatcher which plans all HOP operations; if
there are none, it is placed in the wait state. after completion of the HOP opera-
tion, control is passed to the macro CLOSE, following the macro READY, which close
the MC? data sets; then, control is returned to the operating system by using the
RETURN macro.

The data set definition section contains macros:

for the groups of communication channels, for a data set, for the message queue,
for the MC? system log, for check-point data sets, as well as PCB macros for
user application programs.

The section for defining the teleprocessing network configuration contains macros
that describe cammunication channels, terminals and application programs. In this
section, polling lists are built and other parameters that define system configura-
tion are specified.

The section for message handlers contains macros used to specify unique handling of
messages circulating in the system for each group of terminals or application pro-
grams. In particular, message handler macros can be used to control putting mes-
sages into a queue in accordance with priorities, edit messages, control routing by
sending messages to the needed destination queue, translate messages from the trans-
mission code to computer code and vice versa, etc.

The HCP keeps message queues on NMD [magnetic disk storage] and in main storage; it
has facilities allowing the computer operator to control network operation by using
commands issued from the console. The facility for creating checkpoints allows re-
sumption of MOP operation at the point previously planned after computer malfunc-
tions.

The NC? has facilities affording interface between the MC? and user application
programs.

User application programs operate usually in individual storage partitions; they
interact with terminals through the MCP and by using the usual sequential access

methods in Yes 08. This allows writing application programs in high-level langu-
ages and debugging them in advance without using the data teleprocessing devices.

152

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

7.7. Remote Job Entry Node

Conversational remote job entry [CRJE] facilities allow job entry from remote termi-
nals, connected to a central computer by communication channels, and from local dis-
plays. They offer the CRJE user, working at a terminal. the same capabilities the
ordinary Yes 08 user has at a central computer installation. The CRJE ensures ef-
ficient use of central computer equipment through joint use of computer resources

by several users at the same time. There is also the capability of joint use of
information media by several users executing jobs similar in content.

The CRJE system operates within a system task similar to system IO tasks. A termi-
nal keyboard and printer (or display) are available in the CRJE system for input of
source information and output of final results. Jobs sent by a user come into the
operating system for subsequent planning and execution. "hen a job input from a
terminal completes its operation, all its output is placed in a special class for
the CRJB system. Then the contents of this class are sent to the appropriate user
terminal where the job was input. The CRJE system enables creation of new data
sets, every possible operation on them and modification of any accessible informa-
tion. including jobs hmnediately prior to their input into the system stream of jobs
at the central computer installation.

There are three modes of user operation in the CRJE system: command, edit and
input.

when a user terminal is connected to the system. operation occurs in the command
mode. The user switches to the edit or input mode by using the EDIT command. In
the edit mode, commands are entered that are used to perform different operations
on the data sets. Operation in this mode is terminated by entering the END command.
The input mode is used to create a new data set or add records to an existing file.

In the edit mode, the terminal user any request syntactic checking of PL/l or
FORTRAN statements. if the appropriate syntactic checking programs have been in-
cluded in the system. Checking is done on a single statement; therefore. errors
will not be detected when a check of the relations between statements is needed to
find them. For statements entered in the input mooe, there is the capability of
automatic checking. When errors are found, an appropriate message is sent to the
terminal user.

In the command mode. the CRJE system user has the capability of inputting jobs from
data sets located in the terminal user's library and checking the process of its
execution at the central computer installation by requesting information on job
status. The terminal user may cancel a job input by him at any time. By using com-
mands. the terminal user may obtain infonnation on the status of data sets prior to
job execution. Hhen job execution ends, the terminal user receives a message indi-
cating normal or abnormal end. This nmans that job output is available for the
user. By special cannand, all the output from the given job, placed in the output
class for CRJE. is sent to the terminal. If the terminal does not have special in-
terruption facilities, the user may use the capability of receiving the output in
groups containing a specific number of lines. Information output may be interrupted
after any group. If the terminal is equipped with interruption facilities, the user
of CRJE may interrupt output at any time. The data set in the output class for CRJE
is erased after it is completely output to the terminal. If output is interrupted

153

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

during data set transmission, this set is not erased. "hen necessary, the user may
resume information transmission, as well as sent it to the printer at the central
installation.

7.8. Time Sharing System

The Yes BVH software includes the time sharing system (Sky) [T88], implemented in
the form of an independent program functioning within Yes 08. T88 assumes shared.
conversational and simultaneous use of a computer system by several users. This
system offers users the most advanced form of multiprogramming and functions under
control of Yes OSIHVT versions.

T88 offers a terminal user a sufficiently universal method of control of the comput-
ing process, implemented in the form of a command language and suitable for many
practical applications. Terminal software is based on Yes 08 TCAH. Including T88
in Yes 08 has no effect on the amount and nature of functions offered computer

users during operation in other processing modes. The capability is provided for
combining T88 and batch processing modes.

In a functional sense, TSS capabilities are considerably broader than those offered
users by the 6313 system. The fundamental differences between CRJE and T88 are as
follows. TSS jobs are not put into the usual job queue. but are executed directly
under user control. In contrast to CRJE, which operates at the system task level,
T88 affects the operation of the Yes 08 control programs. The number of T88 users
whose jobs execute in parallel exceeds considerably the number of CRJB system users
because of the efficient use of external storage used to hold programs when they
are withdrawn from main storage and awaiting their turn for execution.

A command language similar to that in CRJE is used in T88. The syntax of problem-
oriented language statements is checked during input. Error messages are output to
the terminal.

TSS Operating Algorithm. The set of jobs to be executed in T88 form a queue that
is placed in external storage. Jobs are successively entered from the queue (fig.
48) into real storage and processed within a specific time slice Z, which depends
on queue service time T and the number of jobs K.

T
Zulu-IE
Selection of the tiem slice depends on a number of contradictory factors. The time
slice must be sufficient for the system to be able to perform a certain quantity of
useful work and at the same time ensure a sufficiently quick response to user re-
quests, equal to the queue servicing period. At the same time, a decrease in the
slice leads to a decrease in the frequency of replacement of jobs in real storage

and increases system overhead for transferring them.

The selection of these parameters is affected by the number of partitions in real
storage allocated for execution of jobs in the T88 mode, the specific composition
of the job mix and a number of other factors.

Jobs in real storage at the same time make use of the resources of the computer in-
stallation during smaller time slices just as is done in the usual batch processing
mode (fig. 49).

15‘

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

  
      
   

Job Queue in
External_Storage

Real Storage

  

m (7) (7)

 

Fig. 69. T55 job processing together
with batch processing jobs

Key:
1. processing slice (A, B, C, D)
2. processing slice (5, F)
3. job (c, r, N)
a. TSS job partitions
. 5. batch processing partition
, ,5, m, m?" ”3:1.” 6. smaller slices

aa'um n‘m We as ”mu 7. partition (I, 2, 3)

 

serviced

Fig. 68. T85 job processing

Key:
1. job processing slice (A, B, C, D)

The TSS control task functions under OS/HVT and controls TSS job exchange between
external and main storage. Hhen the operator issues the command rss START, the T88
module receives control and forms the storage sector needed for the task in which
buffer areas are built, partitions for job execution are formed and a partition con-
trol task is built for each partition.

In the process of functioning, the T88 mode control task effects replacement of

jobs in real storage, while optimizing the use of resources of the computer instal-
lation. It builds channel programs for each request for job input or output. By
using the apparatus of program-controlled interruptions, high efficiency of the job
replacement process is achieved: the interrupt processing program completes the
next channel program after the current channel program. Considering the high inten-
sity of exchange. the process flows as one unending IO operation. Information on
the location and sizes of the programs being transferred is formed in partition con-
trol task tables. If the operator issues the STOP command, each active user is in-
formed of the termination of the operating session; the storage area occupied by T85
is returned to the operating system and operation is terminated.

155

FOR OFFICIAL USE ONLY
FOR OFFICIAL "SI-I ONLY

The partition control task operates in each partition allocated for job execution
in the T88 mode. It switches to active status those jobs given a partition for
the current time period and monitors the conditions associated with the end of the
servicing time. In particular, if 10 operations are not complete at the and of a
processing slice, the job is retained in the partition until the end of these
operations.

LOGOH-LOGOFF Handler. The functions of this task are similar to the functions of
the initiator and read (interpretation) program that operate in the conventional
batch processing mode. The LOGON-LOGOFF handler is loaded into a partition for
planning of the new job when the immediate user is connected to the T88.

The terminal control program is a monitor and the specific user operates under its
control. As a function of the request, it retrieves the module needed for proces-
sing and passes control to it. After completion of processing of the request, the
terminal is sent the message READY and the program is ready to receive the next
command.

The message control program (PUS) [HOP] is a TCAH component. It contains the des-
cription of the configuration of terminals connected to the system and the 10 areas
for storing information transferred between main storage and the terminals; it
effects data exchange between the 10 areas and buffer areas of T88. The HOP func-
tions in Yes 08 as an ordinary problem program in a real storage partition. It
must have the highest priority among the problem tasks operating in the operating
system.

Command and User Program Handlers. At this level of control are effected checking
of the correctness of commands, correctness of operand coding, calls of modules
that implement the standard servicing algorithms, and programs prepared by the T53
user.

7.9. Virtual Storage Access Method

The virtual storage access method (VSAH) is based on the concept of virtual storage
and is used in systems with virtual storage; therefore, data sets with virtual or-
gsnization are stored as pages. This access method is most efficient when disk
storage with 100" and ZOOM-byte capacity is used.

This access method combines all the functional capabilities of all the other access
methods used in the HVT and NET operating systems, except operation with parti-

tioned data sets. VSAH substantially reduces data access time, especially because
with the indexed structure, the process of adding new records is organized without
use of overflow areas. VSAH offers the capability of indexing data sets by several
keys at the same time, which is very important for ASU [automated control systems].

7.10. Facilities for Building Hultimachine Complexes

Hardware facilities have been provided in the Yes EVH-Z to implement multimachine
systems consisting of several 090's and the corresponding IO devices and channels.
Nultimachine systems allow increasing the overall throughput of a computer instal-
lation and have increased reliability when errors and malfunctions occur, since a
computer going down in a multimachine system leads only to a reduction in through-
put.

156

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Computer complexing facilities (direct control facilities, channel-to-channel adap-
ter, common extent of external storage) enable organization of communication and ex-
change of information between several computers in a multimachine computer system.
Direct control facilities are used for rapid exchange of control and synchronizing
information between two computers in a multimachine computer installation. A
channel-to-channel adapter (ARK) may be designated for exchange between several com—
puters in a system of both control information and data files at the rate of opera-
tion of 10 channels. A common extent of external disk (HID) or tape (NHL) storage
units allows two computers to make use of common information files stored in this
extent.

Hultimachine system software is implemented at two levels. On the first level,
facilities are provided to control information transfer between CPU's, effected by
problem programs. Data exchange through an ARK occurs similar to the operation with
other to devices with the use of the operating system access method. 0n the second
level, multimachine system control is implemented, which optimizes distribution of
the programs, subject to processing, between the various CPU's making up the complex.
Central control of the complex is performed by the host machine which organizes
distribution of operations.

A modified Yes 05 control program, which monitors the entire system and controls
the cosmnn job file, is used to control the multimachine system.

Appropriate software is provided within the Yes 08 for each level of organization
of the multimachine system.

Direct control software facilities presuppose data exchange between two computers
connected by direct control interfaces.

The DIRECTVR macro is provided for access to another CPU through the direct control
interface. Reception of information sent through the direct control interface by
using the DIRECTHR macro is effected by Yes OS. Depending on the operating mode
chosen, information feedback for monitoring may be initiated. Then control is
passed to a procedure for analysis of the information received, which is a program
interface between the programs for processing the received information.

In Yes 08, there are standard interface programs for direct control facilities and
an asynchronous exit to a program prepared by a user is provided.

In asynchronous operation of two computers, a conflict situation may arise when re-
quests for information exchange over the direct control lines come into the two
computers at the same time. To overcome this| in the system loading process there
is an exit to the console for the purpose of specifying the priority when simultan-
eous requests from two computers come in. Operator responses on the various com-
puters in the multimachine system must be coordinated.

Program Control of Channel-to-Channel Adapter. In connection with the sequential
structure of data sets sent through an AKK, two access methods, QSAH and BSA“, have

been provided. Each provides its own set of macros to describe a data set and re-
quest 10 operations.

157

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Program checking of the correctness of transmission of information through s
channel-to-channel adapter is provided in the Yes OS. The program generating a
block of data must include in it the check sum

module 232. A secondary_check of the check sum and comparison of it with the origi-
nal sum are effected by the res 05 programs. After reception and checking, the
information is sent to the user program.

Program Control of the Common Extent of External Disk and Tape Storage. The common
extent of.external storage may contain data sets with any data organization valid
in Yes 05 and all valid access methods may be used for operation with them.

Appropriate macros have been provided to reserve the devices of any of the compu-
ters and to subsequently release them. After completion of a task, if the operating
system detects a resource not released by the task, the resource is automatically
released.

It should be stressed that the level of reservation for the common extent of exter-
nal tape storage differs considerably from that for disk because of the sequential
nature of magnetic tapes. Reserving a rape storage unit from the common storage
extent actually results in reservation of all the tape units connected to the same
control unit as the reserved unit. The specifics of operating with data sets on
tape also imposes a restriction on the place of issuance of the macros for device
reserving and releasing. Reservation is required to create and modify data sets on
disk. It is not needed for reading data sets and in the intervals between data
modifications.

"hen problem-oriented languages are used, the functions of reserving and releasing
peripherals may be performed by a special program written in Assembler.

The software for the common extent of external storage is included in the Yes 08
when it is generated. There is a restriction on system data sets, which cannot be
placed in the common extent of disk storage. In operation with the cannon extent

of external storage, special attention is paid to placement of a data set on certain
extents, since the stipulated arrangement may result in conflict situations.

7.11. Dynamic Debugging Monitor

The dynamic debugging monitor (DDH) is designed to debug both Yes 03 programs and
user programs operating under operating system control. The DDH can be used to
perform:

halts of the system being monitored when specified program events occur, which in-
clude: transfer of control according to a specified address, and occurrence of
program events recorded by using the hardware facilities of program event recording

(PER); and

recording of certain program events (various types of interruptions, times of exe-
cution of privileged instructions) pertaining to the operation of the system being
debugged.

After a halt of the system being debugged at the specified point, one can perform:

a change in the status of the system of the contents of the general, control and
floating-point registers, a specified area of main storage, and a PSH change;

158

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

a printout of the information reflecting the status of the system being debugged at
the the halt point: printout of the general, control and floating-point registers,
the PS", conetnts of certain areas of the operating system, etc.

The DDH is included in the system being debugged when the Yes 08 is generated. DD"
is initiated during operation of the program to intiate the nucleus of the operating
system.

By method of organization, DDH programs are divided into DDH supervisor programs,
which operate in the supervisor state and receive control as a result of the occur-
rence of an interruption, and DDH processes, which operate in the "task" state.

The system being debugged operates in the "task" mode; therefore, DDH programs re-
ceive control when interruptions occur during execution of privileged instructions
in the system being debugged, having the capability of tracking the flow of control
in the system being debugged without interfering in its operation.

DDH interrupt handlers distinguish interruptions pertaining to monitor operation
which are sent to Don programs. and interruptions pertaining to operation of the
system being debugged which are sent for processing to the programs of the system
being debugged.

The control processors of the monitor receive control by means of the DDH dispatcher.
A program operating in the "task" mode is provided for each process. These programs
include a program to issue messages to the console, a program to control the pro-
cesses of the printout and change of data of DDM, and progarms to control the mode

of debugging, processing of printout instructions and data change.

7.12. Generalized Trace Facility

The generalized trace facility (UST) [GTF], pertaining to a class of monitor pro-
grams, is designed to acquire information on a specified class of events occurring
during the functioning of the computer under operating system control. The GT? is
included in any specific 08 version when it is generated. It exists in the form of
modules of the control program nucleus and in system libraries. To use the GTF, a
monitor program is generated which implements its functions.

An event occurring in the computer functioning process is considered recognizable
if with each onset of this event, the monitor, in which the processing program for
this event is provided, receives control. After processing of the recognizable
event, the monitor returns control to the program, during operation of which this
event occurred.

The monitor places records on events recognized in the event trace and stores it on
an external storage unit. The event trace is a sequence of records on recognized
events, ordered by the time of their onset and which reflects the history of func-
tioning of s progarm or the computer as a whole during some time interval.

Events recognized by the monitor form three groups: interruptions, privileged in-
structions and the GTRACE macro instruction.

159

FOR OFFICIAL USE ONLY
FOR‘OFFHJA1.USE(NHLV

0f the interrupt group, the following events are distinguished:
external interruption;

supervisor-call interruption;

program interruption; and

10 interruption.

The group of privileged instructions includes the following events:
LPSH instruction;

SSH instruction;

51°, 1‘10, H10, TOM, "RP, ROD instructions; and

SSK, ISK instructions.

The GTRACB macro instruction is designed for inserting into the event trace data
especially provided for this purpose.

The monitor can eh started only by computer operator command and functions as a
system task. Certain requirements on main storage and the 10 system must be met
for successful functioning of the GTF. To store the evnt trace, the GT? monitor
may use a data set on either tape or disk. The computer must have a peripheral
for storing the event trace and ensure its servicesbility.

An appropriate operator command is issued to terminate monitor operation and
cancel the GT? task.

7.13. Yes OS Recovery Faczlities

In the computer functioning process, various hardware malfunctions occur periodic-
ally which result in errors. The complexity of modern computers requires a rapid
response to an error; otherwise, delays in localizing errors and eliminating their
consequences will result in irregularities of the information in main storage and
extreme losses of time. ‘

To raise the efficiency of using modern computers, the operating system includes
special programs to recover the servicesbility of the Yes 08 after errors occur in
the CPU, main storage, 10 channels and peripherals, and to record information on
the status of hardware and software at the time the error occurs.

These facilities include the following programs that have become traditional:
SEED, SERl for recording the status of the hardware and the Yes 08;

CC“ for handling 10 channel errors;

BRP for handling peripheral errors;

OBP for recording the status of peripherals;

EREP for editing and printing records on errors; and

the standalone program SEREP for editing and printing information on errors.

160

FOR 0511C1AI.USE|)NLY
FOR OFFICIAL USE ONLY

with further development of the Yes 08 recovery facilities based on generalization
of the experience of operating with the preceding versions of the Yes 08, the need
arose to create additional program components that substantially expand the cape-
bilities of the recovery facilities. The new components reduce many situations
that result in overloading Yes 03 and strive maximally to overcome the effect of
errors on system serviceability.

The additional recovery facilities include:

the POSK program which enables recovery of 2.3 OS serviceability on the functional
and system levels;

the APR program for retry of IO operations over an alternate access path;
the DDR, dynamic device reconfiguration, program; and

the MIC [missing interruption checker] program for processing missing IO inter-
ruptions.

Software recovery facilities are classified as facilities for recovery after IO
or machine errors.

Facilities for recovery after 10 errors are components of the IO supervisor or
operate under its control. Let us touch in more detail on an analysis of each of
the programs.

The CCH program receives control when an error occurs in an IO channel. It analyzes
the error, generates information on the status of the Yes 08 and hardware when the
error was detected and informs the operator that the error occurred. If it is es-
tablished that the error is transient. control is passed to the ERP program for re-
try of the 10 operation. In event of a permanent error, control is passed to the
APR program (if it has been included in the specific 03 configuration during system
generation) to find an alternate path for access to the peripheral. But if CCR
determined the need to terminate Yes 08 operation. it generates a record on the
error and passes control to the SERl or POSK programs for recording these data in
the system log SYSl.LOGREC and switches the CPU to the wait state. "hen termina-
tion of Yes 08 operation is not required, control is passed to the 03R program for
recording information on the error in SYSl.LOGR£C and sending a warning message to
the computer operator.

The APR program finds an alternative path for access to the peripheral specified in
the IO operation, but only when the channel error occurs on the main path. "hen

an alternate path through another channel is available, APR passes control to the
ERP program for retry of the IO operation. When an alternate path is not found,
control is passed to the SERO, SERl and POSK programs for recording the status of
the Yes 08 and hardware in the data set SYSl.LOGREC. APR gives the operator the
capability of adding or removing one of the paths for access to the peripheral.

The ERP program, a mandatory component of Yes 08. is a set of standard procedures
for processing peripheral errors. There is an individual procedure for each
peripheral. The ERP program analyzes the error. If the error is permanent. retry
of the operation is not possible. The computer operator issues the appropriate
message and control is passed to the 08R program. In the other cases, ERP attempts
a retry of the IO operation. The number of retries depends on the peripheral type.
If the error is not corrected after the specified number of retries, it is
classified as permanent.

161

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The 08R program, a component of the 10 supervisor, gathers statistics on the status
of the Yes 08 and the peripherals in which the error occurred. The information is
logged in the system log SYSl.wCREC. OER also monitors how full the SYSlJMEBEC
data set is and informs the system operator about this.

The 003 program reconfigures devices. After a permanent error is detected, the 10
supervisor passes control to the Dbl! program which determines the possibility of
moving the 10 operation to another 10 device. If this is possible, the DDR performs
the appropriate rearrangement of the systems tables, issues instructions to the
operator for moving the volume needed and returns control to the ER? program for a
retry of the 10 operation. DDR offers the capability of reconfiguring devices of
the same type, including card devices, disk end tape storage units and printers.

The MIC program monitors completion of 10 operations. It identifies situations
associated with losses of 10 interruptions that are a result of both hardware mal-
functions and errors in Yes 08 operation. If an expected interruption has not
occurred within a specified time, MIC messages the computer operator, logs the in-
formation on the error that occurred in the system log and simulates the missing
interruption, completing the request for IO.

Facilities for recovery after machine checks consist of the SEN, SERl and POSK
programs that log the status of the hardware and Yes 08, depending on the type of
computer used. The programs receive control when machine checks occur through a
new PSH for interruptions from the check circuits and in the case of IO errors,
from the CC}! program. The $380, 86R]. and POSK programs are mutually exclusive.

SERO determines the type of error detected, generates a record of the error, com-
pletes execution of all I0 operations, records the information on the error in the
system log 8Y81.LOGREC, sends the computer operator a message on the error, recom-
mending reloading of Yes 08, and puts the CPU in the wait state.' If a second
machine check occurs during operation of the 8580 program, 3m logs special infor-
mation in the SYSlJDGREC data set and puts the CPU in the wait state.

In addition to the functions implemented by the 8230 program, the am program
analyzes the nature of the error based on information supplied by hardware facili-
ties, checks the nucleus area for parity errors, and attempts to recover system
serviceability, after abending the task affected by the error. If Sill has estab-
lished the fact of distortion of the control programs or has not detected a
damaged task, the computer operator is sent a message on the error with the recom-
mendation of reloading Yes 08, and the CPU is switched to the wait state.

The POSK program begins operation with analysis of the interrupt code that contains
information on the nature of the machine check detected. If the error was overcome
by hardware facilities, POSK logs the appropriate information in the system log
and performs no recovery operations. But if the interruption code is for an unsuc-
cessful hardware recovery, POSK tries maximally to keep Yes 08 in a serviceable
state. An attempt is made at functional recovery, as a result of which the da-
maged task remains fully serviceable. if functional recovery is not possible, re-
covery is made at the system level, which consists in abending the daaeged task.
When the control program is damaged, recovery is considered impossible and the com-
puter operator is issued a message with the reconsnendation to reload Yes 08.

162

FOR OFFICIAL USE ONLY
I’OR OFFICIAL USE ONLY

7.14. Yes DOS-3 Operating System

The Yes DOS-3 multiprogram operating system is intended for organization of effi—
cisnt functioning of small and medium Yes Elm—2 computers with virtual storage. It
supports batch job processing, data teleprocessing facilities and data base manage-
ment facilities. The concept of the DOS-3 control program differs considerably
from that of previous versions of the DOS. This new concept has the following main
adVantages:

more flexible allocation of system resources;

more efficient 10 control system in a virtual environment;

program independence of type and model of peripheral; and

simplified systems maintenance.

‘Ihe DOS-3 modular structure permits expansion and improvement of software, which
allows relying on its viability over the entire period of operation of the YeS
mm in traditional and new applications. DOS-3 is based on using the concept of

virtual storage, dynamic allocation of resources and centralization of all major
system functions.

Yes DOS-3 Composition. The first phase of the Yes DOS-3 includes the following
program components:

control program: supervisor, job management, initial loading, program for
peripheral concurrency;

logical 10 control system;

system utility routines: editor, librarian, special routines, sorting routines,
debugging facilities, device test routine;

Assembler translator;

translators for programing languages: FORTRAN, PL/l, COBOL, RFC-2 with auto-
report; and

BTAH .

Development plans call for the following program components in the second phase of
the Yes DOS-3:

expansion of the control program: support of secondary consoles, catalog of tiles,
expansion of remote job entry;

system utility routines: facilities for checking system generation, facilities
for managing statistics;

translators for programing languages: optimizing PL/l, PLIC, PASCAL, SIHSCRIPT,
SYSTRAN; and

the DUI system.

Compatibility with YeS DOS-2. Yes DOS-3 is compatible with Yes DOS-2 at the level
of:

high-level programing languages;

163

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Assembler language, if the program does not refer to internal control units and
system tables (including DTF tables) by means of non-system functions; and

object modules, if the program does not refer to the system nucleus and the re-
quirements for compatibility at the Assembler level are met.

Compatibility is not supported for programs dependent on specific characteristics
of computer models or devices.

To facilitate programming and increase compatibility, Yes DOS-3 has declarative
macro instructions that permit reference to control units and s‘stem tables in
symbolic form.

System Resources. The main function of the operating system nucleus is control of
utilization of all system resources. DOS-3 offers the following resources:

area of virtual addresses;

area of real storage;

area of storage on auxiliary storage direct-access devices for system use;

10 peripherals;

data files on external storage units; end

operating system programs.

The best possible distribution depends on the nature of these resources. Some of 0
them, control program components for example, are used jointly by many users at the

same time. Similarly, libraries and data files may be used jointly (only as input
information).

Unshaied resources (for example, a storage area, unit record peripherals, output
and update files) are allocated dynamically, but largely to the entire process of
operation to avoid system impasses.

Sequential and unit record peripherals are essentially not shared. DOS-3 supports
definition of peripherals used jointly by several users and indirect IO (SPOOLIKZ).

The system work area is primarily implemented in an area of virtual addresses, and
in doing so, a permanently allocated work area on disks is not required. Because
of this, the usual "critical" elements of a DOS system (SYSUT system utility files
and SYSLNK files) are not needed; therefore, the multiprogram mode is enabled for
even small hardware configurations.

Main Storage Management. The main system resource is virtual storage. All user
operations executed at the same time have their own virtual area not exceeding 16“
bytes. This virtual area is statically divided into four parts:

area of identical addresses;
area of jointly used programs;
a jointly used virtual work area; and

a personal virtual area.

166

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The identical address area takes up the lower part of any virtual area, starting
with the zero address (real to virtual). This area is always implemented in real
storage, not reflected on magnetic disks and is common for ell virtual areas, but
the addresses of all objects are identical and real. This area contains the DOS-3
control program and control tables. The boundary of this area is set when the
system is generated.

The area of jointly used programs is also common for all virtual areas. Stored on
magentic disks is a copy of the DOS-3 control program phases in the form in which
these phases are stored in the absolute module library. This area contains super-
visor transient programs, logical IO control system modules, logical IO control sys-
tem transient programs, the job management program, etc.

From the area of jointly used programs, parts of the DOS-3 are moved into real
storage by the paging mechanism. Since these system programs are reentrant, they
do not have to be copied into the page set. A copy of the jointly used virtual
work area is kept in the page data set. The upper boundary of the jointly used
virtual work area is set when the system is generated and defines the lower bound-
ary of the personal virtual area. This address is the address, starting from
which the user usually edits his programs. Each user job is given its own (perso-
nal) virtual area (i.e. appropriate page tables are built). At thsi same time (or
during editing) the SYSLNK area is built. After a program is loaded for execution,
a copy of it remains unaltered in the absolute module library; alterable copies of
a program and data are kept in the page data set and used in the paging between
real storage and the page set. The size of a personal virtual area may be dynamic-
ally extended to a maximum of 16" bytes.

Real storage or the area of real pages is divided into two parts: the area of
identical addresses and the area of replaceable pages. The contents of the area of
identical addresses is the permanent resident part of the DOS-3 control program,
i.e. the real part of all virtual areas. The series of pages of the jointly used
and personal virtual storage is transferred to real pages when necessary. The con-
trol program periodically executes a review procedure to determine which pages are
no longer needed in real storage to keep the contents of changed pages in the page
set in the end.

The page set is placed on one or more disk volumes; a unique adjacent sector must
be allocated on each volume. The set forms the required storage area on disks to
keep the form of changed or constructed contents of any virtual storage area. The
entire page set area is formatted in advance into lK-byte blocks and a segment is
the unit of allocation. Dynamic allocation of segments is determined by using the
segment set scheme in real storage. The maxunmm size of this set is a parameter
of DOS-3 system generation.

Job input and Planning. Jobs are input into the system by means of the device(s)
assigned by the operator as the system input device. Hhen several system input de-
vices are available or if the system input device is a virtual device, the system
operates in the multiprogram mode. The system input unit may be a card input unit,
a tape or disk storage unit, a virtual system input unit that can be connected to
any unit record device, a floppy disk input unit or a telecommunications unit.

165

FOR OFFﬂJAl.USE(NVLY
FOR OFFICIAL USE ONLY

The unit of assignment and planning of resources is the order, consisting of one
or more jobs that can be processed sequentially and make use of the same system
resources.

The first statement in any order [lakes] must be a *SSJOE statement that can be con-
ventionally described as the creation and description of a partition. The *SSJOB
statement parameters are used by the system scheduler to determine whether all re-
sources requested are accessible and, consequently, whether the partition needed

can be created and started. The user first idnicates the required size of virtual
storage in kilobytes and the actual size of real storage (size of a working set of
pages). The required configuration of other resources (peripherals, disk and tape
volumes, files) is indicated by a reference to a certain phase of the description

of the partition in the absolute module library. Any number of different phases of
a description of a partition may be written and cataloged by using the system macro-
instructions. The partition description phase contains a list of standard assign-
ments, in which all devices (by means of the physical address (CUU) or device
class), tape and disk volumes needed for execution of the entire order are indicated.

This information is used by the system to determ-ne the capability of starting the
operation, reserving all required devices and building the appropriate table of
logical devices for the partition.

The work scheduler builds a table of requests for operation and puts it in the sys-
tem job queue. “hen all required resources are available, they are reserved, par-
tition tables are built, and the first job in the order is started. Jointly used
10 devices are not reserved for exclusive use. It is recommended that 10 devices
be allocated by class or volume registration number to make full use of system
flexibility. Output and update files on disk are reserved when opened for individ-
ual use; input files may be shared.

Supervisor. DOS-3 consists of a relatively small nucleus that includes the inter-
rupt handler, the queue handler, the SVS programs, programs for recovery of IO
errors on disk, a program to find a missing page and others.

The nucleus stays permanently in the identical address area. In addition to the
nucleus, the supervisor includes a number of programs kept permanently in the area
for jointly used programs. The table of contents of all the programs in this area
is built by the editor and stored in the identical address area during initial load-
ing. The supervisor can control parallel processing of up to five independent
operations (job streams), each of which is executed in its own partition; up to 99
subtasks may be created and executed concurrently in any partition.

Logical 1068. Three basic aims were considered in developing the logical 10 control
system [IOCS]:

maintain the continuity of the logical IOCS;

improve the efficiency of the system with regard to its functioning in the virtual
environment; and

increase the flexibility of the system.

The first aim was achieved by keeping all the data access methods that existed in
preceding versions of Yes DOS in the YeS DOS-3 logical TOCS. System declarative and

166

FOR OFFICIAL USE ONLY
N )Il (WI-1i ‘l A I. I '51-: ( lNl .V

executive macro instructions retain at the symbolic level the main leatures irum
preceding systems; in the process, howver, a number of file description parameters
are not considered. All system expansion methods were designed to maintain soft-
ware compatibility. Organization of files of various formats was also retained.
The exception is organization of index sequential files which underwent some chang-
es because of implementation of more modern concepts of index sequential files.

The system offers programs to translate index sequential files from previous ver-
sions of Yes DOS into those for Yes 008- .

The necessity of achieving the second aim occurred because the DOS-3 logical IOCS
is intended for functioning in the virtual environment, while the hardware for 10
operations in a virtual environment is insufficiently developed. The main task in
executing any IO operation is the fixing of all storage areas needed in execution
of the IO operation in real storage for the entire operation execution time. Work
areas such as those for the channel program, list of addresses for indirect addres-
sing in the channel, disk address for finding a specific block on disk and others
are reserved in one area during the data file opening procedure. The user should
not specify IO areas in his program. In this case, allocation of IO areas is per—
formed automatically during the opening procedure. Automatic allocation of work
areas during the opening procedure allows obtaining an adjacent area for all work
areas associated with the IO operat3.ns; this saves on the number of apges needed
for fixing in real storage and permits one fixing during the opening procedure in—
stead of multiple fixing at the start of each 10 operation.

Raising the flexibility of the logical lOCS is achieved by the following methods:

change in the principle for connecting executive modules for IO. Executive IO
modules are connected during the data file opening procedure; since they are reen—
trant, they may be used in several tasks at the same time, which saves considerable
storage in the multiprogrsm mode of operation;

offering the capability of dynamic allocation of 10 areas during the file
opening procedure;

the capability of dynamic change of parameters; for example, right before the
start of a program, record size and record block size may be specified; and

the higher degree of independence of the peripheral makeup. In assigning devices,
one may specify only the device type, and the operating system will allocate a
free device of the given type.

Libraries. There are five types of libraries in Yes DOS-3: absolute module
(phase), object module, source module, procedure and edited macro definition.

The absolute module library is intended for storing programs (phases) ready for
execution. In addition to the usual phases, this library contains partition de-
scription phases that are used during start of partitions an list the resources
needed for the partition; it also contains the table of contents of programs in
the virtual area of )ointly used progarms.

The object module library is intended for storing object modules the; result from
the programming language translators. Basically, this library is used to hold

standard programs stored in object module form convenient for connecting to other
programs.

167

FOR OFFICIAL USE ONLY
mu (ll-Tl! 1 \| I'S‘l’ "NI \

The source module library is intended for storing modules in the source programming
languages. A convenient apparatus is provided to make changes in source modules
and connect other source modules as parts of a given source module.

The procedure library is designed to hold frequently used job sets. There is an

apparatus for adjusting procedures for specific applications (substitution of
assigned parameters).

A thorough syntactic check is made during cataloging of macro definitions. This
speeds up debugging and translating of macro definitions from the usual format into
the edited, which speeds up considerably the process of generating macro expansions
from macro definitions. This information is contained in the edited macro
definition library.

All libraries are disk files. At the beginning of each library, there is a table
of contents of the library elements, which are sorted and blocked. To speed up
searching, each block of a table of contents has a key. Library element text is
stored in fixed-length blocks. All libraries may be system or personal.

The general library maintenance routine performs on library elements functions such
as cataloging, deleting, renaming, correcting, perforating and printing individual
elements or groups of library elements. The maintenance routine used to copy and
reorganize libraries transfers entire libraries, sublibraries and groups of library
elements from disk to tape, i.e. it copies libraries, sublibraries or individual
elements from one or more libraries input to one output library. Ordering and
compression of text occurs during this transfer.

Spooling. The real capabilities of multiprogrsmming with a small amount of hard-
ware are limited by the number of unit record devices, especially by the number of
line printers. Therefore. spooling is included in the DOS-3 control program. At
system generation time, the user may specify any number of virtual unit record de-
vices, each fo which is associated with a real device. Virtual devices may be used
at the same time by several partitions.

If several additional virtual printers or other devices have been defined, any
program in any partition may use all these devices at the same time. Data obtained
as a result may then be printed sequentially on one real printer.

For input, the situation is somewhat different. In this case, the operator may
start the process of buffering of data on any number of input units, including
telecommunication devices. Direct input of other jobs into the system may occur at
the same time, if a real peripheral has been assigned to the corresponding logical
input unit.

Thus, one can combine as desired direct input and spooling, i.e. system 10 of data
through SYSRDR, SYSIPT, SYSLST and SYSPCH from a terminal or output to it is
possible only in the spooling mode. In this case (indirect 10 over teleprocesslng
lines), any program can read (write) its data from (and to) a terminal by using
the conventional macro instructions in the logical IOCS just as if it came from a
card reader or output to a printer, etc.

168

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

There is a job control language and operator command language that allows setting
and changing priorities of individual operations and specifying the need for
keeping or processing data, deleting after processing or moving from the output

queue to some input queue. The majority of central operator control commands are
available to a remote operator.

Command statements can be used in the data input stream to include data coming from
other input units in the stream. This is especially useful in inputting data from
floppy disks or perforated tape units prepared without the appropriate control
cards. Data input from nonstandard units, from perforated tape input units for ex-
ample, can be translated into the standard DKOI [decimal information interchange
code] and then processed the usual way.

Spooling allows the operator to determine the actual status of IO queues, the
status of current operations, use of resources, etc. This enables collection of
basic accounting data, that is kept automatically in the form of a spearate data
queue and output as required. The system is built to enable simplicity and
efficiency in restarting after device errors occur.

7.15. Application Program Packages

Along with the operating systems and maintenance programs discussed above, applica-
tion program packages (PPP) are an integral part of the Yes EVM software system.

A PPP is a functionally complete complex of program facilities oriented to solving
a specific logically complete class of problems.

The PPP developed within the YeS EVM differ in independence of the type of hardware
and peripherals used, ease of adjustment, diversity of classes of problems solved
(application areas) and by the various algorithms for solutions in each class.

They are oriented to operating under the control of the Yes DOS and Yes 08 opera-
ting systems and in many cases are a further expansion of them. There are now over
a hundred packages embracing several millions of instructions in the Unified System.

PPP are classified by application sphere and class of problem solved as folows:
general-purpose;
for solving engineering, scientific and technical problems;

for solving economic problems and those in ASU's; and-

expanding the capabilities of themain operating systems.

General-purpose PPP include programs that implement mathematical methods (for ex-
ample, methods of queueing theory, probability theory, mathematical programming,
etc.) for solving problems that pertain to many spheres of application. As a rule,
these programs form the basis of the complex application problems of management and

planning, operations research, simulation, etc., but may have an even greater value
of their own.

individual packages, as well as methodologically oriented (numerical mathematics,
mathematical statistics, etc.) PPP for engineering, scientific and technical calcu-

lations, are designed to solve problems of computing special functions, interpola-
tion, optimization, design, medical research and others. This class of PP? is

169

FIN!(NNW(JA[.USE¢)NLY
FOR OFFICIAL USE ONLY

characterized by a great diversity in problems solved and continual expansion of

them. Resting on program creation as the basis and making usa of the high-level

programing languages designed specifically for scientific and technical applica-
tiona, the user may develop packages oriented to solving his own problems.

The PPP for economic calculations and A50 are used to solve problems of production
management and planning. operations and long-term planning, supply of materials and
equipment and others. In connection with the widespread incorporation of Unified
System computer facilities in various types of automated management systems, this
class of PP? is assuming major importance; new programs have to be written and
standardized especially in view of their widespread application.

Efforts by developers of Unified System software who specialize in the problems of
applications programing are mainly focused on creating PPP that extend the capa-
bilities of the main operating systems. These packages are designed to support
certain modes of operation of computer systems, as well as the functioning of
specialized hardware.

Since this class of packages by its functional value is of special interest to

Yes EVM users, given below in detail are the characteristics of the programs that
expand the functions of operating systems in the direction of supporting additional
modes of operation and managing complex data structures.

A major quality of modern computer systems from the viewpoint of their use in
building ASU's and [PS [information retrieval systems] is the availability within
the standard software of facilities for organizing and managing large data files
and facilities that afford shared access to these files in thc mode of simultaneous
servicing of user queries coming from remote and local terminals. There are now
two PPP supporting these functions within the Yes EVM software system.

The "Oka" Data Base Management System (8080 "Oka") [DBMS] is intended for building
large-scale informational. reference and management systems with a large volume of
processed information and complex logical ties between the data elements.

The system supports operation with data bases in the batch and teleprocessing
modes. All types of remote and local YeS EVM terminals can operate in the system.

Data access is provided by application programing facilities in PL/l, C0801. and
Assembler through the BETA data language. The DBMS data bases are implemented by
hierarchical and inverted data structures.

The DBMS facilities support sequential and random access to the data bases and all

types of processing: selection, insertion, replacement and deletion at the level
of logical units of data.

The system has developed facilities for managing data bases that enable:
logging of all changes occurring in a data base and recording all messages;

data recovery that maintains the information stock of the system in the correct
status in event of equipment failures and malfunctions;

resource protection from unauthorized access;

170

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

reorganization and loading of data bases; and
preparation of statistical reports.

In the teleprocessing mode, the "Oka" system performs all functions required for
managing the reception, transmission, switching and translation of messages ex-
changed between the terminal network and a computer.

The "Kama" Data Base Teleproccssing System is intended for use as teh base software
in building:

a wide class of conventional applications for telaprocessing systems, including

message switching, reception of inquiries, data input in the interactive mode and
data acquisition; and

information reference systems for shared use operating online and characterized by
quick response.

The "Katna" system supports processing forms such as data input and accunulation on-
line, message transmission from one terminal to another, online start of applica-
tions programs from terminals. This system also services user queries at the same
time, coming from the terminal network. 'lhe mnber of simultaneously executable
programs is limited only by the size of main storage available.

User requests are realized by application programs written in PL/l, COBOL or Assem-

bler. Application programs are linked to a teleprocessing system by macro instruc-
tion facilities.

Data management in the data base teleprocessing system offers facilities for work-
ing with sequentially organized files and data bases built with Yes 05 files with
index sequential or direct organization. Information capabilities of the data base
teleprocessing system enable management, selection, recording and updating of
information in data bases.

Intonation system developers are fully responsible for the initial loading and
integrity of the data bases.

The KROS PPP is designed to expand the capabilities of the Yes 08. Operation of
the operating system together with the KROS PPP enables:

raising computer system throughput because of the change in the YeS OS job manage-
ment algorithm and the use of special access methods for operation with job input
streams and data output streams. How much throughput is increased depends on the
computer configuration and the nature of jobs executed; and

automating computer operator functions. The KROS PPP performs automatically some
of the actions usually performed by the computer operator.

For example, the KROS package plans and starts programs for system input, system
output and initiators. Computer operators are also given a number of additional
conmands to manage job execution and peripheral operation:

dynamic ordering of task solving based on an account of the use of the CPU and
peripherals; and

automatic inclusion in the job input stream of jobs formed by user programs.

\. -' 171

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Using the KROS package reduces the requirements for resources for a computer system.
In particular, less direct access storage needed for holding the input and output
data sets is required. Main storage size needed for KROS package operation is
generally less than that needed by standard Yes OS facilities performing similar
functions.

Since the KROS package supports remote job entry, the remote user can execute
jobs under the control of Yes 08 and KROS.

Unified System computers with the standard instruction set and the AP-Io (Yes-8504)
terminals can be used as the remote stations.

Also note that using the KROS PPP does not require any change to Yes 08 or user
programs.

The KROS PPP is independent of the Yes 08 edition and can be used as the basis for
development of new facilities and capabilities that do not affect Yes 08 and user
programs.

The ROS FF? is intended for the functioning of a computer system that includes an
arbitrary number of Unified System computers, each of which operates under control
of the Yes OS.

The ROS PPP operates in one computer in a multimachine system. This computer is
called the service computer and the others are called main computers. The service
and main computers are linked by a channel-to-channel adapter.

Using Yes 08 together with the ROS package in a multimachine computer system raises
the throughput and reliability of the computer system compared to the computers
used separately; it also permits reducing the number of computer operators main-
taining the multimachine system. This advantage is achieved by dividing the func-
tions for job execution between the service and main computers and making sue of
the additional capabilities offered by the ROS PPP.

Job execution functions are divided as follows. The service computer takes care of:
input and building a cannon job queue for the whole multimachine computer system;
planning of job execution on the main computers with regard to user requirements;
sending a job for execution to a selected main computer;

receiving data from a main computer, obtained as a result of job execution;

output of data received on a printer and perforation; and

automatic lssuance of required operator couInands to the main computer.

Since all auxiliary functions for job processing are taken care of by the service
computer, a main computer is concerned only with job execution. Also, instead of
the slow devices for job input, data output and the operator console, a main compu-
ter uses high-speed channel-to-channel adapters for data transmission. These con-
ditions for operation of a main computer within a multimachine computer system sig-

nificantly increase the efficiency of its operation compared to the usual operating
conditions.

172

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Additional capabilities of the ROS package include:

user job processing management by using R08 command statements together with Yes
05 JCL cmunand statements. Use of ROS command statements is not mandatory;

capability of advance setting of data media needed for a job on a main computer
before the start of job execution;

processing of internal jobs, which allows a user program executed on a main compu-
ter to generate new jobs and place them in the conumn ROS job queue;

management of dependent jobs, which allows a user to establish a relationship be-
tween jobs in some group of jobs and execute these jobs in a sequence described by
the user;

remote processing of jobs, i.e. the capability of remote job entry from terminals
and output of .processing results to them;

additional service routines in the form of a standard set of service functions
operating under ROS control; and

the local execution mode, when one computer is used as the main and service
computer.

The real-time supervisor (SRV) is a PP? that together with the Yes 05 enables
efficient use of all models in systems that control processes or objects in real
time. The real-time supervisor offers facilities to extend the functional capa-
bilities of the operating system in the following directions:

use of nonstandard IO devices (real-time devices) and lines for external interrup-
tions (real-time lines) as sources of data to be processed in real time;

rapid system response in processing data coming into the computer from the real-
time devices and lines;

a strict tie-in between times of execution of functional programs in a system and
actual time transpiring; and

a number of additional optional capabilities (operation with resident and nonresi-
dent data queues, logging of events in a system, operator service and others) that
may be used in process control systems.

To realize these capabilities. the real-time supervisor has its own facilities for
organizing the data processing process. in the background of which occurs the
operation of the operating system. As a result, the SRV offers an additional, with
respect to those available in the operating system, mode for servicing programs,

called the real-time mode; programs using SRV capabilities are executed under
this mode.

Universality of SRV and the efficiency of the real-time mode supported by it are
achieved because of the availability of the SRV generation facilities. The genera-
tion facilities allow obtaining specific versions of the SRV with regard to the
configuration of available hardware, the configuration of the operating system ver-
sion used and the features of the functional purpose of the process control system.

173

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Chapter 8. Functional Characteristics of Yes Elm-2 Models
8.1. The Yes-1015 Computer

With a throughput of 19000-21000 instructions/second, the Yes-1015 computer is the
smallest model in the Yes EVH-Z family. It is intended for use in batch processing
and the interactive mode in traditional data processing systems. This computer is
also used in rail transport management, enterprise management, in information sys-
tems for resource management, in power engineering, in executing commercial, bank-
ing and financial operations, in various data bank systems and in training.

In accordance with the YeS EVM-Z principles of operation, the Yes-1015 computer
is compatible with Yes EVH-l models and realizes:

extended precision floating-point operations;

facilities for organization of virtual storage with a 16H-byte capacity;
storage protection facilities;

extended facilities for processing of machine errors;

monitor program support facilities;

program event recording facilities; and

mlcrodiagnostic facilities.

A structural feature of the Yes-1015 is the connection to a cannon bus of standa-
lone processors that operate concurrently and implement the principle of decen-
tralized data processing. Communication between the standalone processors that
make up the CPU is effected by using simple and easily interpreted standard mes-
sages. The CPU also includes the main storage unit; display console (operator con-
sole), and three types of standalone processors oriented to execution of different

functions: instruction processing (03?), input/output (IO?) and service processor
(RAP).

The operator console consists of the Yes-7168 display with 16 lines of 56 charac-

ters per line and the Yes-7186 matrix printer with a printing rate of 180 charac-
ers per second [cps] with 132 characters per line.

The instruction processing processor:
fetches data from main storage;

decodes instructions;

executes arithmetic and logic operations;
executes interruptions;

unpacks IO instructions and starts the operation of the 10 processor.

The internal storage of the instruction processor is made up of general, floating-
point and control registers. Processor cycle time is 550 ns.

Up to four IO processors that execute different functions may be used in the CPU.
The first processor controls the directly connected Yes-7186 printer and 10 peri-
pherals through the multiplexer channel. The second processor controls the direct-
ly connected Yes-5061 disks, the maximum number of which is 8. The third processor

1 here and from now on. computer throughput is indicated for statistical mixes

for solving scientific and technical problems.

174

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

is the selector channel; up to eight Yes-5017 units are connected to it through
a Yes-5517 control unit. And finally, the fourth processor for 10 effects a
direct link to a date teleprocessing system.

Cycle time of the [0 processor is the same as the instruction and service pro-
cessors, 555 ns.

The service processor checks the operation of all CPU functions and supports:

logging and analysis of errors, input of microprograms and computer-operator
communication.

Main storage with a maximum capacity of 256K bytes is built with integrated cir-
cuits. Cycle time is 1 microsecond, access width is 2 bytes. An autonomous unit,

the storage control unit (OTV), is provided to organize access to main storage
within the CPU.

Yes-1015 computer software includes the Yes DOS-3 operating system that supports
the Yes EVH-Z capabilities and a set of maintenance routines (KPTO) that includes

not the traditional software, but a system of microdiagnostics that performs the
following functions:

correction of errors occurring during operation;

logging of malfunctions in automatic mode;

offline testing of the machine during preventive maintenance; and
localization of defective units and assemblies

The standard peripheral composition for the Yes-1015 and the other Yes EVM-Z models
is given in table 30.

8.2. The Yes-1025 Computer

With a throughput of 35000-50000 instructions/second, the Yes-1025 is the second
member of the family of program compatible Yes EVH-Z machines and belongs to the
class of small machines. It is oriented to solving a broad range of scientific and
technical, economic and special problems both in the standalone mode and in infor-
mation processing systems, including real-time and shared use systems. The Yes-
1025 can also be used in large computer systems as a slave computer for preliminary
processing of information. The sphere of application of the Yes-1025 is governed
by the features of its structure:

higher technical and economic indicators and primarily of the throughput/cost ratio

than the Yes-1021 computer because of a more flexible and efficient internal
logical structure;

organization of virtual storage with a l6H-byte capacity;
connection of a broad complex of external devices;
direct connection of high-capacity external storage units; and

an easy and convenient method of connection to date teleprocessing systems and
to other computers.

The Yes-1025 computer processor is suniler in structure to that of the Yes-1015.

It is designed in exactly the same way for decentralization of execution of func-
tions that permit processing of arithmetic and logic instructions concurrently with
IO of information from peripherals, with operations from the operator console and
with diagnostic procedures. in accordance with this, the Yes-1025 processor is

175

FIﬂICNﬂﬁCIAl.USEiONLY
30. Standard Peripheral Composition for the Yes EVH-Z Computers
(number in parentheses is number of unite in the standard configuration;
are preceded by "YeS-")

eral

torage control
ble disk

e unit

torage
1 unit

torage unit

iter with
1 unit

uncric
r

eader
luncher

tape reader
tape puncher

tape [0
m

lumeric and
.c information
.t

I: control unit
>ranch consoles

displays)
repeater

:l-to-channel
:r

1015

 

5061

5517
5017

7184

6016
7014

(3)

(l)
(3)

(1)

(l)
(l)

1025

 

5061
(5066)(2)

5004 (6)

703a
(7039)‘2’

6016 (2)
7016 (2)

7902 (2)

1035

 

5561

5061

5517

5017

7032

6012
7010

6022
7022

(l)

(3)

(1)
(6)

(1)

(1)
(1)
(1)
(1)

Computer
1045

 

5561

5061

5517
5017

7077

7032

6012
7010

6022
7022

(1)

(6)

(1)
(6)
(l)

(2)

(2)
(1)

(1)
(l)

1055
5561 (1)

 

5061 (8)

5517 (1)
5017.02 (8)

7033 (1)

6016 (1)
7014 (1)

556

$06

551
501
707

703

601
701

602
702

790
FOR OFFICIAL USE ONLY

made up of six autonomous functionally complete modules connected to a coupon bus.
Commutation between any two modules is effected by using special interface
adapters built into each of them. Since the modules use a counon bus with time
sharing, the bus is physically divided in two to increase throughput. also, one-

third of the bus is used for asynchronous transmission of signals from the service
module to the others and vice versa for convenience of diagnostics.

The Yes-2025 processor includes the following basic modules: operating, service,
control, main storage, disk and multiplexer.

Additional facilities may be included in the processor as a function of the
application:

a second main storage module;
a tape module; and
a switching module.

Each of these modules uses microprogram control and a set of internal registers to
enable execution of the functions imposed on it.

The operating module realizes execution of the Yes EVli-Z universal instruction set,
including the standard set of operations, operations with decimal numbers, opera-
tions with floating point, conventional and extended precision, operations for

translation of addresses and conditional exchange. and operations enabling opera-
tion with time facilities and storage protection keys.

As noted earlier, a major feature of the Yes Elm-2 models is the availability of a
developed diagnostic system that enables detection and rapid localization (and in
some cases even correction of data) of faults due to malfunctions and failures
occurring during computer operations. In this respect, the YeSo1025 is no excep-
tion and makes use of both software and special hardware for diagnostics. The
software is intended mainly for diagnosing 10 devices and disk and tape storage
units. ‘Ihe hardware includes a system of links that enable direct writing and
reading of information in each module or its major parts, and a special service
module for initial recording of microprograms, control of procedures of micro-
significance and processing of inforaation on malfunctions. hardware facilities
for the res-1025 computer diagnostic system also include the operator console with
the Yes-6063 alphanumeric display, the Yes-7934 serial printer and the Yes-5076 or
Yes-5075 floppy disk storage unit. In the process of computer functioning, infor-
mation on malfunctions is accumulated on floppy disk and can be output on the dis-
play or printer for expeditious analysis of the reasons for the failures and mal-
functions. Also stored on floppy disks is information on the causes of the most
typical malfunctions that have ever occurred at a user site, which is essentially

a set of diagnostic tests that permit rapid and efficient discovery and correction
of damage to computer functioning.

The control unit in the Yes-2025 processor is essentially a storage control unit

that performs all the enccssary functions on organizing work with main storage and
organizing access to data.

‘lhe main storage module is built with inetgrated circuits with a capacity of 102‘.
bits per package. One module holds 128K bytes. Using an additional storage
module permits obtaining the maximua possible main storage, 256K bytes, for the

177

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Yes-1025 computer. Main storage read cycle is 500 ns; write cycle is 750 ns, and
width is 72 bits.

The disk module is an adapter for direct connection of up to four disk storage
units, just as the tape module is used for direct connection of tape storage units.

The multiplexer module is designed to connect lO peripherals to a computer by means
of the standard 10 interface. Throughput of the multiplexer module in the burst
mode is 29K bytes/second and in the multiplexer mode, 26K bytes/second. The mnber
of multiplexer subchannels is 32 with maxi-um throughput for a one-byte interface
of 29K bytes/second. Total throughput of the multiplexer module is 1.0!! bytes/
second.

A distinctive feature in the structure of the Yes—1025 computer processor is the
presence of a switching module that has 16 lines for connecting both terminal
equipment for s data teleprocessing system and small computers in the SH EV“ series.

8.3. The Yes-1035 Computer

The Yes-1035 computer has a throughput rate of 160,000-160,000 instructions/second
and is in the medium class. It is intended for solving a broad range of scientific
and technical, economic and special problems in shared-use batch processing, tele-
processing and real-time systems as well as in areas that require a general-purpose
computer with large computing capacity and a broad set of high-speed peripherals.
This model can be used in small and medium-size computer centers and at the lower
and mid levels of automated management systems. It implements the universal set of
YeS EVM instructions and is program compatible with other Unified System models.
Emulation facilities provide program compatibility with the Minsk-32 computer.

By connecting the Yes-83 71 coulnunications processor to the computer, a general-
purpose computer complex can be created for shared use and teleprocessing of infor-
mation. By using the special processor for array computations, a computer complex
can be obtained for scientific studies oriented to array processing of large data
files.

The processor (the Yes-2635) is the central unit in the Yes-1035 computer; it is
intended for executing arithmetic and logic operations, organizing reference to
main storage, organizing data exchnage between main storage and channels, control-
ling the sequence of instruction execution, actions during interruptions, operation
of time readout facilities, initial program loading and operation of 10 devices.

The processor processes numbers written in binary code, fixed-length floating-point
numbers, variable-length decimal numbers, and fixed and variable-length logic
information.

This processor consists of the central processor (the Yes-2535) with s byte-multi-
plexer and two selector channels, the Yes-3235 main storage unit and the Yes-0835
power supply.

This processor also has additional facilities: a channel-tochannel adapter
enabling joint operation of two Yes-1035 computers and permitting transfer of

178

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

data files from one computer to another through selector channels; two selector
channels or an integrated file adapter.

Control of ALU operation is microprogramed and width is two bytes. Control is
effected by using reloadable storage of microprogrsms made with 10's with a cycle
of 200 ns. width of 32 bits and capacity up to 64K bytes. Hicroprograms are laoded
into storage from the console magnetic tape storage unit. If necessary, the user
can replace the microprograms kept in storage. Mtomatic localization and indica-
tion of computer malfunctions is performed by using a special set of diagnostic
microprograms. Checking computer serviceability by using the microdiagnostic sys-
tem takes no more than 15 minutes.

When a reference is made to main storage or to microprogram storage, a correcting
code is generated, stored and used to analyze the validity of the data transmission.
If a single error emerges. the information is corrected.

If a malfunction occurs in the processor. control is passed to the microprogram for
retry; it restores the situation that preceded the malfunction and passes control
to the sector of the microprogram where the malfunction occurred. If the retry is
successful, normal computer operation continues and the error is recorded in
storage for analysis.

The instruction set includes arithmetic instructions to process floating-point
128-bit operands.

There are two versions of main storage for the Yes-1035 computer: the Yes-3235
ferrite core unit and the Yes-3238 integrated microcircuit unit. We Yes-3235 main
storage unit has variable capacity: 256, 512 and 1024K bytes. Storage cycl' time
192 microseconds, access width is 72 bits and access time is 800 ns. The Yes-3238
is built with (OK-bit integrated circuits and has a capacity of 2!! bytes. Storage
cycle time is 850 ns and access time is 650 ns.

The Yes-1035 computer I0 channels (selector and byte-multiplexer) make use of pro-
cessor equipment for their operation, i.e. they are integrated. The selector chen-
nel enables connecting high-speed peripherals (external storage devices) to the
processor. The computer has two selector channels; up to 256 devices may be con-
nected to each channel. The byte-multiplexer channel operates with low-speed IO
devices. Up to 18‘. devices can be connected to a multiplexer channel.

The selector channels may be operated in the block-multiplexer mode which permits
connecting up to 512 devices to the selector channels.

in a multiplexer channel, the number of subchannels (number of connectable devices)

is governed by control storage size allocated to store channel control wordc, i.e.
from M to 128.

Execution of 10 instructions and data transmission is effected by multiplexer
channel microprograms.

Maximum throughput of the multipelxer channel is 30K bytes/second.

179

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The mixed principle of control is used in the selector channels. IO instructions
are executed by selector channel microprograms, while data transmission between
main storage and channels is effected by hardware with partial use of CPU equip.
ment. Haxuaun rate of data transmission in the selector channel is 790K bytesl
second and total throughput of the channels is 1.2" bytes/second.

Adl basic concepts of the Yes EVH-Z have been implemented in the Yes-1035 computer:
extended instruction set;

virtual storage;

block-multiplexer mode of channel operation;

nultisystem facilities and time readout facilities;

program event recording;

provision of monitor programs;

extended precision floating point operations;

correcting codes for main storage; and

advanced microdiagnostic procedures.

The Yes-1035 computer features Minsk-32 emulation facilities that permit use of the
large stock of application programs developed for that machine. These facilities
include:

facilities for emulating Minsk-32 programs;

facilities for translating programs in source languages; and

data transfer facilities.

Provision of Minsk-32 and Yes-1035 compatibility based on considerations of econom-
ic effectiveness is implemented on two levels: program and program-microprogrun
(emulation level).

.The expediency in using the program level of compatibility stems from the fact that
many Minsk-32 programs are written in the high-level programming languages and the

process of their primary interpretation is not time critical. Primary interpreta-

tion provides for‘the sequence of conversion, translation and execution.

The second compatibility level, emulation, is used for programs written in the
Minsk-32 machine language. Such programs make up a large part of the whole stock

of programs since they are most economical. Therefore. the emulation level is the
main and most efficient. Based on the great differences in data representation and
formalization of computational processes and 10 operations, in the second level of
compatibility, 68 percent of the instruction set is covered by microprogram inter-
pretation and 32 percent by prog am. Program interpretation of Minsk-32 instruc-
tions is largely accounted for by interpretation of general extra codes for exchange
and extra codes for exchange with external devices. ﬁicroprogrsm interpretation is
propagated for both computational and 10 operations.

[0 emulation has been implemented for external devices in the basic set for the
Minsk-32 by using suitable analogs in the Yes-1035 set of external devices. In the
process, units designed to operate with the Minsk-32 or converted in advance for
use with the Yes-1035 may be used.

The Yes-1035 computer compatibility facilities provide emulation of the Minsk-32
computer with a 1.4-fold increase in throughput.

180

FOR OFFICIAL USE ONLY
POI! OFFICIAL USE ONLY

8.4. The Yes-1045 Computer

The Yes-1045 is a general-purpose computer with medium throughput of 880,000 instruc-
tions/second; it is designed to solve a broad range of scientific and technical,
economic, informational and special problems both in the standalone mode and in
information processing systems.

The universality of the Yes-1065 is provided by the balanced indicators of proces-
sor throughput, the universal instruction set, a unified method for connecting
various external devices and advanced software. The logical structure of this com-
puter meets the requirements imposed on the logical structure of the Yes EVH-2.

The Yes-1045 computer is program compatible with Yes EVh-l models (in the basic
control mode) and with other Yes EVH-Z models from below upwards.

The structure of the Yes-104$ computer permits organizing a dual processor system
based on two computers and mutlimachine systems. ensuring in the process high
throughput. reliability and viability.

Dual processor systems are organized by creating a common extent of main (up to 8M
bytes) and external storage for both processors operating under the control of a
single operating system.

Hultimachine systems are created by complexing at the level of channels by using
channel-to-channcl adapters, direct control facilities and a common extent of exter-
nal storage; each computer operates under control of its own operating system.

In the Yes-1005 computer, the capability has been provided through a special inter-
face for connecting an array processor developed to substantially raise the effi-

ciency of solving problems on pattern recognition, processing of geophysical data,
etc.

A special access method under control of the OS 6.1 operating system allows the
user to solve problems with the use of high-level languages.

The array processor together with the power supply and engineer panel is placed
in a standard YeS EVH rack.

The Yes-1045 computer hardware has been developed on the modular principle, which
allows a user to design specialized compuer systems corresponding to the purpose

of the system being created to the greatest extent without making any changes to

the structure and design of the machine.

Standard Yes-1045 computer facilities included in any system configuration created
by a user include:

the processor;

facilities for proeessing in the basic and extended control modes;

the YeS EVH-l universal instruction set and the majority of the new Yes EVM-Z
instructions;

virtual storage;

instruction retry facilities;

monitor facilities;

181

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

program event recording;
high-speed BK-byte buffer storage;
byte-multiplexer channel; and
five block-multiplexer channels.

Optional YeS-lObS computer facilities include:

the array processor;

direct control facilities;

facilities for organizing a dual processor system;

extension of main storage to an bytes by adding new lﬂ-byte blocks;
two channel-to-channel adapters;

logic repeater; and

configuration panel.

New configurations of the Yes-1065 computer may be derived by adding specific
additional facilities to the basic machine composition or by connecting a broad

range of external storage units, 10 devices or teleprocessing devices to the IO
channels through the standard interface.

The central part of the Yes-1045 computer is placed in three standard Yes EVH
racks (processor and IO channels, main storage and computer power supply). Also
placed in the power supply rack are the channel-to-channel adapters, logic
repeater and their power supply.

"hen connecting main storage built with integrated circuits, the standard set for
the Yes-1045 is palced in two standard YeS EVM racks.

The CPU for the Yes-1065 computer includes the following units: microprogrsm con-
trol, instruction fetching and interruption servicing, arithmetic and logic,
storage control, checking and diagnostics, and the control panel.

Machine control storage consists of two parts:

permanent, designed to store processor and 10 channel control microprograms, and
loadable, for storing microprograms, console operations, diagnostic microprograms
and the microprograms for array processor access to the Yes-1045 computer. The

microprograms are loaded from the console magnetic tape storage unit, the HL-AS
cassette type.

A special high-speed unit, an accelerator, is included in the processor to speed
up execution of certain "long" arithmetic and logic operations. Executed in the
accelerator are all multiplication operations, translations into the binary and
decimal systems for packing and unpacking, all primary shift operations and some
move and store operations, 25 operations in all.

The Yes-1045 computer processor has the following technical parameters:

duration of machine step, ns 120

control principle hardware-microprogram
width of arithmetic unit, bits 32

number of overlap levels 2

The processor include; different types of integrated circuit storage: control, buf-
fer, local protection key storage, etc. The Yes-3206 main storage unit, designed
to receive, store and output information, is used as main storage in the Yes-1045.

182

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Ferrite cores are used to hold the information. The storage unit is built on the
principle of the 2.50 access. Structurally, the unit is made on the base of a
standard rack, in which are placed the control unit, storage modules (with 64K

bytes in each) and power supply system. There are facilities for protecting main
storage for store and read.

The storage interface permits effecting a bus increment of capacity (up to “H bytes)
of main storage by adding new OP [storage] modules.

The technical characteristics of the main storage unit made with ferrite cores are:

capacity, megabytes 1.0

cycle time, microseconds 1.25
access time, microseconds 0.65
width, bytes 8

The Yes-3267 main storage unit made with integrated circuits has the following
technical parameters (4K bits to a package):

capacity, megabytes 1.0
cycle time, ns 850
access time, ns 650
width, bytes 8

A rather advanced checking and diagnostic system is provided in the Yes-1045 compu-
ter to support high operating reliability and repairability.

A large share of the equipment (on the order of 95 percent) is hardware checked by
self-checking circuits, which permits detecting malfunctions quite close to the
time and place they appear.

The Yes-1045 computer recovery facilities provide the capability of continuing or
recovering the computing process when a random failure occurs. This is done either
by correction of single errors in main storage or by hardware-microprogram retry of
the 179 CPU instructions, in which the error occurred. Upon successful retry, nor-
mal operation continues, but the error is logged for subsequent analysis. Other-
wise, automatic retry of the situation that caused the malfunction is performed up
to eight times. An unsuccessful execution of all retry attempts causes storing of
the computer status and an interruption from the check circuits.

The high resolution of the diagnostics that enables localization of the malfunction
with an average precision of down to two-three TEZ's [standard exchange cards] is
achieved because of the use of the microdiagnostic procedures with a capacity to
In byte, the programs of which are stored on the HL-AS tape storage unit. This

provides the capability of checking the main assemblies of the central devices
within 10-12 minutes.

The diagnostic system also includes the autotester apparatus designed to check
TEZ's and permitting localization of a malfunction within individual cards with a
precision down to one or more microcircuits. A malfunctioning element on a card

is localized by using diagnostic tables and a special tester, and rapid recovery of
computer serviceability is enabled after a failure. Provided in the Yes-1045 com-

puter is the special unit for checking and diagnostics of the power supply (ASKDC)
that permits performing an automatic change of voltages of power sources, as well
as automatic checking of the status of power sources, fans, thermosensors, etc.

183

FOR OFFICIAL USE ONLY
NI! (M‘HUAL USE. ONLY

in the Yes-1045 computer, 10 is performed through the byte-multiplexer and block-
multiplexer channels. The combined hardware-micorprogrsm method is used to control
the IO channels. Data is exchanged through the 10 interface under control of the
channel hardware facilities and is executed concurrently with processor operation.
Data exchange between the 10 channels and main storage and processing of control
information are performed by processor iicilities under microprogram control. The
10 channels share the apparatus of control storage with the CPU.

Up to two byte-multiplexer and five block-multiplexer channels may be connected to
the Yes-1045 computer. The byte-multiplexer channel can operate in the multiplexer
or burst modes at a data transmission rate of 40K and 12K bytes/second, respective-
ly, and has up to 256 subchannels.

Throughput of the block-multiplexer channels as a function of their number varies
from 0.5" to 1.5H bytes/second, and total throughput of all IO channels is 5“ bytes
per second.

Up to 10 control units at a distance of 60 m may be physically connected to each
channel. The special unit, the logic repeater, is included in the machine to in-
crease the number (to 19) of devices connectable to the byte-multiplexer channel.

8.5. The Yes-1055 Computer

The Yes-1055 general-purpose computer has a medium throughput of 450,000 instruc-
tions/second and is designed to solve a broad range of scientific and technical,
economic and special problems both in the standalone mode and in an information
processing system, including real-time and shared-use systems.

The Yes-1055 computer has most of the properties of the Yes EVH-Z principles of
operation, the main ones of which include:

the universal instruction set, except the four multiprocessing instructions (SPX,
510?, SM, and 51910;

the basic and extended control modes;

organization of virtual storage by hardware facilities in the processor and
channels in the aggregate with program support of the operating system;

the block-multiplexer mode of channel operation and the universal interface for
channel communication with peripheral control units;

calls of special-purpose interruptions during execution of programs through use of
the monitor facilities that permit acquisition, analysfs and logging of information
on the status of program processing at the time of interruption;

logging of events in a program on branches, changes in contents of general
registers and main storage;

correction of single errors by using correcting codes during reference to main
storage;

obtaining information on the time of processes and analysis of their status by
using the time-of—day clock, comparator and CPU timer;

analysis of the status of the internal logic circuits in the CPU and channels by
using microdiagnostic procedures;

instruction retry when an error occurs during instruction execution;

extended precision floating point operations; and

operand placement on an arbitrarybyte-boundsry.

184

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The standard facilities in the logic structure of the Yes-1055 computer are: the
processor, control console, byte-multiplexer and block-multiplexer channels.

Optional facilities for the logic structure of the Yes-1055 computer are:
a second byte-multiplexer channel;

two block-multiplexer channels;

array processor;

direct control facilities;

channel-to-channel adapter; and

facilities for multiprocessor operation.

The Yes-2655 CPU has all the necessary function units for unpacking and executing
instructions and controlling the computing process; it also has all the facilities
for raising the efficiency of computations and extending system capabilities in
accordance with the Yes EVH principles of operation. It meets the requirements
for interactive operation with a large number of subscribers and common use of
data files.

The principle of microprogram control is implemented in the processor. Control
storage has a capacity of 8K instructions with 64 bits each, cycle time of 380 ns
and access time of 140 ns. In the main, storage of microprograms is performed as
a storage unit with permanent information. Only part of the microprogram storage
is reloadable, the part used by the system for error correction.

The Yes-1055 computer CPU includes the processor proper, main storage and the 10
channels.

The Yes-3200 main storage unit is made of MOS IC's with a 1020 x 1 organization.
Used in the structure of main storage is the method of dividing the storage into
four independent logic modules, access to which si effected by overlap according to
the principle of address inetrlesving, which enables the specified parameters of
model throughput. Main storage has two main versions: 1026K bytes and the maximum
of 2028K bytes. Storage cycle time is 1140 no; access width is 8 bytes. Facilities
are provided to correct single and identify double errors in main storage, and to
protect storage for reading and storing. Using the virtual principle allows
increasing the efficiency of use of main storage.

The res-1055 computer I0 system has byte- and block-multiplexer channels. The lat-
ter can also be used in the selector mode. Up to four block- and two byte-multi-
plexer 10 channels can be connected. One byte- and two block-multiplexer channels
are used in the main design.

The byte-multiplexer channel can operate in the multiplexer and burst modes at a
data transmission rate of 40K and 1H bytes/second, respectively, and has up to 256
subchannels. The block-multiplexer channel has a data transmission rate of 1.5H or
3H bytes/second for the one-byte or two-b,te interfaces, respectively. The total
throughput of all 10 channels is “-5" bytes per second.

The channel equipment contains a special unit to check the operation of the 10
channels. This is a feature of the Yes-1055 computer. The channel check unit sim-
ulates operation of peripheral equipment and communication interfaces, which on the
one hand, facilitates debugging and checking of the 10 channels, and on the other,
permits rapid and convenient localization of a malfunction that has occurred.

185
FOR OFFIGAL USE ONLY
FOR OFFICIAL USE ONLY

A supplementary unit for the Yes-2655 processor is the array module; it is not a
functionally independent device and can be used only in the Yes-1055 computer.
This is also a model feature. In contrast to the general method of connecting an
array processor as an IO channel (see chapter 1), the array module is connected
directly to the Yes-2655 processor as an executive resource. Structurally, it is
made so that it can be connected to a machine already installed.

The array module is a specialised executive unit designed for rapid calculation of
floating point operations used in array computations and Fourier transforms. In
the process. because of parallel execution of different processes, a high rate of
computation is achieved; depending on the size of fields, density of instruction
stream and algorithm used, it may be 10-50 fold greater than that achieved in
executing these operations in the arithmetic unit with floating point.

Connecting the array module directly to the processor opens the fundamental capa-
bility of organizing its operation concurrently with the operation of the executive
units in the processor. This raises considerably the computation rate in the pro-
cessor. However. specific realization of this operation involves modifying the
operating system and considerable difficulties in control of the computer processor.
Connecting the array processor through a standard IO interface does not provide to
the full extent overlap of its operation with the operation of the arithmetic unit
in the processor, but in return allows using standard control procedures. A quanti-
tative evaluation of the effectiveness of the first and second methods of connection
has not yet been exhaustively studied; therefore, the operating experience of the
Yes-1055 computer will be useful in solving this problem and selecting the direction
of development of specialized processors.

In the Yes—1055 computer. much attention has been paid to development of system con-
trol facilities and to the improvement of convenience in operation interaction with
the computer. The Yes-7069 operator display console. a structurally independent
unit, is used for these purposes. It is used both in controlling the system and in
servicing it. It contains all the necessary controls and facilities for maintenance
and display. The 10 unit is a display with light pen and keyboard. The screen
displays 25 lines of 80 characters each. The keyboard is used to input the neces-
sary information and specify the control function; it has 26 alpha, 10 numeric and
27 special characters. One version of the keyboard also includes 20 Cyrillic char-
acters. A high rate of communication is achieved through connecting a serial
printer to copy the information output to the display. The serial printer

operates at a rate of 65 cps.

The Yes-7069 operator console is connected to the processor by means of standard
and special interfaces. The standard IO interface allows connecting the Yes-7069
unit to any Yes EVH-l or EVHoZ model as an operator console. The special interface
is designed to be used only with the Yes-1055 computer for display output and per-
forming diagnostic procedures. The CPU allows connection of two Yes-7069 units.
The second unit is supplied at user option. The Yes-7069 operator console has high
esthetic and operating characteristics ensuring high comfort in computer servicing.

A peripheral feature for the Yes-1055 computer is the use of the Yes-7602 micro-
fiche output unit. Output rate is 5 microfichelminute, which is about 250,000

characters/minute. Lettering of each microfiche with visually readable microtype
is possible. The operating system supports operation of this unit.

186

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Another feature of the Yes-1055 computer is the availability of Yes DOS emulation
facilities. These facilities allow operation of Yes DOS under control of the Yes
OS control program. In other words, these facilities allow execution of programs,
written by the user for Yes DOS, under control of the Yes 08 operating system.

8.6. The Yes-1060 Computer

The Yes-1060 general-purpose computer has a high throughput of 1 million instruc-
tions per second. The concepts incorporated in the design of the Yes-1060 assume
its use in major computer centers and automated management systems for solving a
broad range of scientific and technical, plann-economic, informational and special
problems in the modes of local and remote processing of information. Capabilities
of versatile application of this computer are provided by the universal instruction
set, large size of main and external storage, high-speed 10 channels and broad set
of peripherals. The availability of these facilities as well as the advanced sys-
tem of interruptions, facilities for time readout and main storage protection
allow efficient use of the Yes-1060 computer in the multiprogramming, time-sharing
and interactive modes.

The Yes-1060 computer has all the capabilities of the Yes EVM-l and realizes all
the new concepts incorporated in the logic structure of the Yes EVH-Z:
extended instruction set;

extended control mode in the processor;

dynamic address translation in the processor;

indirect data addressing in the channels;

block-multiplexer mode of channel operation;

new multiprocessor facilities;

extended precision floating point operations;

extended interruption system;

new facilities for time readout;

provision of monitor programs;

program event recording; and

increase in efficiency of checking and diagnostic facilities.

The architectural and structural features of the Yes-1060 computer are aimed at
raising throughput, reliability and efficiency of use and creating simplicity and
convenience in servicing.

The Yes-2060 processor provides for fetching of data from main storage, controlling
the sequence of instruction execution, organizing interruptions, initiating opera-
tion of 10 channels and implementing functions for checking and diagnostics. The
processor includes: central control unit, arithemtic and logic unit, storage con-
trol unit, checking and diagnostics unit and the control console.

The central control unit is designed to fetch, unpack and buffer instructions, con-
trol the operation of the arithmetic unit and execute system functions. This device
includes the units of instructions. data addresses, microprogram control, interrup-
tions. timers and external communications unit.

The arithmetic and logic unit is used to execute arithmetic and logic operations
and generate operand addresses. It includes: general and floating point registers
and a parallel adder. An optional unit is a fast multiplier.

187

FOR OFFICIAL USE ONLY
I-‘OII OFFICIAL USE ONLY

The storage control unit is designed for processor and 10 channel communication
with main storage and includes main buffer storage, dynamic address translation
facilities, channel buffer unit and storage adapter.

The checking and diagnostics unit provides for control of the processor indicstion
system, control of hardware checking circuits and check interruptions, recording
processor status. hardware retry of instructions after detection of an error,
execution of the functions of the DIAGNOSE instruction, loading of microprograms
into control storage, execution of microdiagnostic tests for localization of mal-
functions snd control of the synchronization system.

The control console is intended for manual control and display of computer status
during maintenance and operation. '

High speed of the processor is achieved through organization of rapid access to
data, overlap of execution of operations and use of efficient computation algorithms.

The 8K-byte main buffer storage is built with fast integrated circuits. it is used
to match processor operation time with main storage time parameters. Data is ex-
changed between main storage and the buffer in 32-byte blocks (pages). Four-way
interleaving of addresses is used to speed up exchange. The buffer storage opera-
ting cycle, equal to the processor operating cycle, ensures rapid preparation of
instructions and operands. Using an efficient algorithm for replacement of infor-
mation in buffer storage combined with the use of a channel buffer permits

reducing conflicts in the processor.

Efficient algorithms are used in the arithmetic unit. This makes it possible to
combine a high rate of execution of operations with reasonable outlays for equip-
ment. Using a special unit for fast multiplication has made it possible to raise
the speed of execution of multiply operations 2-2.5 fold.

instruction processing in the processor has three stages:

instruction fetching from the buffer, unpacking and generating of the operand
address;

reference to storage and fetching of data;

execution of the operation and storage of the result.

in accordance with this, several instructions, at different levels of processing,
are executed at the same time in the processor. Operation of the overlap levels
is strictly synchronized in time, which simplifies organzation of control. Con-
currently with processing of the instructions, the address of the next sector of
the program is generated and instructions are read from storage to the buffer
register.

Besides the purely logic capabilities of the computer, the simplicity and conveni-
ence 0‘ operation of the machine and rapid location of malfunctions are very impor-
tant. )uring structure development, the designer almost always solves a compromise
problem: achieving high throughput with reasonable computer complexity. In the
Yes-1060 computer, the solution to these problems is shaped by:

the introduction of microprogram control not only in the arithmetic unit, but also
in the central control unit; and

the introduction of an efficient checking and diagnostics system.

188

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Hicroprograms control Instruction processing in the processor, execution of opera-
tions and interruption processing. The writable control storage is built with
integrated circuits and consists of two units: basic and control, which are
accessed by independent addresses. The main unit of microprogram storage holds
#096 words of 166 bits each; the control unit holds 512 words of 24 bits each.

The microprograms stored in the control unit determine the sequence of processing
stages and processor steps in instruction execution and also the degree of overlap
of the processing stages. They also interrupt the sequence of the computing pro-
cess when conflict situations, outside intervention or interrupt requests occur.

The microprograms in the basic unit of control storage determine the specific ac--
tions needed in the process of preparing instructions and executing operations and
interruptions.

In the Yes-2060 processor, all units for central control and the arithmetic unit
operate under microprogram control. The unit of system facilities for control and
the checking and diagnostic unit have mixed hardware-nicroprogram control. This
widespread introduction of microprogrsm control is a feature and advantage at the
same time of the Yes-1060 computer, since until recently, this principle was not
widely used for high-throughput machines.

The high requirements for operating reliability in the YeS-1060 are met by an
advanced checking and diagnostic system. This system includes hardware and software
facilities that interact both in the main operating mode and in the maintenance
mode.

The hardware facilities effect online checking of processed information, elimination
of the consequences of failures by retrying up to eight times instructions and
sections of programs in the processor, retry of 10 procedures in channels, and
correction of single errors in main storage. To analyze the causes of failures,
processor facilities allow fixing in main storage the status of equipment when an
error occurs.

Under the conditions of preventive maintenance and servicing, it is possible to
diagnose equipment by using special hardware facilities and a set of test programs
and by executing microdiagnostic procedures to locate malfunctions. online tests
for checking external devices in the process of executing user tasks allow con-
tinual tracking of the status of external devices and when necessary deciding
whether or not to use them in the system. These capabilities combined with the
operating system recovery facilities create the prerequisites for efficient opera-
tion of the Yes-1060 computer at the user site. This is also facilitated by the
software system that includes the latest version of Yes 08, application program
packages that extend operating system capabilities, and application program
packages for various purposes.

Yes-1060 system facilities permit combining the resources of several computers to
execute a cowmnn task, ensuring in the process high throughput and.relisbility.
Communication between the individual computers can be effected at the level of
any system component by using specific multiprocessor facilities:

at the level of channels by using a channel-to-channel adapter;

at the level of peripheral control units by using a two-channel switch;

189

FOR OFTNCIAI.USE10NLN
FOR OFFICIAL USE ONLY

at the level of the basic main storage;
at the processor level by using direct control facilities.

The facilities that ensure efficiency in system application of the computer allow
creating powerful systems and multimachine computer complexes based on the Yes-1060.

The Yes-1060 computer IO channels are physically independent standalone units that
are connected to the processor and profit by simultaneous access to main storage.
Information transfer rate depends substantially on the number and type of channels
used. Up to seven [0 channels, supporting the byte and block-multiplexer and
selector modes of operation, may be conencted to the Yes-1060 computer processor.
The block-multiplexer channels have the two-byte interface which allows connecting
devices distinguished by a high data transfer rate.

To operate the computer in the virtual storage mode, indirect addressing facilities
have been incorporated in the channel to complement the address translation
facilities in the processor. Hardware retry of instructions in a channel has also
been provided. The availability in the channel of facilities to log channel status
makes it possible to recover system operation by program methods when errors occur
in an IO procedure.

Structurally, the Yes-1060 computer channels are made in the form of Yes-4001 units
that include four functional channels: one byte- and three block-multiplexer.

The block-multiplexer channel can operate in the mode of a selector channel. The
block-multiplexer channels are controlled by hardware facilities; the principle of
microprogram control is used for the byte-multiplexer channel.

The byte-multiplexer channel consists of the main multiplexer_§hannel and four
selector subchannels. Throughput of a selector subchannel is 500K bytes/s. The
integrated throughput of the byte-multiplexer channel is 1.5“ bytes/s. The block-
multiplexer channel has a throughput of 1.5M bytes/s with the one-byte interface
and 3M bytes/s with the two-byte interface.

There are two versions of main storage for the Yes-1060 computer: ferrite cores
and integrated circuits. The ferrite-core main storage unit has a capacity from
2M to 8M bytes, reference cycle of 1.25 microsecond and access time of 0.8 micro-
second. Tb speed up access to main storage, ir- entire extent is divided into
four independent logical blocks. The Yes-3206 main storage unit is built on the
modular principle and contains one megabyte per rack. The power supply is placed
in the same rack. Structure, circuit and design solutions for the YeSo3206 unit
have permitted reducing the bulk and raising the density of equipment packaging
compared to the main storage unit in the Yes-1050 computer which uses the same
ferrite cores.

The Yes-3266 semiconductor main storage unit for the Yes-1060 computer is made of
dynamic inetgrated circuits with 16K bits per package. It has the same interface
for communication with the processor and the same organization as the Yes-3206
unit. Capacity of the Yes-3266 unit is 8H bytes, cycle time is 680 ns and
access time is 520 ns.

190

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

8.7. The Yes-1065 Compute:

With a throughput of four to five million instructions per second, the Yes-1065
computer is the top model in the YeS EVH-Z. It is intended for application in
major computer centers and large data processing systems. This computer implements
all data processing modes and uses all the architectural and logic capabilities
provided in the Yes EVM-Z. The main quality of the computer, high throughput,

predetermines the features of its application and the features of the structural
implementation.

First of all, the Yes-1065 model is a general-purpose computer. In these terms, it
has to have the properties of universality and provide the capability of implement-
ing the most varied classes of algorithms for user tasks. At the same time, it has
to have the properties of a special system application. in these terms, the comp:-
ter must have the characteristic features of an open system that allow new problem-
oriented devices to be included in its makeup. Considering this, one can formulate
the basic properties of the Yes-1065 computer architecture.

1. Structural solutions are aimed at achieving the maximum rate of execution of a
random stream of instructions processing any data.

2. The computer structure provides the capability of incorporating in its makeup
special processors to increase the rate of processing in systems used to solve a
limited set of tasks. The purpose of these processors is to increase at least by
an order the rate of execution of individual functions most often encountered in
the computing process at a specific user site.

3. There are advanced complexing facilities in the computer to enable creating
multiprocessor and multimachine complexes for a general increase in system computing
capacity.

A processor structure that can be described as one with common resources was chosen
for the Yes-1065 computer. This assumes the availability of several devices that
prepare instructions for executionI but the execution of these instructions is per-
formed in one operating device. Nevertheless, even with this structure, it is ex-
pected that special organizational steps are taken to reduce the processing time

at all stages of instruction preparation and execution.

To reduce the data fetching and storing stage in the Yes-1065 computer processor,

a 32K-byte main buffer storage unit is used; it operates at the rate of operation
execution in the executive units. Information is exchanged between main storage
and the buffer in 32-byte blocks. An additional gain in the operating rate at the
stage of storage reference is obtained because the results of operations are stored
only in buffer storage without immediate duplication of them in main storage.

These results are stored in main storage when the least recently used information
is destaged according to the standard discipline.

In the arithmetic and logic unit, a cannon resource in the YeS~1065 computer pro-
cessor,operation execution time is reduced by the implementation of the fastest al-
gorithms for oepration execution and by dividing this unit into several independent-
ly operating units (operating devices) for information processing. Each of these
devices is oriented to executing a group of instructions close in type. This

191

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLV

simplifies the structure of the operating device, reduces the outlays for imple-
mentation of each device and permits reducing the time for execution of operations
compared to that for a general-purpose device, although total costs of equipment
increase.

Provided in the structure of the Yes-1065 computer processor are four independent
units for execution of operations: fixed-point arithmetic, floating-point arithme—
tic, arithmetic for processing variable-length fields and decimal numbers and,
finally, the fast multiplier (divider). Access to these units is independent and
each may operate concurrently with the others. There is also the capability of
increasing total capacity of the arithmetic unit by connecting both similar devices
and problem-oriented devices for information processing.

The toatl throughput of all operating devices is several tens of millions of opera-
tions per second and is considerably higher that the throughput of the storage con-
trol unit and the central control unit (instruction processor). In this case, it
is advisable to include in the processor structure several instruction processors
and divide buffer storage into independent sections with their own control and ac-
ceas to main storage, i.e. to have several storage control units. The Yes-1065
computer processor has two storage control units, each with a 32K-byte buffer and
two instruction processors. Each instruction processor manages its instruction
stream to jointly maintain the required load on the arithmetic unit.

The structure with common resources, like the multiprocessor from the viewpoint of
the operating system, operating with a common extent of main storage, has a number
of advantages. First of all, there is the effective increase in throughput and
provision for system viability. The computer continues functioning, though with
less throughput, when the separate devices fail. "hen a second arithmetic unit is
included in the computer, which is also a common resource, the reliability of such
a computer system increases manifold. The inclusion of several instruction proces-
sors in the processor also simplifies organization of the structure of each. In
doing so, organizing a large number of overlap levels is avoided and the micro-
program principle of control is implemented.

in the computer with common resources, problem-oriented processors that raise the
overall machine throughput may be connected to all the instruction processors with
the rights of a cannon resource. For this, they have to have an interface to the
instruction processor similar to the operating devices. For the instruction pro-
cessor, this connection of new devices boils down to implementing additional in-
struction codes corresponding to the functions of the equipment being incorporated,
which is rather simple with the availability of microprogram control. Far more
complex is the software problem for these devices that has to be solved individually
in each specific case.

The high rate qualities of the Yes-1065 computer processor are supported by a
powerful 10 system, large main storage and service facilities.

Along with the traditional structural solutions, when the channels are rigidly
attached to the processor, the principle of floating channels (cross-call channels)
is used in the Yes-1065. The principle of the universal channel (IO multiplexer),
when execution of the functions of the byte- or block-multiplexer modes is enabled
by the use of microprogram control, has also been implemented. The channels are

192

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

operationally adjusted for the required mode by reloading of microprogram storage.
All the new functions of the Yes EVH-Z are performed in the YeS-1065 computer
channels: indirect data addressing, IO operation retry and the two-byte interface.

Up to 16 channels, enabling total throughput of about 30H bytes/s, are connected to
the Yes-1065 computer. The main storage unit for this computer is made of l6K-bit
microcircuits. The storage structure provides eight-way address interleaving.
Storage size is 8M bytes, cycle time is 870 ns and access time is 650 ns.

A special processor for diagnostics and control, placed in the system control con-
sole, is used in the Yes-1065 computer. Its functions include performing diagnos-
tic procedures and maintaining direct contact with all central units in the pro-
cessor.

The Yes-1065 computer has an advanced error detection system, recovery facilities

to eliminate the effect of random failures through automatic retry of operations,
and error correction facilities using correcting codes. The microdiagnostic system
permits detecting malfunctions during preventive maintenance and servicing. The
computer structural features govern the specific functions of the console processor:
tracking the functioning conditions of the individual devices, acquisition and
analysis of information on failures, disconnection of malfunctioning devices and
diagnosis of them, and decision-making on system configuration. To do this, it has
large internal storage and the required set of its own external units.

Conclusion

Development of the Unified System of Computers has made it possible to a consider-
able extent to solve the problems of equipping the national economy of the countries
in the socialist cuununity with computer facilities. The Unified System is now a
powerful, advanced system of computers in the socialist countries, has been
assﬂnilated into production and has found widespread application in various sectors
of the economy. Hark on the Unified System has not ended with the development of
the first and second phases. The main directions of further development for the
Unified System are:

increasing the efffectiveness (throughput/cost ratio) of computers with respect to
the YeS EVM-Z;

improving technical parameters and operating characteristics;

increasing the effectiveness of introduction into various spheres of the national
economy through functional specialization of hardware, use of programmable hardware,
built-in hardware control facilities and organizing data processing networks;
increasing further the effectiveness of stating and solving problems, including
solving the problem of using a cannon information base and further introduction of
problem-oriented language facilities; and

reducing the hardware and software maintenance costs by providing high reliability,
and improving the methods of diagnostics and effective redundancy. The determining
feature of this development is the shift to the new technological design base

using LSI circuitry which is predetermining the creation of fourth-generation
computers.

193

FOR OFFICIAL USE ONLY
10.

11.

12.

13.
lb.

15.

16.

17.

FOR OFFICIAL USE ONLY

BIBLIOGRAPHY

"IBM System/360. Principles of Operation,” ed. by V. S. Shtarkman, Moscow,
Sovetskoye radio, 1969.

Gorbatsevich, S. L.; Makurochkin, V. C. and Cheremisinov, V. M., "Development

of the Main Units for External Storage in the Unified System of Computers," in
"Vychislitel'naya tekhnika sotsialisticheskikh stran" [Computer Technology of

the Socialist Countries], No 6, 1979.

(Jermain, K.), "Programming for the IBM/360," Moscow, Mir, 1973.

Larionov, A. M., ed., "Yedinaya sistema EVM" [Unified System of Computers].
Moscow, Statistika, 1975.

Zhimerin, D. 6., "Application of Electronic Computer Technology in the
Socialist Countries,“ in “Computer Technology of the Socialist Countries:'ﬂo 5,
Moscow, Statistika, 1979.

Katzan, H.{ "Operating Systems," Moscow, Mir, 1976.

Katzan, H., "System/370 Computers," ed. by V. K. Levin and L.D. Raykov, Moscow,
Mir. 1974.

(Colin, A.), "Introduction to Operating Systems," ed. by V. V. Martynyuk,
Moscow, Mir, 1975.

Lapin, V. 8., "Development of Cooperation in Data Teleprocessing. New Tasks,"
in "Computer Technology of the Socialist Countries," No 4, Moscow, Statistika,
1978.

Lapin, V. S. and Semenikhin, V.S., "Concepts and Prospects for Development of
Data Teleprocessing in the Unified System of Computers," in "Computer Technolo-
gy of the Socialist Countries," No 1, Moscow, Statistika, 1977.

Larionov, A. M.; Levin, V. K. et al., "Basic Principles of Design and Technical
and Economic Characteristics of the Unified System of Computers (YeS EVM),"
UPRAVLYAYUSRCHIYE SISTEMY I MASHINY, No 2(4), 1973.

Larionov. A. M.; Levin, V. K.; Przhiyalkovskiy, V. V. and Fateyev, A. Ye..
"Technical and Operating Characteristics of Models in the Unified System of
Computers," UPRAVLYAYUSHCHIYE SISTEMY l MASHINY, No 2(4), 1973.

Enslow, P. H., ed., "Multiprocessora and Parallel Processing," Moscow, Mir,1976.

Peledov, G. V. and Raykov, L. D., "Vvedeniye v 08 Yes EVM" [Introduction to
the OS for the Unified System of Computers], Moscow, Statistika, 1977.

"IBM System/370. Principles of Operation," ed. by L. D. Raykov, Moscow, Mir,
1975.

Przhiyalkovskiy, V. V. and Lapin, V. 8., "Architecture of Open Systems for Data
Teleprocessing Networks in the Unified System of Computers," AVTOMATIKA I
vvcaisuni'mu TEKRNIKA, No 2, Riga, 1979.

Przhiyalkovskiy, V. V., “Some Results from the Development of the Unified
System of Computers and Prospects for Further Development of It," in "Computer
Technology of the Socialist Countries,"fb 6, Moacow, Statistika, 1979.

194

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

18. Pykhtin, A. Ya.; Gorslov, V. I. et a1., "Yes-7920 Complexes: New Terminals

with Broad Capabilities," in "Canputer technology of the Socialist Countries,"
No 5, Moscow, Stetistika, 1978.

19. Rskovskiy, H. Ye., "Decades of Cooperation," in "Canputer Technology of the
Socialist Countries," No 6, Moscow, Ststistlks, 1979.

20. Fateyev, A. Ye.; Roytman, A. 1.; and Pateyeva, T. P., "Prlkladnyye progremy
v sisteme metemsticheskogo obespecheniys Yes EVE" [Application Programs in the
Software System for the Unified System of Computers], Pbscov, Stetistlks, 1978.

21. Larionov, A. H., ed., "Elektronnsya vychislitel'naya mashina EVM Yes-1050"
[The Yes-1050 Electronic Computer], Moscow, Stetistika, 1976.

COPYRIGHT: [zdstel'stvo "Statistiks", 1980

8545
C50: 8144/1811

-E.\'D-

195

FOR OFFICIAL USE ONLY