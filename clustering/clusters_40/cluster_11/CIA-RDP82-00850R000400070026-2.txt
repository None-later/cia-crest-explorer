FOR OFFICIAL USE ONLY

JPRS L/10111
10 November 1981

Translation

COMPUTING SYSTEMS AND SYNCHRONOUS ARITHMETIC

BY

M.A. Kartsev and V.A. Brik

FOREIGN BROADCAST INFORMATION SERVICE

FOR OFFICIAL USE ONLY
NOTE

JPRS publications contain information primarily from foreign
newspapers, periodicals and books, but also from news agency
transmissions and broadcasts. Materials from foreign-language
sources are translated; those from English-language sources
are transcribed or reprinted, with the original phrasing and
other characteristics retained.

Headlines, editorial reports, and material enclosed in brackets
[] are supplied by JPRs. Processing indicators such as [Text]
or [Excerpt] in the first line of each item, or following the
last line of a brief, indicate how the original information was
processed. “here no processing indicator is given, the infor-
mation was summarized or extracted.

Unfamiliar names rendered phonetically or transliterated are
enclosed in parentheses. words or names preceded by a ques-
tion mark and enclosed in parentheses were not clear in the
original but have been supplied as appropriate in context.
Other unattributed parenthetical notes within the body of an
item originate with the source. Times within items are as
given by source.

The contents of this publication in no way represent the poli-
cies, views or attitudes of the 0.5. Government.

COPYRIGHT LAHS AND REGULATIONS GOVERNING OWNERSHIP OF
MATERIALS REPRODUCED HEREIN REQUIRE THAT DISSEHINATION
OF THIS PUBLICATION BE RESTRICTED FOR OFFICIAL USE ONLY.
FOI:OFFN3AL.USE‘0NLY

JPRs L/lOlll
10 Novaaber 1981

COMPUTING SYSTEMS AND SYNCHRONOUS ARITHMETIC

Moscow VYCHISLITEL'NYYE SISTEMY I SINKHRONNAYA ARIFMETIKA in Russian
1981 (signed to press 26 Mar 81) PP 2-5, 162-275. 348-359

[Annotatiom table of contents, preface, chapters 4 and 5, bibliography
and index from book "Computing Systm and Synchronous Arithmetic", by
Mikhail Aleksandrovich Rartsev and Vladimir Arkad'yevich Brill.
Izdatel'stvo "Radio 1 svyaz", 10,000 copies. 360 pages, UDC 681.32]

Coureurs

Annotat ion
Preface

o-u-n

4. High-Speed Synchronous Multipliers
4.1. Decreasing the Tine for Adding rartial Products 3
4.2. Preliminary Formation of Multiples of Multiplicand 5
4.3. Use of Negative Partial Products 7
4.3.1. Method of Multiplication by Group of q Bits of Multiplier

with Decoding of n+1 Bits of Multiplier 7
4.3.2. Method of Multiplication tron Dov-Order Bits of Multiplier 9
4.1.. Analysis and technique of Building Simultaneous Multipliers 13
4.4.1. Classification of Simultaneous Multipliers 13
4.4.2. Analysis of Processes of Adding Partial Products in
Mouogeneous Simultaneous Array Multipliers 17
4.4.3. Analysis of Processes of ”Decay” in ﬂosogeneous
Simultaneous Array ﬁlltipliers 25
4.4.4. Multilayer Simultaneous Array Multipliers 27
5. High-Speed Synchronous Dividers
5.1. Methods of Short Restoring Division 47
5.2. Stefanelly's Methods ’08
5.3. Performing Division by multiplication 49
5.4. Short Nonrestoring Division 52
5.4.1. General Description of Nonrestoring Division 52
5.4.2. Classical Method of Division 56
5.4.3. Graphic-Analytic Method of Analysis of Processes of Division 62
5.4.4. Division Using Sy-etricsl Set of Integers Including Zero 65
5.4.5. Generalized Method of Monrastoring Division and
Investigation of It 70
5.4.6. haple of Inpluentation of Generalised Method of
Nonreatoring Division 33

-g- [l-ussn-urouo]

FOR OFFICIAL USE ONLY
APPROVED FOR RELEASE: 2007/02/09: ClA-RDP82-00850R000400070026-2

FOR OFFICIAL USE ONLY

Bibliography
Subject Index
Table of Contents

FOR OFFICIAL USE ONLY

APPROVED FOR RELEASE: 2007/02/09: ClA-RDP82-00850R000400070028-2
FOR OFFNJAI.USEINVLY

[Text] Annotation

The authors investigate. on the one hand, the organisation of structures of
multimachine, multiprocessor and conveyor computing systesm and the organization
of coqautations in them, and one the other hand, the majority of brown -thods

for building high-speed synchronous adders, multipliers and devices for division
used in computing systems and machines.

Preface

When we started on this book, we realized there is currently no shortage of material
on computing systems. On the contrary, the flow of books and articles on this sub-
ject is essentially outstripping the development of technology and methods of

applying computing systems. The nunber of titles of just monographs on this subject
probably exceeds the number of computing systems that have been implemented and are

operating in the world. Meanwhile, there are still too many points not yet clear
in this field.

Bven_the terminology has not stabilized. In this book, by the phrase "computing
system," used in the title, we mean computing resources designed to execute parallel
computations; a precise definition of this concept is in section 1.1.1.

But the question least analyzed, in our view, is throughput of computing systems.
Too often the data given on the throughput of a computing system in design or pro-
duction are obtained by simply adding the throughput of the individual resources

that make up the system. Meanwhile, the situations users of the actual computing
system encounter may be considerably different; accordingly, the data on system
throughput that he needs are also different.

If the system is used within a major computer center, where a large number of users
solve their relatively small problems, total system throughput is of little interest

to each individual user. It is important to him only to the extent that it affects

1

FIHICNWWC1A1.USEIMNLY
FOR OFFICIAL USE ONLY

the ttuc he gets lo! operating in the interactive mode or the jobs accepted tron
him for processing in the batch mode.

We deal with a very similar situation, as a rule, in using a computing system with-
in an automated production management system (on the scale of an enterprise. sector
and the national economy as a whole) and in various information retrieval systems.
Here too there is usually a number of small jobs with few links to each other. but
operating with a common data bank. But the designer of an ASU [automated manage-
ment system] or information retrieval system must. of course. be interested in
the total throughput of computing resources since the specific set of jobs in his
system must be executed within specific time intervals (sometimes-within several
hours, or several days or several weeks).

We encounter a fundamentally different situation in automated process control sys-
tems, in solving major scientific problems and in other cases. nigh throughput of
compyting resources is needed in this case to obtain within a brief time a solution
to one. but rather massive. problem. It seems to us in many cases neither the com-
puter system designers, not those expecting to use the systems for the purposes in-
dicated clearly understand that the same computer system cannot achieve identical
throughput in solving major problems of different classes and that there has to be
a specific correspondence between the specific problem properties and the computing
system structure for computing system capabilities to be used reasonably effi-
ciently.

In this book, when we speak of high-throughput computing systems, basically we have
in mind precisely the latter situation (precise definitions of actual user through-
put and user efficiency of a computing system are given in section 1.1.2.).

Chapters 1 and 2 are devoted to a detailed consideration of precisely these points.
Singled out as a result is the type of synchronous computing systems which poten-
tially can achieve the maximum in actual user throughput. Naturally, this through-
put can be implemented when a certain class of problems is run (i.e. problems
having certain properties), but this class is rather broad and includes rather
major problems.

Chapters 3-6 are devoted to an examination of the most complex technical questions
that arise in building these systems-dsvelopment of synchronous methods of execu-
ting arithmetic and logic operations, i.e. methods that provide for minimal time
in executing an operation irrespective of the operands on which it is executed.

The importance of these chapters is considerably broader than could be deduced from
the preceding, since the use of synchronous methods for executing operations is
necessary even when building conventional (single-processor) control machines de-
signed to operate in real time. In many cases, these synchronous methods of execu-
ting operations achieve higher speed than the well known asynchronous methods. and
it is expedient to apply them in developing any high-speed digital computer in
general.

Chapter 7 is intended for the reader who needs more background and who would like
to understand fully the content of the whole book. he should start reading the
book precisely from this chapter which contains elementary information on the
principles of computer technology.

FOR OFFICIAL USE ONLY
'0! OFFICIAL ['88 ONLY

Chapters 1 and 2 of this book were written by H. A. Kartsev and chapters 3-7 by
V. A. Brik.

The authors will be grateful to readers for comments made on the book's content.
V. A. Brik. h. A. Kartsev
4. high-Speed Synchronous Multipliers

Multiplication has to be performed to solve the majority of computing problems.
Problems that include division can often be solved by using multiplication, addition
and subtraction. Division can be performed, for example, by using multiplication
and tables of inverse values stored in memory. There are many methods for "getting
around" division, i.e. accomplishing it without special-purpose devices designed

for this.

Multiplication cannot be "avoided." The only way to avoid direct calculation of a
product is to use multiplication tables. however. employing this method in ma-
chines with parallel operation requires a large amount of storage. _Any software
method of multiplication requires repeated addition which cannot be performed as
quickly as multiplication is performed by using high-speed hardware methods. There-
fore, the rapid hardware method for performing multiplication is a very common
approach in designing the arithmetic unit.

All known synchronous methods for speeding up multiplication reduce essentially to
the separate or complex use of the following three methods:

1. Reducing the time needed for performing addition of partial products, i.e. the
products of the multiplicend by the individual digits or groups of digits of the
multiplier.

2. Reducing the number of partial products by using multiplicamd multiples formed
in advance.

3. Using subtraction in multiplication which permits reducing the number of
additional adders needed to form multiples of the multiplicamd.

This classification is based on logical and mathematical ideas. the implementation
of which leads to raising speed. Each of these directions is embodied in the group
of methods for speeding up multiplication, the hardware solutions of which can
differ considerably from each other.

In this chapter. the basic synchronous methods for speeding up execution of multi-
plication are discussed.

6.1. Decreasing the Time for Adding Partial Products

The time for adding all the partial products can be reduced by three methods:
speeding up the procedure for adding the next partial product to the sum of the
preceding partial products; starting the addition of the following partial product
prior to completion of the addition of the preceding partial product; and finally.
building circuits that add the running sum of partial products at once to several
successive partial products.

FOR OFFICIAL USE ONLY
FOR OFIICIAL USE ONLY

The main implementation of the first method is the use of a fast adder for adding
the next partial product to the sum of the preceding. If one desires, this group
of methods nay also include the use of the well known multiplying circuits that
overlap addition with a shift of the multiplicsnd (fig. 7.7.1. b and d [not repro-
ducedl).

the second method is implemented in the method of multiplying in which the so-called
carry save adder is used [1 and section é.3.2.]. The idea of this method consists
in forning the running sun of the next partial product with the sum of the preceding
partial products in the forn of a two-digit code, i.e. in the form of two numbers.
In the extreme case. one of these two numbers is forned from the step-by-step suns
s, and the other from the step-by-atep carries e. The principle of operation of
this device is illustrated by the simplified structural diagram shown in fig. 6.1.1.

Kev: ' I“ (5)

l. Rgl - register 1

2. RgZ - register 2

3. Rg3 - register 3

a. ng - register 4

5. P - next partial product

6. Sn - coincidence-type adder
7. e - step-by-step carries
8. s - step-by-step sums

 

Key:
1. Rgl - register 1
2. Rg2 - register 2
3. Rg3 - register 3
5. R34 - register 4
5. P1 -- partial product 1
6. Sal - adder l
7. e -- step-by-step carries
8. s -- step-by-step suns
9. P2 - partial product 2
10. 8:2 - adder 2 s
11. Su3 - adder 3 (3)

F18. 4.1.2

During each cycle, the next partial product P is added to the sum of the preceding
partial products in the coincidence-type adder Sm. At the end of the cycle, the
values of the signals e and s are stored in registers Rg3 and 8gb, and at the start
of the next cycle are sent to registers Rgl and RgZ. A gain in speed is achieved
because there is no carry propagation process in the adder Sm; its operating time in
this case is reduced, obviously, to the operating time of one one-digit adder.

 

Hith more economical (but also slower) versions, the entire adder is subdivided not
into individual digits, but into relatively quick q-digit (l<: q<: n) adders. In
doing so, the first of the two indicated nunbers is formed from the outputs of the
sums of these adders, and the second number, containing q-fold fewer significant
digits, from the carry signals generated in the q-digit adders (by one signal for
each such adder).

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In any of these versions, after the two-digit code of the final product is obtained,
the two-digit code is translated into one-digit, i.e. conventional addition. This
may be done in a conventional parallel, or even better-in a fast parallel, adder.
In the device shown in fig. 4.1.1, final addition any he performed in the adder am.
which must in this case, after running through all the cycles of addition with the
partial products, be "retuned" from the mode for translating three-digit code (i.e.
three numbers) into two-digit--to the mode for translating two-digit code into
one-digit. Instead of this, final addition may be performed in a separate adder,

which should be installed after registers Rg3 and Rg4. this version of the device
will be shown in fig. 4.1.2.

The third method for speeding up the process of adding partial products assumes the
introduction of additional adders into the arithmetic unit. The number m of partial
products that are simultaneously added to the running sum of partial products may
vary. A multiplication operation. in the process. consists of a series of cycles,
during each of which m new partial products are added. In doing so, the carry
storage method is also usually used and this speeds up the process further. In fig.
4.1.2, as an example, it is shown how another two (m - 2) partial products P1 and P2
can be added in each cycle to the running sum of partial products and with that the
sum formed in the form of two-digit code. Final addition in this scheme is done by
adder Sm3 which it is advisable to make fast.

In the ultimate version, the multiplier composes at once all partial products.
Multiplication in this case is perforned in one cycle. Multipliers of this type are
called simultaneous (array, synchronous, pyramids of adders etc.). An analysis and
description of these devices are given in sections 4.4. and 6.3.

4.2. Preliminary Formation of Multiples of the Multiplicand

In this nethod of multiplication, the multiplier is subdivided into groups of q
digits each and may have yet another group containing less than q digits. Each
group of digits is decoded independently of the others as a conventional binary num-
ber. Considering by convention that the point is located at the right of the group,
in decoding there is generated one of the numbers (signals)

0, 1. 2) 3. see, zq - 1

and used as the next partial product is respectively one of the Zq multiples of the

nultiplicand c. shifted the necessary way relative to the running sum of partial
products:

0. 1c. 2c, 3c, .... (2q - 1)c.
The rule for decoding one group for the case q - 3 is shown in table 4.2.1.

Table 4.2.1.

Digits I Digits Digits Digits
of group Multiple; of group Multiple of group Multiple of group Multiple

 

 

 

 

 

000 o ' 010 2c 1oo ac 110 6c
001 1c 011 3c 101 5c 111 7c
5

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Thus, the individual digits of the group when decoded correspond to the natural
weights: u. - r."

V digits

)< >( )( ... )( )(
twat-mu 2' 2-

Let us designate the number of groups into which the multiplier is subdivided (or,
which is the same, the number of partial products) by m. The relationship between
a. q and n has the following form:

m=}%rﬁ «an

‘) ldi is the smallest integer not less than d.

Extreme cases of subdividing of the multiplier into groups arethe case when all

groups are "full":
hA AA

x...x...x...xx...x
Y . . HY

(lengths of the groups are indicated at the top, their numbers at the bottom). and
the case when a group not full contains only one digit:

0’ ox§<47<x 5 x x' ‘ I

(the group not full is shown at the left, but it can be in any other position of the
ﬂUlC19112r). The remaining cases are intermediate between these two. What has been
said is illustrated by the double inequality

(In-l)q+l<n<mq.

the right and left boundaries of which correspond to the two indicated extreme
cases of subdivision. The relationship (6.2.1) is valid in all cases.

Those multiples of RC, for which R is odd and greater than one, are formed in ad-
vance by using auxiliary adders, the number of which. evidently. is equal to

2““*- 1. The remaining multiples of the multiplicend are derived through additional
shifts from c and from the multiples generated by the auxiliary adders. Thus, when
q - 2, an adder for forming 3C is required; when q - 3. adders of 3c. SC and 7c are
needed; when n I 4. adders of 3c, SC. 70. 90. 11c. 130 and 156, etc.

One group of auxiliary adders may compute the multiples of RC, using as source num-
bers the values of 192‘ (t is an integer) obtained by a simple shift of the multi-
plicand. Foremsmple: 30 I C + 20, 5C - ac + C. 7C - BC - 0. 9C ' BC + C,

15c - 160 - C, etc. The other auxiliary adders have to use the outputs of the
adders of the first group. For example: 13c - 80 + SC or 130 - 166 - 30, etc.

6

FOR ( Y
FOR OFFICIAL US! Oil?

It is evident that when this method is used. decoding of the groups may begin (i.e.
multiplication may begin) at either end of the multiplier. It is also possible to
decode simultaneously several groups of digits of the nultiplier; this necessity
occurs when several partial products are added simultaneously in the multiplier, as
was shown, for exanple. in fig. 6.1.2.

It is believed that when this method is used. nultiplication time is reduced about
q-fold (we assume that the partial products in turn are added in a parallel accumu-
lating adder, do not consider the possibility of the presence of one not full group
of digits of the multiplier and ignore the time spent by the auxiliary adders on
forming the aultiples of the multiplicsnd in the beginning of the operation). This
comment also pertains to the methods discussed in section 0.3.

4.3. Use of Negative Partial Products

This method is usually applied in combination with the preceding. Discussed below
are two alternatives for using subtraction when multiplying. In both cases. each
partial product corresponds to multiplication of the nultiplicand by a group of q
digits of the multiplier. The nain difference is that with the first alternative,
decoding may begin at either end of the multiplier, while in the second, multiplica-
tion is done from the low-order digits of the multiplier. There are other
differences too.

4.3.1. Method of Multiplication by a Group of q Digits of the Multiplier with
Decoding of q + l Digits of the Multiplier

When this method of speeding up multiplication is used, the next group of q digits
of the multiplier is decoded together with the high-order digit of the adjacent low-
order group, which is considered an additional low-order digit. All digits of the
group, except the high-order and additional, are assigned the same natural weights
as in the method described in section 4.2. The high-order digit of the group is

assigned the weight - 2‘“, and the additional digit the weight 1:
0+1 digits
X X X - - . X XoX

—-2'" 2'" 2'" 2' 2' 2'

-

 

Thus, the high-order digit of each group is decoded twice: once as the high-order
digit of this group, and again as the additional digit of the adjacent high-order
group.

The high-order digit of the highest-order group and the additional low-order digit
of the lowest-order grOup must always be zeroes. Therefore, there must be
satisfied the double inequality

(m—l)¢<n<mo—I,

the boundaries of which are explained the following way (each lower arc indicates
the simultaneously decoded digits):

FOR OFFICIAL USE ONLY
FOR OFFICIAL US! ONLY

I 2 3 In
a...o x x...xxx...XXX...X®
3 m

1 2

The number of groups of digits of. the multiplier (author of partial products) with
this nethod is equal to

ﬂ=].—+l-

The sun of the weights of the nonzero digits of the group determines the factor K
in the nultiple Kc selected as the next partial product. The value of K in the
process assures one of the values

0.1L :2. t3, .. .. 32"“.

i.e. the amber of nulti‘ples is increased by one in colparison to the preceding
nethod, hut in return the amber of additional sdders for forming the multiples of

the nultiplicsnd is reduced to 211-2- 1

The decoding rules are illustrated by tahle 4.3.1 (q . 3).

Table 10.3.1»

 

Key:
1. Digits of group

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

4.3.2 Method of Multiplication tron Low-Order Digits of the liultiplier

In decoding the next group of digits of the multiplier by this nethod. an analysis
is node of q next digits and one binary digit of the "carry" from the preceding
(adjacent low-order) group into the given one. Let us designate this digit by the
letter e. The weights assigned to the individual digits in the process have the
following values: . _. ..

4 digits

X X X... X c
twee-Izh- 2-2-20

In other words, the digits of the sultiplier have natural weights, and the weight
of the digit e is equal to one. The factor X in the Iultipls of the mltiplicand
KC, used as the nact partial product, is selected fro- the 2‘1 values

0. :I. :2, is. . . .. :: (”d—l). 2!"
in such a way that there is produced the relationship

where e' is the digit, selected ainultaneously with K, of the "carry" into the nest
(adjacent high-order) group of digits of the nultiplier (e' - 0 or e' - 1), and s is
the sun of the weights of the nonzero digits of the decoded group of digits of the
multiplier together with the weight of the nonzero digit a. The nullber of addi-
tional adders for forming the nultiples of the mltiplicand in the process, as in
the preceding method, is equal to 2q-Z_ 1.

One of the possible rules for decoding one group of digits of the nultiplier for
the case of q - 3 is shown in table 6.3.2.

Another alternative for decoding for the case of q - 3 was offered in work [2]
(see table 4.3.3).

Table 4.3.2

 

FOR OFFICIAL USE ONLY
POR OFFICIAL USE ONLY

Table (0.3.30

 

  
  

-G-°°°°

As can be seen, the number of multiples used in both cases is 8, but the multiple

6C emerges in place of the eultiple -ZC. Other versions of decoding rules can be
suggested too.

Amang the possible alternatives, a certain advantage is possessed by those in vhich
e' - 0 is produced when the high-order digit of the group being decoded equals zero.
Such, in particular, are both versions shown in tables 6.3.2 and 6.3.3. In the pro-
cess, when the groups are formed in a way such that there is always a zero on the
left in the high-order group, it is thereby possible to avoid a carry fro. this
group, i.e. avoid the necessity of forming yet another partial product. Therefore,
the parameters n, n and q must be associated by the relationship

(m—|)c<n<mc—l.

The right and left boundaries of the inequality correspond to the following ver-
siona of subdividing the multiplier into groups of digits:

”AAA

3 x...xx'...xx...><...x...x

VYY Y

OAK/k A
...0X...)(X... ".5 n 5

As in the preceding sethod, the number of groups of digits of the multiplier (num-
ber of partial products) is equal to

ma: n:l[.

 

10

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 6.3.4.

Characteristics of method

Number of multiplicamd
multiples required

Number of additional
adders required

Relationship between
n. m and q

 

Shown in table 4.3.6 is a comparison of the methods just discussed for speeding up
multiplication, in the use of which the multiplicand is multiplied at once by a
group consisting of q digits of the multiplier. The numbers I. II and III desig-
nate: I - the method using only positive multiples of the multiplicand (section
4.2); II and III - the methods using not only positive, but also negative
multiples (sections 4.3.] and 6.3.2 respectively).

To illustrate these methods, let us show how multiplication of some multiplicand c
by multiplier A, equal to 0.101100011 (n ' 9). is performed by all three methods
when q - 3.

In the first case, subdivision into groups and decoding would be such:

0. louooon
‘1‘?”1'

and the multiplicatioa would actually be performed in three cycles the following
way: ;
CA-W'chducz-z

In the second case, the subdivision might be such:

goﬁgo/rooqitg

CA’-ac2--—4c2-'-2c2-'+Icr.

and there would be four cycles:

In the third case, let us subdivide the multiplier the following way:

om. IOIIMII
‘r’ :77

and there would again be four cycles
CA -3€2-'+4€2-‘—3C2-'+IC2‘.

11

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In comparing the merits and shortcosings of all three methods. it should be noted
that

with n, a multiple of q, multiplication by setth II and III requires execution of
one more cycle than is the case in using method I;

to implement methods II and III. substantially fewer additional adders are required
than that for implementation of method I;

the number of multiplicand multiples for methods I and III is one less than for
method II; and

in contrast to method III. methods I and II are suitable for application in array
multipliers (see section 4.4), since all groups of digits of the nultiplier can be
decoded simultaneously when they are used.

Thus, each of the three methods has certain advantages that favorably distinguish
it compared to at least one of the other two methods.

As another illustration of this group of methods. let us consider a possible hard-
ware implementation for: multiplication uith the parameters n - 8 and q - 3 which
implements method III (fig. 4.3.1). Version "a" of the circuit for non-fast

 

Pig. 4.3.1.
Key:
1. Sm3c -- adder 3c 5. Rg-SdA - register-ahifter A
2. Rgc - register C 6. Dab — decoder
3 . Km -- switch 7. T - f lip-flop

lo. Sm-Rg-Sd - adder-register-shiftet

multiplication was chosen as the “prototype“ of the device (see fig. 7.7.1, a, page
337 [not reproduced]). In our case (fig. 4.3.1), the first cycle of multiplication
begins with the decoding of the three low-order digits of the multiplier A located
in the register-shifter. If among these three digits there is at least one "one,"
then the decoder Dsh produces one of seven control signals +1, -1, +2, -2, +3, -3
or +4 (the nunber of signals is indicated in the corresponding positions in fig.
10.3.1 in brackets) and the carry signal a' (the signal a in the first cycle equals
zero). The control signal generated passes through the switch Km into the 10-digit
accumulating adder-shif ter as the first partial product the corresponding multiple
of the multiplicand c from the register Rgc or the adder $36. vhich even before
the start of the first cycle calculates and stores the lo-digit triple multiple 3c
(let us number the digits of this number froa l to 10). If, for example, the three

12
P03 OFFICIAL USE ONLY

low-order digits of the multiplier equal
101, then the signal e' - l is generated
and stored in flip-flop T and there is

generated the central signal -3 which “-2.
passes through the switch Km the number

  
 

1".
3c in inverted code (one of the 10 digits ‘ t
of the switch is shown in fig. 6.3.2). 9'
The partial product is added to the con- 3‘"

To the i digit of the
adder
(1 - 1, 2’ ass. 10)

tents of the adder (when the first cycle “(a
is executed, the contents equal zero) and in
the sun is stored. At the end of the . a
cycle, there is a shift right three posi-

tions in the adder and in the register

for the multiplier. In the process, the

three low-order digits of the product 3180 ‘03-:-

move from the adder into the freed high-

order positions of the register for the
-multiplier. The second and third cycles are executed similarly, but there are no
shifts at the end of the third cycle. The cyclic carry circuit so is used in the

adder during addition. Among the other details, one could note that the circuit in
fig. 4.3.2 changes slightly for the extreme digits of the switch, since it is
necessary to consider that c1 - 0 when i - 9 or 10; ci-l- 0 when i - l or 10; and
c1_2- 0 when i - l or 2.

4.6. Analysis and Technique of Building Simultaneous Hultipliers
4.14.1. Classification of Simultaneous Multipliers

It was already mentioned at the beginning of this chapter that the nodern computer
spends a considerable portion of its time an performing multiplication. In a num-
ber of developments of new machines, the arithetic unit is being freed from many
trivial operatiOns, which leads to an increase in the percentage of time spent on
multiplication and division. The arithaetic unit of such a machine spends about
half of its time on these two operations. Nevertheless, the capacity of the appara-
tus in the machine for these operations is rarely great. In major computing systems
and digital computers, the situation often occurs in which to improve the overall
economic indicators of the systee with large storage and high-level peripherals and
control, it is advantageous to increase the outlays for multiplication and division
even higher than the level in which the outlay incraaent yields an equal increment
in the speed of multiplication and division. Simultaneous multipliers (00) are
among the means of this type of speeding up. '

The main feature of sinultaneous multipliers is that execution of multiplication in
them is a unified, continuous, complesr, transient process of simultaneous addition
of all partial products, which is not divided into caller time intervals by clock
signals as is done in multipliers of any other type.

Assume that it is necessary to form the final Zn-digit product of two n-digit fac-
tors and that additional multiples of the multiplicand are not used in the multi-
plier (use of these multiples was covered in sections 4.2 and M3). Then the total

13

FOR OFFICIAL USE ONLY
FOR 0F?ICIAL USE ONLY

number of digits in all addends (partial products) equals n2. we shall see later
that with the variation of the value of n. the quantity of apparatus in a simul-
taneous multiplier of a given type varies approximately in proportion to n2. There-
fore, the application of simultaneous multipliers has been called in uork [3] the
method of the second order of speeding up multiplication.

It has been suggested [4] that the classification of simultaneous multipliers be
based on dividing them into array simultaneous multipliers and compound simultan-
eous multipliers (fig. 6.6.1). Array simultaneous multipliers [4-29] contain
abOut n2 elements of the same type (for example, one-digit binary adders). connect-
ed to each other by a given method, which add up all the partial products. If
additional multiples of the multiplicand (see sections 6.2 and 4.3) are used, the
number of adding elements is reduced accordingly and a decoder for the multiplier
and assembly for forming the necessary multiples of the multiplicand are incorpor-
ated into the device.

Simultaneous array multipliers may in turn be divided into homogeneous and hetero-
geneous. Simultaneous homogeneous array multipliers belong to the class of devices
often called iterative arrays and are a set of identical elements that form regu-
lar network. Because of the homogeneity of the structure and adherence to the
principle of “shorter-range interaction” of the elements. the application of these
devices is very promising in high-throughput large and medium-size computers,
developed on the base of the modern technology of manufacture of integrated cir-
cuits. A large number of iterative arrays has now been developed that are multi-
plying, dividing [22-24, 31'34], adding and other calculating assemblies; among the
latter can be noted circuits for calculating the square root [34-36], for multiply-
ing and dividing a binary number by a constant [37]. for squaring [38]. for convert-
ing a number from the binary system to the decimal [37]. etc. Homogeneous array
simultaneous multipliers [1, 0-16, 22-26] also contain elements of the same type
connected in a regular way. Heterogeneous array simultaneous multipliers [1, h,
13-21] lack this regularity.

 

P180 4.4.1.

Key:

1. Simultaneous onltipliers 6. Simultaneous multipliers using array

2. Array simultaneous multipliers simultaneous multipliers

3. Compound simultaneous multipliers 7. Simultaneous multipliers using read-

4. Heterogeneous array simultaneOus only memory
multipliers 8. Multilayer array simultaneous multipliers

5- Homogeneous array 81m01t0ﬂ8003 9. Simultaneous multipliers using
multipliers (iterative arrays) tabular type multipliers

1L
FOR OFFICIAL USE ONLY

A large group of heterogeneous array simultaneous multipliers is made up of the
so-called multilayer structures [1, 4, 13-21] that are distinguished by the short
time needed to form the two-digit code of the product (see section 6.6.4).

Compound simultaneous multipliers are synthesized from simultaneous multipliers
with smaller digit length: array [4, 27], tabular or are small read-only memory
devices [25. 26] that calculate the products of the separate parts of the multipli-
cand and the multiplier. The interconnections between the "elementary" simultane-
ous multipliers in the compound simultaneous multiplier can he made by one or
another method and, in particular, as the single-digit adders are connected in the
homogeneOus or multilayer simultaneous multipliers; the simultaneous multipliers
thus obtained can be called macro-homogeneous. macro-multilayer, etc.

snnultaneous multipliers are now ever more often finding application in the arith-
metic units of digital machines. In a umber of cases, the sure array unit is used
not only for multiplication, but also division [22-25]. As large computing systems
are developed in which the proportion of the arithmetic unit is not large compared
to the rest of the apparatus, the application of simultaneous multipliers will pro-
bably increase. Also used in many cases are non-full arrays that simultaneously
add several, but not all, partial products [27. 39. #0]. These devices were
discussed earlier (section b.l).

Simultaneous multipliers can be built, generally speaking, from variOus elementary
cells. Simultaneous multipliers in which the main type cell is a single-digit
binary adder with potential elements have become widespread. In what follows, we
will have in mind the simultaneous multipliers containing such adders.

A large number of circuits for single-digit adders are now well known. In the sub-
sequent points in this chapter. it will be shown that the speed of the entire
simultaneous multiplier may essentially depend on the choice of circuit for the
one-digit adder. Therefore, it is advisable to consider the possible structures

of an adder from the viewpoint of their effect on the properties of the simultane-
ous multiplier.

In arithmetic units not using array circuits, signal delay time in carry circuits
of one-digit adders has a far greater effect on device speed than delay time in
adding circuits. In devices using array adders, the total time for the multiplica-
tion operation (and other operations in the performance of which the array takes
part) essentially depends also 0n the speed of the adding circuits of the one-digit
adders. For this work, it is convenient to introduce in the discussion the ratio
of maximal delay time in an adding circuit to the maximal delay time in the carry
circuit of the one-digit adder.

Some circuits of one-digit, coincidence-type adders are shown in fig. 6.6.2. One
can see from an examination of them that the maximal delay in the carry circuit
tang, generally speaking, is not equal to the maximal delay in the adding circuit

8' where k is

some constant. However, for the majority of practical applications, we can limit
the examination to two basic cases: k - l or k - 2. In the first of these, we
will call the adder "simultaneous," and in the second case-"two-cycle."

tauadd' It can be assumed that in the general case, tauadd - k tau

15

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

0 i l .

C t

5 : I§i§[i]-l : r I
t i c

I f C I

I i

s: is g :5 a :f a

it ‘5 I: I: _
E: "55 D a“! l "5 ll °'
:0 a? E g‘ I 5‘ l

   

0

Fig. 4.4.2. One-digit, coincidence-type adder circuits

Key:
3 - carry circuit On * Sn - add circuit

Let us call the tau delay a "tine step" and assune that it is identical for all
adders (in this casE, the tern "tine step“ [takt] has no relation to the phrase
"simultaneous multipliers" [odnotaktnyye unnozhitelil). The value k - l, as a
rule, pertains to the adders (fig. 4.6.2, a-d) in which the add and carry signals
are generated independently of each other, although the input part of these two
circuits nay he cannon (fig. 4.6.2. d). Such adders require parsphase input sig-
nals, and consequently, if we want to use then in an array, then the outputs of
these adders must also be paraphase. The case k - 2 pertains to adders in which
the add signal is generated by using the carry signal (fig. 4.4.2, e and f). Such
adders do not require paraphase input signals and are therefore, as a rule, more
economical. The carry signal code in these circuits is inverse to the code of the
addends, while in circuit 4.6.2, e, the add signal is also.inverse in relation to
the inputs. The circuit for a binary, one-digit adder has the so-called property
of self-duality which means the inversion of all input signals leads to inversion
of output signals. This property is reflected in fig. 6.4.2, e and f, by the
superscripts in parentheses and Hill be used from here on.
FOR OFFICIAL USE ONLY

Te ..

 

' I}... call-Yea

I
I

l
I
as

'33
i

5';

E
1.

ﬂag a.
§§§§§§ﬁh

 

‘ Pisr {4.3

The main merits of simultaneous multipliers are high speed. simplicty of control
circuits and ease of adjustment and finding defects. The progress of microelec-
tronics and. in particular, the evolution of L51 circuit technology has permitted
countering the main shortcoming of these devices-large amount of apparatus. The
experience of the evolution of Soviet and foreign computer technology in recent
years shows that the use of simultaneous multipliers is becoming an important
means for raising the throughput of computing resources.

4.4.2. Analysis of Processes of Adding Partial Products in HomogeneOus Simultan-
eous Array Multipliers

For types of circuits for lZ-array simultaneous multipliers are shown in simplified
form in fig. b.6.3. Bach small dot in the figure represents a one-digit. binary
adder; the add signals are directed from the top downwards; the carry signals are
directed from right to left, from right upwards to left and from right downwards to
the left. A common principle of structure has been kept in each of these circuits:
the adders pertaining to one digit form a vertical chain and the connections
between adjacent positions have a regular nature. thus, the structures shown are
iterative arrays.

Often combined to reduce the quantity of apparatus are the application of the
method for speeding up multiplication that is being investigated and the method for

17

FOR OFPYCIAL USE ONLY
FOR OFFICIAL USE ONLY

speeding it up. described earlier, that conaiata in decoding groups containing

q digits of the multiplier each, and in using preliminarily computed multiples of
the multiplicand. Therefore, in fig. 4.6.3 for each of the four types of arrays
are shown three circuits corresponding to the versions of multiplication in which
each partial product is obtained through multiplication of the multiplicand by

q digits of the multiplier (q - l. 2 or 3). In doing so, it is assumed that when
q - 2, the multiples o. 16, 2c and 3c are used (i.e. there is an additional adder
to calculate the triple multiplicand in the arithmetic unit). but when q - 3. the
multiples 0, 10, 20, 30. 4C. SC. 66 and 7C are used (i.e. there are adders to com-
pute the values of 30. 5c and 76). when q - 2 or q - 3. other multiples could he
used too: For example. in multiplying by two digits, one could use the multiples
0, 1C, ZC, -1C and ~2C. and in multiplying by three digits-the multiples 0. 1c,
2C, 30, AC. -lC. -2C. -3C and -4C. In the process. the number of additional
adders is reduced, but there emerges the apparatus necessary for input of the
negative partial products. But basically the structure of the array and its
properties are preserved.

n.‘. Digits

I 2 J O ...l~2 0-] I no! [08 humanize-saris:
I M H I! II I! H

 

   

P130 4.4.4

The array multipliers in fig. 4.k.3 were presented. as noted, in a somewhat simpli-
fied form-not shown in particular are the circuits that form the partial products;
also not shown are the inputs thrOugh which the partial products go in; both the
adders and the half-adders are depicted in identical fashion, etc. The nature of
the simplifications can be seen by comparing the type III circuit shown in the
first column in fig. 6.6.3 with the same circuit shown in more detail in fig. 6.4.4.
In the device shown in fig. 4.4.6. n partial products with n digits in each are
added together. The numbers of the partial products are entered near the arrows
indicating the position of input of the individual digits of the partial products.

The one-digit adders and half-adders are shown as squares.

The circuits in the second and third columns in fig. 6.6.3 are shown for n, a multi-
ple to two and three, respectively. If this canditiOn is not met, then the number
of levels of the adders turns out equal, respectively, to the values n/Z-l and

n/3-l rounded to the next larger integer. The structure of the device and its
properties in the process are essentially unchanged.

18
FOR 0P?ICIAL 053 OIL!

The assembly for forning the partial products is not shown in either fig. 6.6.3 or
fig. 6.6.6. In the simplest case (q - 1), this ass-bly contains a2 two-input All!)
circuits that form n2 signals aicj (i - l, 2, ..., n; j - l. 2, ..., n) where aicj

are the digits of the cofactors. The signals generated (simultaneously) are binary
numbers which are in the digits of the partial prOducts (n products for 11 digits).
Arranged under one another in accordance with the weights of the digits, these
partial products form an array almost coincident in form with the arrays in fig.
6.6.3 in column q s 1. Now each dot represents one digit of one partial product.
(One can say that with that in the figure there is not shown only the low-order
partial product in the digit positions fro. (n + 1) through 2n inclusive.) For the
simultaneous multiplier to "start working," there retains only the superimposition
of the array of partial products on the array of adders, i.e. the connection of the
Outputs of the AND circuits with the corresponding free inputs of the adders. In
the process, it is evident that the digits in one column of the array of numbers
can be fed to the inputs of the corresponding column of adders in any order, i.e
the digits in the column can change positions.

If q is greater than 1, the number of partial products is reduced q-fold (when n is
a multiple of q), and each of then is lengthened from n to n + q digits. when q is
equal to 2 or 3. the simultaneous multiplier assmas the form shown in the corres-
ponding position in fig. 6.6.3. An example of a complete type II simultaneous
multiplying circuit (it can also be considered a type IV circuit) for the case

n - 6 and q - 2 is shown in fig. 6.6.5, in which besides the array of adders itself,
also shown are the additional adder to generate the triple multiplicand, and the
circuits for forming the partial products. The blank rectangles in this figure
represent one'digit adders and halfqadders. A type 1 device (11 - 2) is described
in work [1] , page 651. There too are complete simultaneous multiplying circuits of
type I. q = 1 (page 638); tame 111. q - 1 (pose 665): type IV. 6 - 1 (page 668) and
others.

It can be seen from figs. 6.6s3 - 6.6.5 that a final 2n-position product is formed
at the outputs of the simultaneous multiplier. '

Not shown in these figures are the additiona1 inverters needed to "phase" the sig-
nals when using the adders shown in fig. 6.6.2, e and f, since in arrays of this
type there may be encountered not only normal, but also inverted signals.

Let us discuss the conditions under which such a necessity occurs. For this. let
us note first of all that any of the structures shown in fig. 6.6.3 may be divided
into parts, each of which consists of three or four one-digit adders connected to
each other "in a ring" (fig. 6.6.6). Let us first discuss a ring of four dddera.
It is easy to be persuaded that, as shown in fig. 6.6.6, a and b, the two upper
adders of this ring sust be built with the same circuit conforming to either fig.
6.6.2, e, or fig. 6.6.2, f (for simplicity, the adders in fig. 6.6.6 have been
designated with the letters e or f), and each of the two lower adders may be built
with either of these two circuits. Thus, such a ring may be built with adders of
either type e, or type f, or with both.

However, a ring of three adders may be built without additional inverters only if
type f (see fig. 6.6.6, c) circuits are available to the developer. But if only
type ‘e adders a9e on hand, at? additional inverter (fig. 6.6.6, 51) must be installed

19

FOR OFFICIAL USE ONLY
é.‘ §§~9|£

‘85:"..‘9

FOR OFFICIAL USE ONLY

om; ' I
'nb ’E ‘:h
an 1i :t:
at
«k ’E
1/: vi
.m
U? .E
#ﬁﬁ :i
#1 an

 

Fig. 4.4.5. Example of complete type II simultaneous multiplying circuit for the
case n - 6 and q - 2.

in the ring for "phasing." In the figure. this inverter is included in the add
circuit, but obviously instead of this, it can be included in either of the two

carry circuits forming a "triangle" together with the indicated add signal.

It should be noted that the consideration relative to the impossibility of building
an array with type c adders without using additiona1 inverters pertains not only to
the structures shown in fig. 4.4.3. but also to any array in the circuit of which
there can be singled out at least one closed circuit. formed by one-digit adders
and the add and carry signals that connect them, in which the number of adders
would be odd. It is also evident that such circuits exist practically in any
array. However, their number is different in different types of arrays. It can be
deduced from fig. 4.4.3 that type I and III arrays contain the minimal nulber of
such circuits (”triangles"). For the case of q - 2. this number equals (n - 4)/2,
and for arrays 11 and IV-respective1y. (3n~6)/2 and (Sn-20)/2; when q - 3, arrays
I and III contain (n-6)/3 "triangles" each compared to (5n-18)/7 and (7n-36)/3

for arrays 11 and IV. when q - l. arrays I, II. III and IV contain, respectively.
n - 2, n - 1, n - 2 and 3n - 8 "triangles."

20

FOR OFFICIAL USE ONLY
FOR OFYICZAL USE ONLY

It is evident that the additive inverters must be installed in such a way that the
"phasing“ of the signals in the adjacent circuits is not disrupted and wherever pos-
sible, the speed of the array is not reduced. Direct analysis shows that the first
of these two requirements can easily be met for all the circuits shown in fig. 5.6.3
by having the number of additive inverters equal the number of ”triangles." How—
ever, it will be shown later that to meet the second requirement. the number of
additive inverters may have to be increased.

Let us move on to an analysis of the pro-
cesses for determining the solution in
homogeneOus array simultaneous multi-
pliers [9].

It was mentioned earlier that summing the
partial products in a simultaneous multi-
plier in the general case is a complex
transient process. During the flow of
this process, the signal at some point in
the device may be switched several times
from one level to another before the
final, correct value is obtained. The
presence of intersecting flows of signals Fig. ‘45

limits the possibility for additional

speeding up. In some arithmetic units,

we also have to reckon with the fact that _

besides the loss of time on the transient process that occurs after the feeding of
the partial products, there are also losses of time on decay of the processes in
the array after all input signals are removed. The decay time is less than the
addition time, but it also can be. as will be shown in section 6.5.3. rather long.

 

The time for performing multiplication in an array multiplier depends on the array
circuit, the parameters of the elements used and on the values of the cofactora.
There are at present no simple methods for precisely estimating the maximal operat-
ing time in the various simultaneous multipliers. Therefore, we will estimate the
speed of arrays "from above," assuming the transient process flows the "worst" way.
The speeds of the arrays shown in fig. 6.4.3 may be compared by a technique based
on the following two assumptions.

1) Let us assume that all the partial products are fed into the array simultaneous-
ly at a moment in time t - 0. (In reality, this condition is not met due to
scattering of the parameters of the elements of the preceding assemblies, delays of
signals in the conductors, etc. Also, for arrays using additional multiples of the
nultiplicand that are generated by additional adders, this condition cannot be met
since the very generation of multiples takes some time and the low-order digits of
the multiples emerge before thehigh-order ones. In an actual device, it is advis-
able to make these additional adders fast, but only to the extent that the full

time of operation of the arrays depends only on its structure, but not on the
additional adders.) .

2) Let us also assume that from each one-digit "two-clockspsriod“ (simultaneous)
adder, the correct carry signal is anitted in a "clock period," and the sum signal
within two "clock periods" (within one ”clock period") after all three terms are
fed to the inputs of the adder.

21

FOR OFFICIAL USE ONLY
FOR OFVICIAL U83 ONLY

By this technique, one can build 24 timing diagrams corresponding to 12 structures
of arrays shown in fig. 4.4.3 and to 2 values of magnitude k (k . l or k . 2).
General expressions for the coordinates of the characteristic points of these dia-
grams were derived on the basis of the diagrams.

Five of these diagrams are shown in figs. 6.5.7 - 4.4.11. The dots indicate the
moments of establishment of correct signals at outputs of sums of all adders of the
arrays., For clarity, diagrams corresponding to specific values of n are shown; how-
ever. the exact formulas given in the figures for the coordinates of the character-
istic points of the diagrams correspond to any value of n (however, with the
restriction that n is considered a multiple of q).

The diagrams obtained correspond
to the hypothetical "worst”
transient process, from the
viewpoint of speed, and make it
possible to estimate "from the
top" the actual processes
occurring in homogeneous array
simultaneous multipliers.

m Digits

O
0
so
as

"° rile-4,1

0..
O...
0".
.0...
.0000
.00...
......
0......

Thus, it can be seen from fig.
5.10.10 that sees...

l) the carry is propagated "'
"slowly" along each level until
the (n + l)-th bit (the passage
of the carries is delayed by
the sum signals coming in from
above). after which the passage
continues "quickly";

2) the full time of operation
of this array is 3n — 3 "clock 313.4.”
pyriods";

3) after 2n - 3 "clock periods,"
the transient process decays

in the entire circuit, with the
exception of the adders located
at the 2 ... n digits along the
lower edge. This leans that
having built the circuit for

fast passage of carries along

the indicated adders, one can
reduce the full time of operation
of the device from the magnitude
3n - 3 to the magnitude of the
order 2n - 2 "clock periods."
Building fast circuits in other 1’18. 4.4; "a; 4.4.9
places of the array to further

reduce the full time would

require hardware investments

      

COOﬂﬁﬁﬂi

1.02.1010"!

22
FOR OFFICIAL USE ONLY

that are too great. It can be seen
from the figure that t - 2n - 3 is

the time for forming the two-row code M Digits

of the product, i.e. the time for ' /.,3 my,“ a.
forming the two numbers whose 8|.- is .~. s-h .’
the product sought. ‘ 3 .0. s... 330-1.!
All 21. timing diagrams are consoli- s .'.'.°.'.'.°. .°

dated in the table shown in fig. 2...: .‘.'.°,°,°,',°,°. ,°

6.4.12. Some simplifications were u (.'.°.'.‘.°.'.'.°.'.'. .‘

made to pick out the main features I 1 1 t z : ; ; : : I '

of the diagrams: sections of the ,1 : : : : : 3 z ; : ' (gr-gnu
diagrams that correspond to the pro- : : 2 : g : _; °

cess of establishing the signals in ” 1 3 1 2 3 '

the main sass of th adders are shovn ; ; g s

in the form of circuits; the pro-
cesses of carry passage along the
lower edge of the array are repre- .
sented by a separate line. On the IP13. mo
coordinate axes are shown (with a

precision to several "clock periods"

and bits) the coordinates (time and W181“
number of bit) of the characteristic points of the cir-
cuit (it is assumed the coordinates of the characteris-
tic points are indicated for n —)°° ) and the full
array operating time ‘1‘ is indicated precisely.

 

  
   
   
  

 
  

u§§§§§§§f§

Examination of these timing diagraas allows making
the following conclusions on the properties and
features of the homogeneous array simultaneous mlti-
pliers in question.

3 3:33:33:
83:33::

8
0
0
e0

1) Changing the array structure type, the type of one- ”3’
digit adder or the parameter q may considerably change 0 0 I 2 s a to a a
the timing diagram. ’18. u."

2) In a number of cases, passage of the carries can be

apeeded up along the entire lower edge of the array

(for example, in circuits II and IV when q - 3), and in other cases, this can be
done only in the high-order n digits (in arrays 11, Ill and IVvhen q - l); and
finally, it is practically iapossible to organise any speeding up for structure I.

3) Under otherwise equal conditions, type I arrays are slower than any others. It
is practically impossible to speed up type I arrays since passages at all levels
would have to be speeded up for this.

These diagrams allow selecting the optimal variant of a homogeneous array multiplier
and the circuit for a one-digit adder. However, in the process a umber of other
circumstances must also be considered; these can not be analysed in general form
because of the large nuaber of possible situations. The basic circumstances are the
following:

23

I08 OFFICIAL USE ONLY
FOR OFFICIAL US! ONLY

 

26
FOR OFFICIAL USE ONLY

1) System of elements used. The type, speed, reliability. load capacity, dimensions,
cost of various elements available to the designer, and the very fact of availability
or lack of a particular element may affect the choice of an array circuit.

2) Standardization of building blocks, e.g. L81 circuits into which the array and
the entire arithmetic unit are "subdivided."

3) The necessity in certain cases of incorporating additional inverters for "phasing"
of signals into the array circuit.

4) Use of the array during other operations. This may be especially important. If,
for example, nonrestoring division has to be performed in the array, type I and II
arrays cannot be used since they do not provide the capability of shifting the next
remainder. A type III or IV array can be used to implement this method of division.
The first of these is best suited when the next remainder has to be obtained in a
one-row code, and the second-if the remainder is formed in a two-row code. If
division is to be implemented by using one of the methods using multiplication (sec-
tion 5.3), then generally speaking, any type of array is suitable.

These timing diagrams of homogeneous array simultaneous multipliers make it possible
to select positions for installing additional inverters (needed for "phasing" sig-
nals when type e One-bit adders are used) so that the speed of the array is not
changed. A comparison of the circuits and diagrams allows concluding that in all
circuits except three (II, q - 2; III, q - 2 or 3), one can install inverters in a
way such that their quantity equals the quantity of "triangular" circuits and in the
process, the delays introduced by the inverters are not reflected in the value of T.
In the three cases mentioned, the additional inverters should be installed as shown
in simplified form by the X's in fig. b.h.13. In doing so, the quantity of inverters
must exceed the number of "triangles" (see table 6.6.1) so that the inverters are
not located in "critical" paths of signal propagation.

It can be seen from table 6.5.1 and the timing diagrams

in particular that when q - 2 and type e adders are

used, array III, with the same speed as arrays II and m
IV, and better speed than circuit I, contains consider-

ably fewer additional inverters. Type III arrays were
first described, apparently, in work [10].

tea:

a 1-2

b.4.3. Analysis of "Decay" Processes in Homogeneous
Array Simultaneous Multipliers

If another—simpler and quickerm-operation (addition, I,“

for example) is performed in an array after multipli- -

cation, and if in the process the pause between the F18. 4A4:

end of the multiplication and the beginning of the

next operation is less than the signal "decay" time

in the array, which occurs after setting all input

signals in the array to the zero state, then the

decay time must be taken into account when calculating the time for performance of
the next operation. When necessary, hardware means for protection form this effect

have to be used. For example, using a special signal, one can "disconnect" the out-
puts of the upper levels of the array from the lower level, in which an addition-

subtraction operation can be performed.

25

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 6.4.1.

 

   
       

 

Number of
Type of '"Triangular"' Nuuber of
Array Circuits Additional'InVerters
I. (-1 n—2 n—2 . _ __ _
n-4 n—4 s _'
'- "2 2 "T— €$“F
-G n—B Lgd
l. 4-3 "—3—— ’5- ‘ n.”
n. o==l n—I n—I ’ “I:
ﬁlo—6 7n—l8 I:
II. 0-2 T ["_4— 11 (mg?
sn-Ia 6mg :1 :Egés
n. 1-3 "i- ‘1 a mag:
m. .-| n-2 n—2 gggiiz
n—4 3s—I2 " $333539
In. q-z "f" [mi—"l u 53%!"
n-« 2n_--.|2_2 u_ )- n :3.
"L q-3 "5’ '"5 (17 [77 ) I 0 ‘v a s‘u 9 av:
w. .-| an—s 3n—8 ; -- 4.4M
San—20 sin—20 n6"
IV. q-2 -----—- 7—9—
1 —-36' 7 -—36
IV. gas —"3-—- '3

Therefore, the study of the decay processes in array simultaneous multipliers, Just

as the of the processes of establishing the solution, has definite value. The prob-
I-m of analysis of the processes of decay, apparently, was stated for the first tine
in work [41]. '

Decay processes may be examined by a technique based on the following assusptions.
1) All partial products become equal to zero sinultaneously at the assent t - 0.

2) From each one-digit binary adder, the correct carry signal (zero) is emitted
within the "clock period" after two correct (i.e. zero) signals of the terns are
fed to the input, and the sun signal (also zero) is generated with the "clock peri-
od" after all three (zero) terms are fed.

These rules are conmon to "simultaneous" and "two-clock-period" adders. The validi-
ty of this statement follows from an examination of the circuits shown in fig. 6.4.2.

Following this technique, timing diagrams were built for all the arrays shown in
fig. 4.4.3, and precise formulas for the coordinates of the characteristic points of
these diagrams were derived [41]. One of the 12 diagrams is shown in fig. 4.b.14.

It corresponds to the specific value of n . 19, but the fornulss are valid for any
n greater than 1.

26
FOR OFFICIAL USE ONLY

These diagrams are consolidated in simpli-
fied form in fig. 4.4.15 in a general
table. as was done earlier for the proces-
ses of establishing the solution. Indica-
ted in the figure are the precise values
of the full decay time ‘1‘z and the approxi-

mated values of the coordinates of the
characteristic points (as above, the pre-
cise formulas are replaced by approximated
only for clarity).

It can be seen from an examination of the
timing diagrams that decay occurs slower
in type I arrays than in the other three
types. when q . l, arrays II-IV have
practically identical rate of decay, but
when q - 2 or_3, decay occurs somewhat
faster in arrays 11 and IV than in the
type III array. It is also evident that
the decay process cannot practically be

speeded up.

The diagrams of decay. just as the dia-
grams for establishing the solution, can
be used to select a type of homogeneous
array and a one-digit adder circuit. They
make it possible to select the necessary
measures of protection in those cases when
presence of decay leads to reduction in
speed of the arithmetic unit.

It should be noted that the time of one
"clock period," adopted in this chapter
as the unit of measurement of time, al-
though it was defined as the maximal time
of delay of the corresponding element. in reality can be equated to the value, only
somewhat exceeding the average time of operation of this element. This is explained
by the fact that in the long chain of serially connected elements, the probability
of large deviation of total delay from the value equal to the sum of the average
delays is very insignificant. This feature of "single-pass“ (simultaneous, noncyc-
lie) arithmetic and other devices in general and of adder arrays in particular pro-
vides for, in essence, additional speeding up of their operation and raising of
reliability [1, pp 442-443].

 

4.4.4. Multilayer Simultaneous Array Multipliers

-l°. Let us call multilayer that array simultaneous multiplier, built with one-digit
binary adders and half-adders, in which there is at least one one-digit adder or
half-adder, into the inputs of which are fed the output signals of the sum of two or
three other one-digit adders. In other words. in a multilayer array simultaneous
multiplier, the one~digit adders pertaining to a given position of a device, are not

27

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

stretched out in a chain, as is done, in particular. in the homogeneous structures
discussed in sections h.6.l-4.4.3. but form a certain ramified "tree."

One could suggest quite a few structures of simultaneous multipliers that fit this
definition. we shall discuss just some of the most well known structures.

Let us analyze some general properties possessed by the majority of multilayer
structures discussed in this book [66].

Let us assume that a simultaneous multiplier consists of a series of serially con-
nected layers: the output signals of an i-th layer are the input signals to an
(i + l)-th layer (1 - l, 2, ...). The “i-l numbers go from the preceding. (i - 1)-th

layer to the inputs of each i-th layer. The apparatus of the i-th layer processes
(adds) by certain rules conmon to each layer these numbers and generates n1 other

numbers that go to the next (1 + l)-th layer. The sum of the numbers present at
the inputs or outputs of any layer equals the same value-the product of the initial
cofactors A and C.

We shall see subsequently that in many multilayer simultaneous multipliers known and
discussed below, the function n1 - f(n1_1) satisfies the following five conditions.

Condition 1. For any positive integer “1-1 there is a corresponding unique positive

integer n1, i.e. the function n - f(n1_1) is single-valued.

1
Condition 2.

n.<n.-. when nc-I>2 (i=1, 2....)

(i.e. when more than two numbers enter the inputs of any layer. fewer numbers than
those that entered the inputs result at the outputs of this layer).

Condition 3. 0;!(n.-.+l)—!(Iu-n) (n.-.=l, 2, ...) I

(i.e. the quantity of n numbers at the outputs of a layer cannot decline when the

1
quantity of n1_1 numbers increases at the inputs of the layer).*

““1“” “' [(n...+I)—!(n.-.)<l (n._.=-I. 2. ...).

Condition 5. For any number N. no matter how large, there exists such nu-“ that
m>N when all n.-u>n’«--n. In other words, llm n, e—Loo. ‘
l.-.‘

* It is assumed that a change in the quantity of numbers at the inputs of a layer
is acconpaaied by a corresponding rearrangement of the apparatus in the layer.

28
FOR OFFICIAL USE ONLY

He shall see later that these conditions are met not only in multilayer simultaneous
multipliers built from one-digit adders, but also in simultaneous multipliers built
from parallel counters * (see subsections 4'. 5°. 9°. 10'. 11' and 12° of this sec-
tion), short-bit parallel adders (section 6.3.1) or from special translators of
N-bit code into two—bit code (section 6.3.2). .

Let us examine several general corollaries stemming from the fulfillment of the
above five conditions and thus relevant to all the multilayer simultaneous multi-
pliers just listed (as well as to all the simultaneous multipliers that can still be
suggested and developed and in which the conditions listed are also met).

Corollary 1. It follows from conditions 1 and 2 that the quantity of n1, n2, ...

numbers at the outputs of the sequential layers form a series whose terms descend
until the first of them satisfies the inequality 2
“4‘: .

Let us designate the number of this term by the letter M. Let us assume that the
simultaneous multiplier contains H layers. * Thus, the initial n . no numbers are

sequentially translated ("removed") H times so that there are satisfied the
inequalities

no>n.>u,> >nu-I>Ilw:
m>2 when {(M; nu<2.

Corollary 2. It folows from condition 1 and corollary 1 that for any n. there is
a corresponding unique H, i.e. that the function H(n) is single-valued.

Corollary 3. The function K(n) is non-decreasing. i.e. Ad(n9:;ﬂl(n"),if h"i>nt
This follows from corollary l and condition 3. In fact, when n increases, not one
of the values n1, n2, ... can decrease and, consequently. H cannot decrease.

Corollary 4. Hhen n increases by one, the quantity of layers either does not
change or is increased by one, i.e. M(n+l)—M(n)<l-
This follows from corollary l and conditions 3 and b.

Corollary 5. The number of layers M can be as large as desired: lbnﬁl==oo
(from corollary l and condition 5). "‘

 

* We call a parallel counter (k, m) an assembly that adds k binary digits of the
same weight (let us assume the weight equals 1) and generates their sum in the form
of an m-bit binary number. Since the maximal value of this number is 23-1, then m
is the smallest integer solution to the inequality ,._4;,t

A particular case of a parallel counter is the counter (3. 2) which is a well
known one-digit binary adder.

** We assume that no is greater than 2.

29

FOR OFVICIAL USE ONLY
FOR OFFICIAL USE ONLY

Corollary 6. For any integer newegative It, there is some maximal value n which
we shall designate in the form n ). In other words, 1100 is the animal quantity
of numbers that can be contracted into two-digit code by using 8 layers. Corollary
6 follows from corollaries 4 and 5.* Let us note that n(0)-2.

Corollary 7. From corollaries 3 and 6, it follows that n""’<nm (Tu-l. 2, ...).

(0) (1) (2)

Thus, the numbers n , n , n . ... form an ascending sequence.

Corollary 8. It follows from corollaries 3, 6 and 7 that when n>3 M(n)—T , if

n"")<n<nm (T=l. 2. ...). This leans that the quantity of layers of simultaneous
multipliers when any ">3 can be determined, after selecting from the series of

numbers “(0), “(1), the two adjacent numbers nu.” and “(1') that satisfy the
given inequality. Then “(M-'1'. He will often use this technique later. If there

is known the time tau 1 of operation of any i-th layer and if taul-tauz- Itauu-

tau, then the value of M defines the time of operation of the entire device from
the moment the n-n0 initial numbers (partial products) are fed to the inputs of the

first layer to the result of the two-digit code of the product; this time equals
H tau.

('1')

In ,thenn

1 1"“ (T4)

are contracted ‘r-l layers, then owing to corollary 8

Corollary 9. If “i— . In fact, since in this case n1 numbers

w-n<m<n""’-

If it would turn out that n.<n‘ff|), then when n1_1 increases by one, :11 would

increase by no more than one (condition 4), and would become equal to n' 1, the
inequality

n(r-ap<n"<ncr-l)
would be net and therefore n'1 numbers would be contracted 'r-l layers. But this
would mean that “(1')“ numbers were contracted by '1' layers which is impossible.
Therefore, ni-na-J‘).
(T-l)

(’1')

use this possibility for computing values of n .

Corollary 9. in particular, means that if n1-n , then nsx(n1_1)-na). we will

Fulfillment of condition 5 is necessary since if it were not met, i.e. if there
were such x and such n1_1- ’3', that ni-X when all n.-.>a , than when all new! a.

would equal x, and H would equal some constant maximal value ﬁr (i.e. corollary 5

would "0: exist). In the process, *5" would equal infinity, and no” when “>17
would not exist (i.e. corollary 6 also would not exist).

30
FOR OFFICIAL USE ONLY

Using corollary 8. one can write the following system of inequalities:

M-I .—
nf ’<n.<n‘"’. Mu‘”<n.<n“‘ n. . . 0 .
u--l--I M...
n‘ N<m<n“h ..nnm<nw4<ﬂm
nu -=: um =-.- 2_

It is evident that if we construct some i-th layer not in accordance with the func-
tion ni-f(n1_1), but some other method. but so that in the process the inequality

um '- l'<n,<n”"" is not violated, then the total number of layers H does not
change. we will use this possibility later to modify the methods under investiga-
tion for constructing multilayer simultaneous multipliers.

2°. The first of the multilayer simultaneous multipliers that we shall discuss is
organized the following way [1, p £54].

Let us subdivide a set consisting of n initial terms (partial products) into non-
intersecting groups of two numbers each per group. The number of such groups (let
us call them full) is equal to [n/2]; in addition, with an odd n. there will be one
more group not full that contains one number. In each full group. let us add the

two numbers by using the usual parallel binary adder with serial propagation of the
carries. Let us not translate the number that has fallen into the group not full.

Needed for translation, evidently. are lambdal-[n/Zl parallel adders. the aggregate

of which let us call the first layer of the device. Let us consider as outputs of
the layer the [n/2] numbers obtained at the outputs of the adders and the number
in the unfull group that. thus, passes through the layer without translation. The
quantity of nu1 numbers that end up in the unfull group, evidently, is equal to

n-Ztn/Z]. It is evident that nu1 equals 0 or 1. One can state that in the first
numbers by using lambda1 parallel adders is translated into

.n,=l,+v,=[.fg..]+n.-g[_;g]-n._[112:]
numbers. Each i-th layer is constructed similarly, i.e..
nl=1.+v.=n.-.-[’—‘3=J]. (4.9.!)

Here lambda1 is the number of parallel adders in the i-th layer.

layer n-no

A graph of the function ni-f(n1_1) is shown in fig. h.6.16a (p 203). The continuous

line shows the part of the graph that is later periodically repeated (broken line).
It can be seen from (4.4.1) and the graph that with this method of constructing a
multilayer simultaneous multiplier. all the conditions listed above (conditions
1-5) are met and therefore all nine corollaries are valid. The structure of such a
simultaneous multilayer multiplier is described by the_relatignahips

nc=11+ﬁo 1a=[%2' .
vl=n.-.-2lu “=2. I=l.2.....M. (4-4.2)

31
FOR OFFTCIAL USE ONLY
FOR OFFICIAL USE ONLY

I: [’4
.o-o-o-o— I
' I O am
8) Mn-z. 4. 8, 10. 32. M b) "(ﬂ-2, 3. ﬂ 0. 9. [3
c) “(H-2, 3, 7,15. 35, w d) amt-2. 3. 7. 22. n, ”0'

to!

  
    

 

”It.
e) I'm-é 3, 1, mum—I 1‘) smug 335. 3). I7. 32 (Juan

an. I

I '°° u
3) d')-3' 8. 32. '28. 5I2. 2008
(when "'°)

F13. 4.4.16. Type asaably: a) and b)—countera (3. 2); c)-counter (7,3);
d)-counter (15, lo); e)-counter (k, a); f)-k-l>1c adder;
g)—translator N92. ‘1' - 0, 1. 2, 3, 4. 5.
FOR OFFICIAL USE ONLY

The sun of the two numbers obtained at the outputs of the last, H-th layer, as
stated earlier, equals the product of AB.

It can also be seen from (6.6.1) that with the given “1 the urinal value of “1-1 '
is 2:11. Therefore, from corollary 9 ' .
nm=2n“‘—" (To: I, 2. ...).

(o) (1),,“ n(2)

Since n I2, then u I'8. ..., i.e,

atm=2-+"(M=o,1..'I.)'. ' (4.4.3)
The first six numbers of “(1‘) are given in fig. 6.4.16. a.

Since for any n there is such T, that

"(r-I)=2r<n<2r+l=n(r).

then fron corollary 8, for this n there is an H - T.
In other words,

M = ]log. n[—l‘). (4.4.4)

* ]d[ designates the smallest integer not less than d.

For exmlple, when n - 68, H l 5 (since m0=32<n<64 =0“)-

The relationships (10.4.3) and (6.10.5) fully define the direct dependency between
the number of terms n and the nunber of layers M, and the inverse dependency be-
tveen the nunber of layers )1 and the urinal nunber of terns no”.

Since each parallel adder reduces the quantity of nuabega being added by one, then

the full number of these adders equals u

2 11:" '- 2e

(-l . _ _ _ -

WNW uh f"—

Shown in fig. 4.4.17 is the location of I 5 p I!” m" 031:?
the nunbers at the inputs and outputs of m
the layers of the simultaneous aultiplier ﬂlllilllm
of the type under consideration for the W
case n - 12; also shoun in the drawing is m

the procedure for completing addition of
the two nunbers, after which the final
product is obtained. Each dot in the
figure represents a binary digit. The

 

 

 

initial array 'A of the numbers is trans- ..
lated by the first layer into the array 3; m :
array C is obtained after the second layer, @
then D and, finally, the result B. Each —"""”!
rectangle in the figure encloses the ....... Q
numbers being entered to the inputs of ——____f.
one parallel adder. The horizontal lines . 313'. 4.4."
33

FOR OFF'CIAL USE ONLY
FOR OFFICIAL USE ONLY

connect the output digits of each parallel adder. Let us assume that the last
adder that translates array 0 makes up an additional, (M + l)-th layer of the de-
vice. It can be seen from the figure that there are 11 parallel adders and 166
one-digit adders. It can also be seen that the maximally full operating time of
this device is ' '

(M + |)tu+ (20—2)!" llowlteu-i- (zit—2)".

where tausum and tauB are respectively the time for forming the sum digit and the

carry digit in a one-digit adder. In fact, the second layer begins operating

within tauE + tausun after the start of operation of the first layer (let us ignore

the time for forming the partial products), the third layer-within 2 tau8+ t'usum’

and the fourth-within 6 tauB + tausun. By this time, the carries will actually

pass through I + 2 + 6 lowborder positions of the device (from the Zn-l-th to the
2n-8-th). In the last layer, the carries pass through the positions left before
the first position. In addition to the delays associated with generation of the
carries, there is also the delay tauaun in each layer.

It can be seen from fig. 6.6.17 that this simultaneous multiplier (and the figure)
was constructed actually according to the following rules.

1) The initial array of terms (partial products) is shown in the form of a
parallelogram. The rows of digits obtained at the outputs of each layer are shown
in the figure one under the other in the same order as the rectangles reflecting
the corresponding rows of apparatus (in this case-para11el adders) at the

inputs of the layer.

2) The quantity of n numbers at the outputs of each i-th layer is defined by the

1
function ni-f(n1_1); however, the quantity of digits at the outputs of one position

is n1 only in some middle positions of the layer; in the extreme positions due to

the restricted length of the terms, the number of digits at the outputs is less
than n .
i

3) One can state that the apparatus (adders) were installed at first as if the
terms were infinitely long numbers, and then taking into account the actual width
of the terms, all "superfluous" assemblies (one-digit adders) were removed from
the circuit, i.e. those parts of the apparatus that had no effect at all on the
position of the significant digits at the outputs of the layers.

One can note that these rules clearly define the structure shown in fig. 6.6.17.
Let us call this structure "basic." Later we will often encounter various "basic"
structures of simultaneous multipliers that differ from each other only by the
fact that some other type assemblies will be installed in the layers instead of
binary adders.

Let us also note that after changing the formulated rules, other structures can
be constructed too (with the same function of ni-f(n1_1)). For example, if the

first of the three rules is removed, one can obtain a set of'structures, one of
which is shown in fig. 6.6.18. In the process, the number of layers H does not
change.

36
FOR OFFICIAL USE ONLY

3°. In accordance with the remark
made at the end of subsection 1°,
one can modify somewhat the design
of the device just discussed,
after preserving the sane number
of layers M-llog “0(‘1- Let us

try, for example, to reduce to
the minus: the number of parallel
adders in the first layer. Since
there must be met the inequality

nil-”<11. gum-I), (4.4.5)

the number of adders lambda1 .

 

[no/2] can be reduced to the

Masses...

value . E E

. OJ. . .
1'. =ll.""l.w-"=Il.— f=n.—2MI4 . F18. 1. P13. “'9

These lambda'1 adders add in

pairs the 2 lalnbda‘1 numbers,

and the remaining no-z lambda'1 numbers pass through the layer without translation.
Obtained then at the outputs of the first layer are

: n.-x'.+(n.—2w.)-M'-"-2~

numbers. which corresponds to the right boundary of the inequality (4.4.5). The
renaining layers must be constructed according to the old rules. 1.0. lambda1 -
[hid/2] (1-2, 3, ..., M). It is evident that in the process

n.=-'i'-=n""'=2~". 1.213.,

The number of layers H, as we see, is retained. It is interesting that the nuaber
of parallel adders in this case also does not change:

(pm—2") +2'H +2'—'+' ... '+2'—no—2.

Shown in fig. 4.4.19 is the modified structure for the case n - 12. A amber of
features of the new structure can be seen fron fig. 10.6.19 in addition to that

n1 - nm- a (in contrast to n1 - 6 in fig. 4.4.17). 112 - I. and n3 - 2. The rules
by which the new structure was built can be formulated the following way.

35

FOR OFFWIIAL USE ONLY
FOR OFFICIAL USE ONLY

1) The apparatus is installed in a way such that the quantity of digits n11 at the

outputs of each j-th position of each i-th layer meets the inequality_ "L5:“011L

2) In each layer are installed only those assemblies (one-digit adders in this case)
the removal of any one of which would lead to nonfulfillment of the requirement

uhsgm"'W

3) The assemblies in the layers are used the "maximal” way (as many inputs of these
assemblies as possible are fitted; in fig. 6.6.19. it is shown in particular that
even the input of the carry of the low-order position of the parallel adder is
used).

Let us call the device built by these rules "economical." It can be seen from fig.
6.4.19 that in this case, the "economical" simultaneous multiplier contains just
as many layers (4) as the basic, and just as many parallel adders (11), but the
quantity of one-digit adders has declined considerably (132 instead of 166). More-
over, device operating time has also been reduced. It can be seen from the figure
that now it is ‘

(ZR-‘2)‘H uhen ta;at.m

[cm I am . sum]
(20—0 In + 2*“ when 18< It»

We shall encounter later also the "economical" structures. from corollary 8. the

"economical" modification can be built for any simultaneous mu ltiplier meeting

conditions 1-5.

It can be noted that the formulated rules for building the "economical" circuit
allow different structures, i.e. the sﬂmultaneous multiplier structure is not
unequivocally defined.

Besides the basic and the "economical,” many other modifications could be suggested.
but we will not do this.

Given in table 6.h.2 as yet another example are the values of I11 and lambda1 of the

basic and "econo-ical" structure of the type of simultaneous multiplier under dis-
cussion for the case no-48.

The main shortcoming of both modifications of the device in question consists in it
being inexpedient to make a fast adder of the last. H + l-th layer. since the carry
propagation in it is nevertheless delayed by the adders of the preceding layers.

He observed a similar situation in homogeneous array simultaneous multipliers of
type 1 (see fig. 0.4.7).

6°. This shortcoming stems from the fact that within each layer carries are propa-
gated from low-order to high-order positions. Later we shall investigate a series
of structures for simultaneous multipliers in which high speed is attained because
there are no carry propagation processes within layers. But first let us describe
a structure that can be considered one-layer and which in a certain sense is the
source for all subsequent modifications. This simultaneous multiplier is a chain
of 2n-l serially connected parallel counters (k, m). In each position of the de-
vice there is one parallel counter that adds all the digits of the partial products

36

FOR OFFICIAL USE ONLY
ma (WFICIM. “SK (WIN

relevant to a given position (i.e. up to n digits). and besides that. the carries
coming froa some counters located in the lower-order positions of the device [21].
Such a simultaneous multiplier for the case 110-12 is illustrated by figs. 4.4.20

and 4.5.21; shown in the first one are several low-order positions of the device.
and in the second-the arrang-ent of numbers at the inputs and outputs of the
counters. In fig. 4.4.21, the outputs of each counter are connected by a slanting
line. It can be seen from the figure that the most couple: counter—(15. 6)--is
in the 13th position. There are 2n-l counters.

, I a: on»

.00....0....
0.00.0000...
00.00.00.000

oeseeeeeoose
osessosoosos
‘ 0000009000..
oesoooeeoOee
ooeoeoooeess
esseeouooess
Osoeseoooees
00.000000...
0.000.000...

“Mancunian-whim
””5
(2) mm: -

 

II II I: 1:. :0 0)ka N." Insannnmmnulnn .
(”Mm/10pm mm!
Fig. 4.4.20 mum
Key: Key:
1. Nuaber of the positions é. gamrzies fron colulns of array A
0 act

3. umber of inputs of counters

This type of device has a simple structure but substantial shortcomings: the
parallel counters with a large nmber of inputs are couples circuits and carry

propagation along the chain of counters takes much tine.

5°. Now let us move on to multilayer structures in which there is no carry propa.
gation within layers. Let us change the preceding device [21]. Let us formulate

the product in two stages—first we obtain the two-row code of the product, i.e.
the two numbers whose sun is the product sought. and then we add these two numbers
in a fast adder.

In each of the H layers of the device that forms the two-row code of the product,
in one position will he no more than one parallel counter (11, In). There will be
no connections between counters within a layer. Let us connect the layers serial-
ly, just as before. If only one digit enters the input of a given layer in acne
position. then it will pass through the layer without translation (two digits in
one position will also not be translated if in each of the lower-order positions
at input of this layer there will also be no more than two digits).

Such a device for MM is illustrated in fig. 4.10.22, in which, as in fig. 4.4.21,
slanting lines connect the output digits of the individual parallel counters. It

37

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Table 6.6.2.

 

 

— -:'I I“ 1‘ _ l I. l. n! I l, I “I | 1‘
0 4|! 68 3| G 6 8 B
l 24 24 262 '6 4 3 3 4 6
.’ I! I'.’ I5 _ l6 5 2 I 2 2

 

 

 

 

 

Key:
1. Basic simultaneOua multiplier 2. "Economical" simultaneous multiplier

can be seen from fig. 6.6.22 that the device contains 3 layers in all; array A is
translated into array 8, then B into c and finally, c into I). It is evident that
the maximal number of inputs of one counter in such a device is n.

It follows from the description of the method for constructing the layers that for
a gieVn “1-1 there is an n1 that is the smallest integer that satisfies the

inequality ' '
2" — I 5:1,-..

Hence it follows that
nc= [Ion m-nl + I. (4.4.7)
A graph of the function ni-f(n1_1) is shown in fig. 6.6.16e (p 203). It can be

seen from the description of this dependencbthat in this case too conditions 1-5
are met. Since max(n1_1)-n(1') when ni-n 1“ (corollary 9), then there is

derived from (6.6.7):
n"”"=10t.(u"’ +1).

11‘" =2” — I. _ (4.4.8)

i.e.

(‘1')

Several of the first values of n
given in fig. 6.6.16e.

, computed by using relationship (6.6.8), are
From corollary 8
H - 1' when n("'"<n<nm.

For example, 14 - 3 when n - 68. since
Mh=7<n<l27=nﬂl

The sequence of numbers n1 for this example has this form: 68. 6, 3. 2.
It is evident that when this method is used, “(1‘) increases rapidly with the

increase of T. For real values of n, the number of layers does not exceed the
value 2-3.
FOR OFFICIAL USE ONLY

11’055
see
one
see

 

‘ (3
7/3.,

P18e.‘.413

'13‘557'

.000

O...
O...
‘0'. ‘

*‘C? ——
l—lllfu/////////////.. .‘ 7”. .2'

    

T—‘ V
l/f/l/I/l/Iititﬁ'ﬁ'?’ 0

P18. {‘22 ///.::e
-. / 6"

7/421?

_._____
{7 E aw/Ixz/Imw

“3-, 44.24 mg. 4.4.26

It should he noted that prior to the appearance of work [21], this Iethod of adding
sets of numbers was suggested in [142] in a sore general forn for nuber systaas
with the arbitrary base r. A table of values of n T) for r - 2 was given in [142].
This sane table in [21] contained a number errors:

for 11(3), n“) and “(5). 15, 32 and 64 were indicated instead of 127, 2

127
2 -1-1 e

127-1 and

6°. The method just described provides for a very small nulher of layers, but
parallel counters with up to n inputs are needed to use the method. when n is
large, such assemblies are bulky. Therefore, it is advisable to consider nethods
that allow using parallel counters (k, n) with linited k.

One of the earliest works in this field was [42] by V. M. Khrepchenho; he described
a method of fast addition of a large nunber of nmbers with the base r by using
identical parallel counters (k. I), each of which adds k base-r digits of equal
weight. This method was developed independently of works [19 and 143] and is a
generalization of the idea advanced in then. Multilayer array sinultaneous nulti-
pliers, built with counters (k, a), with different k. were also investigated in
works [17 and 21] and in a number of later publications.

39

FOR OPP"“ML USE ONLY
FOR OFFICIAL USE ONLY

Let us begin with thc cnsc k92 and r-2 (subsequently in this section we will be
talking about binary addition only). The use of the counters (2, 2). i.e. binary
half-adders. when n '3 and n=4 is shown in figs. 4.4.23 and 4.4.24. It is evident
that when n-3, the device contains one layer, but when n'4, four layers. Just as
in the preceding case (fig. 4.4.22), within each layer of the device that forms
the two-row code of the product. there are no connections between counters. The
difference is that now in one position of one layer there can be several counters
(when n-4, there are two counters each in the 5th position of the 1st layer and in
the 4th position of the 2nd layer).

In investogating the structure when n is larger, one can be assured that the number
of layers in a device built with counters (2. 2) by this method is approximately
3.7n-10.4.* Such devices, of course, are too slow.

7°. Let us go on to the case of k-3. By now there have been a considerable number
of suggestions for methods of building multilayer simultaneous multipliers with
counters (3. 2), i.e. with one-digit binary adders. Let us look at one of the
earliest proposals [17 and 18].

Shown in fig. 4.4.25, taken from work [21], is the arrangement of numbers at the
inputs and outputs of each layer of the suggested device for the case of n-lz.
The principle for building this simultaneous multiplier is as follows.

Positioned in the first layer of the device are lambdal-[n/3] rows of one-digit
binary adders. Accordingly, n initial terms are divided into non-intersect-
ing groups: lambdal-[n/3] full groups of 3 numbers each and one unfull group con-

taining nul-n-SIn/Jl numbers (nul-O. l or 2). Each of the lambda1 rows of adders

adds the 3 terms of the corresponding full group (each such triad of numbers in
the figure is enclosed by a rectangle) and produces two numbers-s series of digit
sums and a series of cascaded carries, i.e. the three-row code is translated into
two-row. At the outputs of the first layer there is formed the nl-row code, and

n.=2i.+v.-2[n./a] +n.—3[n43]=no¥[nd3]

(nu1 terms of the unfull group pass through the layer without translation). In
fig. 4.4.25, 1ambda1-4, nul-O and n1-8. The lines connecting the output digits of

the one-digit adders that add two digits each and therefore can be replaced by
half-adders are crossed out by short lines in this and the following figure.

Arranged in similar fashion in the second layer are lambdaz-[n1/3] rows of one-
digit adders. The second layer replaces the nl-row code by nz-row, and

":=%+Vs.
where v,=n.—3lz. In fig. 4.4.25, M22. ”-2, Rs=5-'

* The error of this empirical formula when n is less than or equal to 80 is no
more than $1.8. The formula H-Zn‘z from [21] is incorrect.

40
FOR OFFICIAL USE ONLY

Each i-th layer is built by the same method, i.e.
m = 214+Vl= 2[n._.13]+(n._.— 3[n,_./3]) =M-l— [um/3] . ($4.9)

The graph of the function “4='“"4-l) is given in fig. 6.6.16h (p 203). From
the graph and (6.6.9) it is evident that conditions 1-5 are met. The structure of
this simultaneous multiplier is described by the relationships , , .

m-2k+|w. M—[m-lﬂii.
w=m—|—3M. nu=2. (=1, 2, . . ., M.

When ni-n(T-1), the maximal value of n1_1-n(1) is obtained, evidently in the case

when the layer contains lambda-[n1/2] rows of adders, i.e. for each pair of numbers

at the outputs of the layer there are 3 numbers at the inputs of the layer. In
the process, nu - n1-2 lambda numbers (nu - 0 or 1) pass through the layer without

translation. Therefore ... _n.. -i. . ‘
n‘" =3: + V: 3 [ "';"’]+(n"-" — 2 [223]): JP“ + [”3]. (4.4.10)

Using this relationship, one can calculate the sequence of values of n(T); the
first few are given in fig. 6.6.l6b.

 

 

Just as before, H - ‘1‘ when MT"><n<nm. (4.4.1!)
For example, H - 9 when n - 68, since
I‘»:42<II<63=M”.

The sequence of numbers of n1 for this example can be determined by using formula
(6.6.9): 68, 32, 22. 15, 10, 7, 5, 6, 3. 2.

It is pointed out in work [66] that when this nethod is used

M =]I°r;%[ 44.4.12)

M=-]log}-;-[+I". (4.4.13)

Comparing (6.6.12) and (6.6.13) with (6.6.6), we see that the number of layers is
increased considerably. but it should be considered that the delay in each layer
is now equal only to the time of operation of one one-digit adder.

or

Concerning the structure of the simultaneous nultipliar corresponding to fig.
6.6.25, one can note that it belongs to the class of "basic" structures since it

was built by the rules given at the end of subsection 2' of this section.
8°. Let us describe an "economical" modification to the device just discussed

[21]. In accordance with the rule given in 3', first let 'us put in the first
layer not lambdel-[nOIJI rows of adders, but lambda'l-no-nCH‘l) rows. Then

n. —2x. + (pa—31'.) aunt-n.

 

* ]d[ is the smallest integer not less than d.
61

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

In each of the remaining layers, Just as in the preceding device. the number of
rows of adders will be lambda -[n /3]. With that, as noted earlier,

01-2) 04-3) ‘ (o '1
2-n , n3-n , .... “HI" '2. Second. each row of adders in each layer will
maximally contract from both sidesoéuntil further contraction would lead to the
derivation of an n1 greater than n 1)). Fig. 4.4.26 shows the structure of such

an "economical" simultaneous multiplier (n-lZ, as in fig. 6.6.25). It is evident
from the figure that now installed in the first layer of ”_ _

the device are just those one-digit adders, the lack of , 5 k "E” u
any one of which would cause the quantity of numbers n1 'N'u-u-M

at the outputs of the layer to be greater than n(* 1)-1

n(6)-9. In the process, the one-digit adders are replaced
by half-adders (marked by small lines) where possible.
Similar measures are also taken in the remaining layers.
In comparing the last two figures, one can see that the
quantity of layers in the "economical" device is the same
as in the preceding. but the volume of apparatus is less.

 

 

    

It can be shown that the "economical" sﬂmultaneous multi- . :“
plier of this type contains (n-l)(n-2) one-digit adders :29249.:.

and half—adders. This value is the minimal for any

simultaneous multiplier built of such assasblies and T—Wn®
forming the two-row code of the product. In this case “nae? A? ..
(fig. 6.4.26), this qunatity is 11 x 10 . 110, i.e. 26

fewer than in the preceding device. ..MF——7n—{’?zt:
It should be noted that prior to the appearance of work WWW/MPMVMf/llr-z
[21]. practically the same method for constructing multi-

layer simultaneous multipliers with counters (3. 2) was r13° 1428

described in work [17]. The main difference is that a
"truncated" device containing n basic and several addi-
tional positions was discussed in [17].

9°. Let us now assume that counters (7, 3) and (3, 2). [21] are available to the

developer. Each layer will be built by a method which to a certain extent is
similar to the preceding one. In each i-th layer, let us put lambdai-[n1_1/7] rows

of counters (7. 3). One such row translates 7-row code into 3-row. The remaining
-1-7 lambda1 input numbers of the i-th layer either pass through the layer with-

out translation (when n1_1-7 lambda1 is greater than or equal to 2) or are trans-
lated by yet another rowofcounters (when n1_1-7 lambda1 is less than or equal to 3).
It is evident that when n1_1-7 lambda1 - 3, two-row code is formed at the outputs
of this additional row of counters, and three-row code when it is greater than 3.

The availability of counter (3, 2) in the process does not change the essence of
the problem, since it can be replaced by the counter (7, 3); generally any counter
(k1, m1) can be replaced by counter (k2. m2) when k2 is greater than or equal to k1

(zeros are fed to the k2-k1 extra inputs, but of course the counter (k1. m1) is
simpler than (k2. m2))
62

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The graph of the function "i=Nﬂs-y) is given in fig. 6.6.l6c (p 203). It
follows from the description of this function that conditions 1-5 are net. The
structure of the sinultaneous sultiplier is described by the relationships

m= Ska-Ha. M= [um/71.

nl-n-"lwhen n.-.—7z.<2,
w= 9 when n,-,—11,=.3, (4.4.14)
3 "h.“ nI-o—7‘l>3o

flue-J2. l=l. 2, . ... M.

In accordance with corollary 9, the maxinal value of "‘-|="m when "'=_’f"'"
is obtained, evidently, in. that case when the layer contains l’= [In/3] rows

of counters (7, 3) and V=l("“‘ 3")12] rows of counters (3, 2) (la-lads" - 0
or 1), but v=m—3l:-2l" numbers pass through the layer without translation (w - 0

or 1). In other words, for each triad of numbers at the outputs of the layer
there are 7 numbers at its inputs; if the quantity of rug—3.}! numbers left is 2,

then for them there are another 3 nushers at the inputs of the layer, but if
n,—3).’=|, then the corresponding amber has passed through the layer without
translation. Thus,

M=7V+ 31'+v. 1’:- [aw-"[3],

1"- [ (awn—Wm]. v-M’"’-
.31'_2).', Ta], 2, (4.4.15)

The first few numbers of n“), derived by using these relationships. are given in
fig. 6.4.16c.

Just as before, M=Twhed“"”<n<nm. . -
For exseple. H-S when n-los. The sequence of numbers 111 for this “91¢ can be

derived by using (6.6.14):
48. 21. 9. 5. 3. 2.

In comparing the values of nu) in figs. 4.4.11“: and b (p 203). we see that now
when n is greater than 6, there are fewer layers in the new device.

Let us note that one could put in each i-th layer only Mei-[HAN] rows of
counters (7 , 3). and the rasaining n1-7lnt_1/7] numbers would pass through the
layer without translation. For a structure of this type, na)-7[n(r-nl3] +
(n‘7'1)-3[n(T'1)/31) and therefore the sequence of nubers “(0). nu), would

a
change. Condition 3 is not set in the new structure. i.e. hi can decline as

 

* It is possible that the author in work [21] had precisely this method of con--
structing simultaneous multipliers in nind. since in it instead of. (”-80 the
value 79 is indicated. " '

43

FOR OFT-10“ USE ONLY
FOR OFFICIAL USE ONLY

ni_1 increases, because of which the quantity of layers H can be greater than in

the structure just described, but the volume of apparatus-1ess. Such structures
can be suggested also when other type assemblies are used-counters (15, 4) (see
subsection 11° of this section), k-bit adders (section 6.3.1), translators N--2

(section 6.3.2) and others. Such structures in translators R--2 are discussed
in work [45].

10°. Similar to the way this was done in subsections 3' and 8' of this section,
one can build an "econonical" multilayer simultaneous multiplier uith the counters
(7, 3) and (3, 2). In such a device, after the first layer are obtained

n1.n(H-1) numbers, after the second-n2-n(“-2) etc. For example, if n-48, then
n1-35, nz-ls, n3-7, n4-3 and ns-Z.
The basic and modified ("economical") simultaneous multipliers for the case n-lz

are illustrated in the figs. 4.&.27 and 6.5.28 respectively. It is evident that
there is less apparatus in the latter device.

 
   

 

easeleoooos
soosooooooo.
senescence.

 

....., ‘
"T ® —— CD
?////_/(_////”' _ 3522?!" =°

    

     

________________JL(:)

M YM ,_- Q _- ®

 

 

"
7////////////////// 0". //////////////////// J"
Fig ., 4.421 Fig. . 4.4.23

11°. Let us now assume that a multilayer sinultsnsous multiplier is built from the
counters (15, A). (7, 3) and (3, 2). Discussion similar to the preceding leads to

the formulas n‘ =41'+9" l,=[n,-./l5l.
”In '- [511911811 ’11-. — 151l<2v
_ 2 When n‘-.— I511=3v
w * 3 unen3<a,_.— 151.0. (“'6’
4 vhsnn,_,-151,>7.

nn=2, i=l. 2....s Ms

 

f-I
n‘h=l51'+71"+3i"’+v. z'=["“ ’].

('—)_ (T—I|__ l__. II
1"'-=[f- 3 “’1. 1",;[11 4A '9. ]’

 

2

v-an-‘h 41'-3z"—2r". 1:1. 2.... (4.4.17)

an
FOR OFFICIAL USE ONLY

The graph 01 the Ium-tluu ui-anl) and the first few values of “(1') are shown in
e
fig. 4.4.l6d (page 203). Conditions 1-5 are met. It is evident fron fig. 4.4.1611

that when IGSRS”. 35$n<‘7& ">81 , there are fewer layers in this device
than in the preceding one built fron counters (Z, 3). Paragraph. when n-48.
there are 4 layers (since 22=nm<48<nm=78).

Prom (4.4.16) for n0-48 we obtain all rasaining values of n1: 111-14, n2-4, n3-3
and "4-2°

12°. when counters (15, 4) are used, just as in the other cases, one c_an build
0' I!
econosical simultaneous nultipliers in which m (‘ I. 2' ..., ).

Another two methods of building multilayer array simultaneous nultipliers will be
discussed in sections 6.3.1 and 6.3.2 in chapter 6. By the first of these methods,
the multiplier is made with large-scale integrated (1.81) circuits, each of which
is a k—bit binary parallel adder. The second method calls for using 1.51 circuits,
each of which is a snail—bit converter of l-row code into two-row. Despite the
difference in the elenent base, the structures of the sinultaneous nultipliers in
both these cases are related to the structures discussed in this section. Use of

the k-bit adders and the u—rz translators is reflected in fig. 4.4.16: (9 203).

Aside from the methods depicted in fig. 4.4.16, there are also others. For ex.-
ple, in work [47], there are discussed nultilayer simultaneous nultipliers in
which the type assasbly is an adder that adds r k-bit binary nuhers and produces
their sum in the form of one d-bit number (such an assembly can be nads in the
form of ROM containing

2lrk numbers of 4 bits each). u is suggested that such r and k be chosen that a

is a nultiple of k. A chain (series) of such adders translates the group of r
nultibit nubers into s numbers. and

4:9. ,=2u-m+2n-m+ H.

The graph nl-f(n1_1) for this simultaneous ..

multiplier is shown in fig. 4.4.29 (the "

case selected is r'9, k-J. d-6 and 8-2). A

1: is evident that condition 3 is not let "‘4 / \

if r-l is greater than 3 (it is net only 1/ ‘ I’

when r-3, k-l. 6-2 and snz which corres— l: / v

ponds to the method reflected in fig. .1 I

4.4.16b (p 203) and which is thus a a

particular case of the methods

discussed in [47]. ,. 2, 377.7:
P13. «29

 

* Relationships (4.4.16) and (4.4.17) are given here for the first tine. In work
[21]. 21, 61 and 226 are erroneously indicated for n(3) n(4) and n(5)
D s

45

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

5. High-Speed Synchronous Devices for Division

Until recently. there was less development of methods for speeding up division com-
pared to those for addition, subtraction and multiplication. This is apparently
due, on the one hand, to the "sequential" nature of the procedure for conventional
division (the next digit of the quotient can not be selected and the new remainder
cannot be computed until the preceding remainder is derived and analyzed) and, on
the other, to division being a relatively infrequent operation. In some digital
computers, direct performance of division is "avoided" by using standard subrou-
tines that include multiplication and addition-subtraction. However, division is
now included in the list of operations of almost all modern general-purpose sa-
chines and the necessity of speeding up division follows from the very existence

of the very efficient methods for speeding up multiplication: a non-fast operation
for division sakes no sense when fast addition-subtraction and multiplication are
available since in this case the division subroutine may afford greater speed than
the hardware solution. It must be noted that in recent years there have appeared

a number of new, powerful, synchronous methods for speeding up division and the

development of new methods is continuing. The main known methods are discussed
in this chapter.

Synchronous methods for speeding up division are conveniently classified into two
groups: speeding up division in each cycle of which one or more digits of the
quotient isselected and the new partial remainder * computed, and that which
"avoids" division by using multiplication or another procedure.

Methods of fast division, performed by a conventiOnsl circuit-ana1ysis of the re-
mainder and divider. determination of the next digit of the quotient and computa-
tion of the new renainder-may also be divided into two groups.

The first includes methods using algorithms under which changing the sign of the
remainder as a result of the next cycle of division does not lead to the need for
returning to the preceding remainder. These methods for speeding it up are called
nonrestoring division methods (sectioa 5.4). As these methods evolved, they were
enriched with new ideas such as using a redundant set of digits for advance forma-
tion of the quotient, deriving the next remainder in the form of two-row code and
using arrays of adders.

Methods in the second group return to the preceding remainder after the remainder
sign is changed, i.e. they restore it (section 5.1).

Of the methods that perform division by "avoiding" it, we shall discuss iterative
methods that use multiplication (section 5.3) and the group of methods suggested
by Stefanelly (section 5.2).

 

* From now on, let us call the unshifted partial remainder simply the remainder and

designate it by 31; the dividend and divisor will be designated by the letters A
and c respectively.

46
FOR 0F?1CLAL,US£GDNLY
FOR OFHCIAL USE ONLY

5.1. Methods of Fast Restoring Division

The main way to speed up restoring divisioa consists in advance formation of
several multiples of the divisor and in the simultaneous production, during one
division cycle, of the several differences between the (shifted) remainder and each
of the several multiples. Analysis of the signs of the differences produced allows
deriving in the process several digits of the quotient at once. As an example, we
can cite the division nethod [l] in which in each division cycle there are coeputed
three differences: ant-c. 431-2c and 431-36. By the signs of three differences

derived, it is easy to determine the quaternanry (i.e. two binary) digits of the
quotient. One of the differences or the value of 631 becomes the new remainder.

When, for example, 4BP2C>O. dBc-3C<0'.- then it is evident that the
digit 2 (i.e. 10) should be written to the quotient and 31+1'431-ZC.
It is seen that this group of methods actually performs restoring division.

Some speed-up in conventional restoring division (with definition of one binary
digit per cycle) is made possible by an additional adder [2]. In one version of
this method, the additional adder repeats the operation of the main adder and "lags
behind" it somewhat. If in the main adder there is derived a 231-0 less than 0,

then a zero is written to the quotient. and the additional adder, which at this
time contains the value of 281, becomes the main one; a new shift is made in it and

a new cycle begins: 231 x 2 - 231+1, 231+1-c etc. In the process, the main adder
becomes the additional, and in it the remainder is restored: (231-0) + c - 231,
231 x 2 - 281+1. In another version of the method, the additional adder also “lags
behind" the main one. If in the main one there is produced a 231-0 less than 0,
then 0 is written to the quotient and the number 231 from the additional adder is
added to the main one: (231-6) + 281 - 631-0, i.e. the remainder 231 is restored
at once, it is doubled and a new cycle is performed: 231+1-c. In the additional
adder at this time, the number is doubled:

28': X 2-281";

if it again turns out that the number in the main adder is negative, the procedure
is repeated.

Restoring division can also be speeded up by making a device for division in the
form of an iterative array. Such devices were already nentioned in section 4.A.1
(see [22-26, 31-301) of chapter 4.

For example, the device described in [3] consists of
identical elements, each of which (fig. 5.1.1) performs the
function of a one-digit binary subtracter (when 0-0) or
the function of a one-digit switch (when D - 1)*.

 

 

nln sLlrun,R_c,PuJC JG co.s- o-accn+
+Jcamﬁéo+acan I + A ’

£7

FIHICNNWCJAI.USIICHVLY
FOR OFFICIAL USE ONLY

in the first case (D-O), the result of the subtraction is sent to the output 8, in
the second (D-1)--the digit of the ninuend (digit of the preceding remainder). The
entire circuit consists of layers (fig. 5.1.2), in each of which the divisor c is
subtracted fro. the doubled preceding remainder caning from the outputs of the pre-
ceding layer. Along the layer in the process. the signals P and c of the borrow
are propagated (see figs. 5.1.1 and 5.1.2). The borrow signal in the high-order
position of the layer determines

the sign of the difference 281-C

(and the next digit of the
quotient) and controls the " " a a
generation of the signals 8 in '
all elements of a given layer.
Fig. 5.1.2 "describes" the
example of the division of “0.100
by C=0.101, by which there is
derived the quotient 0-0.11001 and
the remainder 36-0.11; the precise

relationship between A, C, Q and 36

in this device takes the form

A B6

— I Q + a

C c‘z‘
In this device, division is
specded up not by complicating the
algorithm, but by use of high-speed [an . NE .. NOT gate]
miniature elasents connected by
short regular bonds.*

  

Big. 5 L!

5 .2 . Stefanclly Methods

Stefanelly methods are based On several algoriths for deriving the inverse value
llc of the binary divisor c situated in the range between 1/2 and 1; these nethods
may be expanded to also compute the quotient from division of two numbers.

The quotient Q31/C is formed in two stages—first the quotient is produced in the
form of a binary number vith redundant representation of the digits. and then it is
translated into simple binary form.

Generally speaking. any positive or negative integers are used as the digits 1: in

i
the redundant binary number

X'xlz 2

 

* Strictly speaking. this method is a particular case of restoring division-mon-
performing division, by which the subtraction is carried to conclusion only in the
case of a positive difference of ZBi-C; otherwise, subtraction is interrupted and

the remainder is shifted (see section 7.8).

68

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The main procedure for forming the inverse value of the divisor

-l -2
C «:12 + c22

provides for deriving Q in the redundant forn

_ 0 -1
Q a02 + a12 4- a22

The product of (:0 has to be equal, evidently. to one. Let us some that it is
equal to the binary number 0.lll In arranging in matrix form the partial
products of the multiplicand C by the individual digits 'i of the multiplier Q, we

see in the first column of this matrix the term cl‘O’ in the second—the terms czao,
clal' in the third-c3ao. czal. cla2 etc. The main idea of the method consists in
selecting the redundant digits a1 in such a way that the sum of the terms in one

column are exactly equal to one. i.e. to the neat digit of the product of CQ. It

is easy to show that in the process the values of a1 are defined by the
relationships

+...+c2'“
n

‘2 +

0.= e
d.-—l ’6.v
a.-—| —(C.0.+C.)-

a. = I - (c.a. +c.a. +6.). -
a, =| — (coal-I +6.0“. + "- +cla| +990)-

Described in work [5] is an array device that computes the digits ai by these

formulas. This device is very unwieldy due primarily to the large range of possi-

ble values for the digits a1. For atamplehvith Liz-12%. . . .

C —2l<a.<6.—28< ;¢u< - <0u3<|57$;
Further in work [5] there is suggested successively three modifications to the
method aimed at reducing the range of values for the digits ‘1 and simplifying the

device. In the last modification, the digits 'i are vithin the range -3 +3,
which considerably sinplifies computing the values of a1 and translating Q into
conventional binary form.

5.3. Performing Division by Multiplication

In the appartus of arithmetic units of modern digital computers. there are often
realized methods of division that use particular iterative formulas that include
nultiplication [6-12]. In such arithetic units, the quotient or inverse value of

the divisor are found by successive approximations. The majority of these nethods
are based on the known iterative formula

Mama—MC). 1:0. I, 2. .... (5.3.1)

used for the approxinate computation of the value of 1/0. here yo, :11, ’2'
are successive approximations of the value of 1/0. It is

known that if the first approximation of y0 is within the range of 0<yo<2/C,

69

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

then y 1—)1/c when 1—)” . To limit the values of 3;" (including yo) at the top.
the value of c is limited at the bottom. It is conventionally seemed that 1724“),

Let delta 1 be the relative error of the value of y 1: I
”I =1: (I " a".

After substituting this expression in (5.3.1), we get: '
91n=7f (1 ‘5”).

which means doubling the quantity of valid digits after each iteration.

The nuaber of iterations that must be carried out to obtain the required accuracy
of the result, evidently, is strongly dependent on the choice of the first approxi-
nation. Therefore. much attention is paid to choosing the value of yo. There are

several methods for choosing y0 [9]. The most precise (up to 8-9 valid binary
signs in yo) is afforded by tabular methods [9. ll. 12].

The nonent division ends in the sritinetic unit is defined not by comparing the
difference lyul-y‘] with some tolerance. as occurs when performing division by a

a subroutine. but by counting the number of iterations. For exanple, if y0 contains

8 valid digits ”54424): then to obtain. let us say. a 15-bit quotient. one
iteration is performed; two iterations are needed for a 30-bit quotient, etc.

There are a large nmber of different machine algoriths to implement the iterative
process based on the formla (5.3.1). To increase the rate of convergence of the
iterations. some of these algoritlns provide for specific changes in the basic
formula (5.3.1) (see for example, [13], pp 535-536). Four of the nest vell known
algorithm still be briefly discussed here.

The procedures performed by the first of these algoriths literally follow the
very writing of the relationship (5.3.1): v.0.

2 -' ”Oct

y. = y. (2 _ ”00:
9.0.

2 - ”so.
”a =ye (2 - ”IQ!

”cc-
2 - "‘8,
”In =yl (2 — ”1C)-

In the process, each cycle of the iterative process consists of three sequentially
performed operations: multiplication, taking of the cenplement and multiplication
again.

50'

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

For convenience of presentation, let us introduce the designations:

Xa-ya-IC. 12122—14. '

One (i-th) iteration then can be described by the relationships
WHCo RP2—Xl. y.=y:-.R:. (5.3.2)

when 1—) on, the values of 31 and [11 tend to l, but ’1' as was noted, tends to 1/0.
In the second algorith, the i-th iteration is described by the relationships
[6. 10]
‘ n-h-«RI-I. Ra-z—ll.
'g=yHR[ ((-2, 3. .. J. (93.3)

The first iteration is made sonewhat differently, but precisely as with the first
algoritln:

31"th Ra-2—XI. m-Mu.

The values of xi, R1 and y1 in these two algorithm have conpletely identical

numerical values (if apparatus errors are ignored). which can easily be seen by
translating the relationship (5.3.2):

xmyl-cCa-ICUuRo-cmt-ukl-i

(we arrive at the relationship used in the fornulss (5.3.3)). The second algoritln
differs from the first only in that x1 is computed by multiplying :14 by 31-1

instead of using the equivalent formula 31-y1_1c. However, this difference has
considerable effect an apparatus inpl-entation since after deriving R1, the values
of y1 and x 1+1 can be computed simltaneously.

Iteration in the third algorithn [8, 10, 11] is performed by the sane relationships
(5.3.3) as with the second (for i-2, 3, ...). The difference is in the first
iteration:

3131/06.. 'RI=2—lt. W‘WoﬁRl.

where A is the dividend. The values of x:l and 81 in the process match the similar

values derived with the first two algori‘tlns (again if apparatus errors of multi-
plication and subtraction are ignored). But y1 in this case tends to the quotient of
A/C. The third algorithm was implemented in the aritlnetic unit of the m
360/91 machine [11].

The fourth algorith- was developed in the work [7]. The next. i-th, iteration in
this case consists in computing the values of

“I: ”,0.“ I.-.I+U;, v‘=QQ—|" «-2. 3. ...). (6.3.‘)

- 51
NR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The first iteration is described by the relationships
m=l—y.C, 'I-l +0“ “=Mﬂ,

If we ignore the apparatus errors of multiplication and subtraction. then the
third and fourth algoritlns practically coincide, since

n-I-Ut. Ro-n. W'Qa (l=l. 2, ...).

However. the presence of apparatus errors leads to the computations by (5.3.3) and
(5.3.4) not proceeding identically. for example. in the first case. the value of

Ra=2-—xa=2-Xn-IRa:-x may be less than one. but in the second case
II=II+U:-=I+II':-I cannot be less than one.

The. processes of accmlation of apparatus and methodological errors for the divi-
sion methods described in this section are rather complex and proceed differently
when the different algorithns are used. Apparently. there are now no methods for
precise analysis of those processes. Therefore, relatively rough estimates of
errors are generally used in practice. These estimates are based on the assumption
that the apparatus errors of the different operations (for example, the errorof
multiplication of y1_1R1 in the first algorithm and the error of the multiplication

of y 10 performed after it) are independent random values. which. generally speaking,

is incorrect. The error after the i-th iteration. i.e. the difference between yi
and the quotient sought, is usually estimated "at the top" in the assmption

that apparatus errors of all intermediate operations performed after the start of
division had the most "disadvantageous" signs and absolute values.

Since several multiplications (usually 4-5) have to be performed in every division

by any of the methods discussed here, these methods are especially efficient in
arittuaetic units with fast (for example. array) multipliers.

5.4. Fast Nanrestoring Division

Discussed in this section are various synchronous methods of fast nonrestoring

division; the nonrestoring division method described in section 7.8 is a particular
case of the group of methods considered here.

5.4.1. General Description of Nonrestoring Division

In general form. the synchronous method of nonrestoring division can be described
as follows. The operation consists of repeating one-type cycles, of which only the
first and last somewhat differ from the rest. During the nut i+l-th cycle of
division in a device, the next remainder 31 +1 is computed:

Buaﬂarr-Uuac. ' (5.4. I)

Here 1+1 - 1, 2, 3, ... is the number of the nut cycle of division; 31 is the pre-
ceding remainder; r is the number system base in which the division is performsdz“

 

* The value of r can also be defined as the number system base in which the
quotient is formed in advance. 52

FOR OFFICIAL USE ONLY
l-‘OR MW'IAI. USE ONLY

c is the divisor and s1+1 is the next digit of the quotient.

Fm (5Jo.1): . .
BJC=2 a,r-'+s,/Hc. (5.4.2)

llrl

Here I: designates the full masher of cycles of division. Thus, the initial remain-
der, i.e. the first of the reminders 31. in which the fornuls (5.6.1) is applied
to compute 314-1 is the remainder no. This initial renainder in the general case

differs fro. the dividend by some constant positive mltiplier h:

I
{@955}. 241,444. .35. (5.4.3)

(II

I
The sun ’I 2‘, a,r". derived in the process of performing the operations in the

l-I

aritlmetic unit. is usslly taken as the result of the division, and the remainder
tern forms, thus, the error of the operation.

Each (i+l)-th cycle of division consists in selecting ‘i-tl and conputing ”ii-1' The
digits of a are selected in the device by certain rules that

include, iniﬂ the general case, analysis of the values of C and B and certain
operations with then. The renainder 31“, as nentioned before. is caputed in
accordance with the relationship (5.6.1). There is also produced sn"ettach-
nent" of the next digit of the quotient ‘i+l to the em for-ed in the preceding
cycles: ' _,

2.4" -

Isl
I

i.e. the value 2 a,r‘+a,:,r"". (5,4,4)

I-l

is formed.

Let us introduce the designation , '
Q=2 a,r". . (53.5)

The value of Q with precision to the renainder tern hk/rkc is equal to 30/0. The
value" of M) with precision to

th/rkc is equal to the sought quotient of A/C:

AIC=h0+hB./HC. ‘ . . . (5.4.6)
The digits at are selected fron sons set xi of pertaigaihle values of the digits:
Is 3.. (.... . h). (5.4.7)
For deteminacy let us asst-1e that
g.<:.< «... H _ (5.4.3)
53

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

It should be noted that the relationship used to colpute I could be written in

another form. For example: 1+1
Randal—QC
or
31+t=f (BI—amC) .
or

Ban-f (B.—a.C)

etc. In the process, the form of notation of the relationships (5.4.2). (5.4.3)

and a number of other formulas changes. However, these translations of formulas
denote only a change in the names of the variables and constants and do not change
the essence of the method of pressure [as published] and its hardware implementation.

The set of values of xi.1 (J - l. 2. ..., m) and the base r are the main parameters
for the method of nonrestoring division. To a considerable extent, they
deter-inc the speed and hardware complexity of the specific variant of the method.

As seen from (5.4.5). the number systaa base, in which the quotient Q is formed, is
the number r, and as digits a1 in the r-mary digits of the number Q. the values of
x11, x12. ..., xi“ are used.

Let us assume for generality that this number system differs from the system in
which all numbers in a machine are represented (and. in particular, the dividend

and divisor). Let us assume that used in the machine is the conventional p-nary
system with the base p and the digits 0, l, 2, ..., p-l.

The derived quotient Q must be translated from the r-nary form (5.4.5) into the
p-nary form

Q.=2d¢rﬂ (5&3)
in which the digits d1 are selected from the set
4:40. I, . . ., p—l). (5.4.I0)

This translation may be done at the end of the operation, however also possible is
the translation of each partial quotient l

zyur4

III
in each i-th cycle (1 - 1, 2, ..., k).

One can note that the relationships (5.4.l)-(5.4.3) also occur in synchronous
restoring division. The characteristic feature of nonrestoring division is precise-
ly the need of translating the quotient from the form (5.4.5) into the form (5.4.9).
In contrast to this, in restoring division, the digits of the quotient are

selected at once from the set (5.4.10).

Since keeping track of the signs of the dividend and divisor and the form of repre-
sentation of negative numbers (sign and magnitude form or two's complement code) in

the machine presents no fundamental difficulties for nonrestoring division methods,

54

FOR OFFICIAL USE ONLY
for simplicity of presentation. let us further assume in this chapter that A and c
are negative numbers}

The first cycle of division nay differ fro. the latter ones by the presence of a
preparatory operation for forming the value of B IA/h, and by the initial transla-

tions of the starting values of the dividend and divisor described in the letter
sections of the chapter.

The last cycle of division say in a particular way differ from the preceding ones
as a function of the requirements made in a given device on the last ruainder hnk.
In the simplest case, the remainder 3k is simply not calculated.

Each remainder 31 must not go beyond a certain range of values. This requires first
that the reminder ten in (5.4.6) be snaller than the penissible error
of division, i.e. that when k is fairly large, this tern become fairly stall. and
second, that each remainder 31 can be forned in acne real device. Thus. the

inequality

Bauh‘Bl‘Basar. (5.4.1 I)

must be adhered to, where Bus: and ”mi are the bounds of the range of permissible
values of the renainder. n Let us note that this requiraent must be
met: .

Bm<t,,C/(r — l). (5.4- | 2’

8.... PﬁC/(r - I).
In fact, if, for example, B.=§,,C](r——I)+I6I. then even when age-=5.
there is derived B.==B.r--=§.C=§..Cl (r—l) +|o|r, In selecting further
02=aa=-~-=¢A=§m we derive Bh=30+'|°|"o . i.e. the

remainders 31 will increase continuously, the r-ainder tern in (5.6.3) will equal
.8. __ B m
"u—c -" 1"” r

and with any large IOI , the value of th/(rkC) will not be able to be disregarded.

But if as a1 are selected not xi“. but other digits of the set, then the renainders

will increase even faster. Sinilarly, the reminders Bid-1’ Bid-2’ ... begin to
continuously increase in absolute value if

B.< _;.C/ 0—1)." '

The ranges of pernissible values of the nagnitudes of the dividend A. the divisor c
and the quotient of ale depend on the amber representation forn adopted in the
nachine and in the general case are prescribed by the inequalities

 

* In reality, representation of negative dividends and divisors in two's couple-en:

code has an effect an the assemblies of the arithetic unit that perforn nomliza-
tion of the divisor. selection of the next digit of 'i-Pl' translation of the
quotient and others.

55

FOR omcm. USP. ONLY
l-‘OII OFFICIAL USE ONLY

aim-silﬂm. (5.443)
thécécmu. (5.4. I4)
(AIC)..<A Ic< (416).... (5.4.15)

vhere an“. an”, CD1“, Cu“. (”Quin and (HQ-ax are CONSTANTS.
5.6.2. Classical Nethod of Division

Let us call classical the conventional method of nonrestoring division [16].
Division by this method is done in the r-nsry number system using the following
set of permissible values of the digits of the quotient:

g=(.—-(r—n. —(r—2), —2. —I. I, 2. r—l}. (MN)

The boundaries of the range (5.6.11) of permissible values of the remainders for
the classical method are the values

[hm-5&1 ('- | ).
B....=§.C I (r— I), (5.4.l1)
i.e. the values of +6 and -C. Thus,
—C<B¢<C. (5.4.18)

The rules for selecting the nut digit a1+1 for any of the division methods

described in section 5.6 can, as will be shown later, be modified someuhat. In

particular, for the method using set (5.10.16), one can suggest different rules.
The most well known of them has been formulated in cork [1!“ p 42] in the following
form: if [3.20(B.<0). then the divisor c is repeatedly subtracted

(added) from air so long as the sign of this difference (sum) is opposite to the

sign of the value of B In the process. the digit a in absolute value is

1' 1+1
equal to the number of aubtractions (additions) made and has a plus (minus) sign.
Let us show that if 31 satisfies the inequality (5.6.18). then the cited rule for
selecting the digit a 1+1 provides for fulfillment of it and for the following

remainder B Let us write the value of r131 in the form rBu=-(M+s)C. where

1+1 °

 

* A more precise formulation would have to be the following: if 890 (EKG)?

then the divisor C is repeatedly subtracted (added) from air so long as the sign of

this difference (sum) is opposite to the sign of the value of Bi or until the
quantity of additions (subtractions) made equals r-l.

56

FOR OFFICIAL USE ONLY
FOR OI-TK'IAI. USE ONLY

H is an integer (~-r<Me<J). and ‘ satisfies the inequality OQ<I

(when 118:, it should be sun-ed that ale-o as required by ($6.18)). The dependency
of 31 and 31+]. on H. realized by the given rule for selection of °i+l’ is shown in

table 5.10.1.

Table 5.4.1.

 

 

-

r r—l IC—(I—I)C=-C
1—! (—I (r—l+s)C—
—(r—l)C-cC
o. |.2.....r—2 n+1 (M+o)C—
—(M+ I) C-—C(I—s)
-(r—l). —(r—2). ... M (M+s)C—MC-OC
....—2.—I
‘-’ ‘0‘" F'+|)C+I’—')c-
-—C(I—e)

 

It is evident from the table that the neu remainder ”1+1 is within the seas range

(5.10.18) as 31 (here and fron new on it is seemed that if rib—90:0,. where
0C is a multiple of the divisor c. then this difference has a plus sign).

Let us assume that the nuahers in a nachine are represented in a conventional r-nary
system using the set of digits

=(o, l. 2. r—l), (5.4.19)

. m. ......
and let us show that one can relatively simply translate the m 20,!"

' into this number systel in each (i+l)-th cycle of division. ...
lal
Let the number 2 ax“. which has in the systu with the set (5.4.16) the

fore 0. am mu.
after translation into the systea vith the set (5.4.19) look like this
I 0. M ”JIM.
i.e. be equal to §‘4"-l+d"-*"-M' Since 30 is greater than or equal

to 0, then a1 is equal to or greater than 1 and therefore after the first cycle of
division, the number 0, al in the nunher systu that uses the set (5.6.16). and this
sane nunber 0, d'1 in the system that uses the set (5.6.19), are written identically,
i.e. d'l-al. After the second cycle, the nunbers 0, ale2 and 0 d d'z are also

1
0
written identically, if '1 is greater than or equal to 0, since in the process. a2

57

FOR OFFICIAL USE ONLY
FOR OFF“ 1M. USE ONLY

is greater than 0. But if 31 is less than 0, then a2 is greater than 0 and
dl-d'l-l and d'z-r+a2. Continuing similar discussions, we arrive at the fact that

if 31 is greater than or equal to 0, then a1+1 is greater than 0, and the translated
quotient after (i+l)-th cycle has the form

0. dad: . . . d.-.d:d'.+u-;0. dud; . . . d,.gd’.a.+¢.

i.e. in this case da=d'h d'l+'="l+|- But if 31 is less than 0, then
a1+1 is less than 0 and the translated quotient is written in the form
0, did; . . . d(.| (d’q—l) (r-Hlm).

i.e. dl=d'r-l. d’u-I==r+am. Thus, Thus, to calculate the sum (5.5.6)
with simultaneous translation of the quotient, all that is needed in addition to a
shift register is a two-digit r-nary subtraction circuit.

Of special interest is the case of r . 2 which corresponds to the widely spread
binary nonrestoring division discussed in section 7.8. A feature of this method is
the simplicity of selecting the digit a1 +1, calculating the new remainder B 1 and

1+
translating the quotient:

if 8120. then m+I-l.dc=d'a-l.d'I+I-m+f-L
01' if Bu<0. then aa+|-—l. d.=ld'¢—I-0, d',,.-r- +au4-l.

If we assume that the (i+l)-th cycle is called the aggregate of the following opera-
tions:

a) selection of s1+1 by the sign of ’1’
b) selection of d1 and writing of di as the final digit of the quotient, and

c) calculation of 81+1-231-81+lc, than it should be stated that lei-l cycles

in all are performed in the division, but the first and last of them are incomplete:
in the first cycle, only 31 is calculated (a1 is necessarily equal to l and do is

not selected), and in the last cycle, only (‘1: is selected (since ‘H—l and 3H1 are

not needed). After completion of the division, the precise relationships between
the dividend, the divisor, the derived quotient and the last remainder Bk have the
following form:

f
if B.>0. then 4-1: Para} 24,244."?
a D

In]

l
0! 1f 8.<o. the" ‘2'”"%="'2"’"+"—0‘:+C.

III

In the division examples given in section 7.8, the constant h was equal to 2.

Speeding up conventional nonrestoring division (r - 2), just as speeding up restor-

ing divisiOn (see section 5.1), can be achieved by making a device for division in
the form of an iterative array.

58

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

 

Shown in fig. 5.6.1 is one of the sinplest modifications of such an array, nade up
of identical elements. Each elenent (fig. 5.10.2) contains a coincidence-type one-
digit binary adder Sn and an EXCIJJSIVB OR elesent that realises the function

c? + Eq and controls the input of the divisor into the adder. The 8-bit dividend
A - no, a1a2a3a6a5a6a7a8, the 5-bit divisor c - co. c1c2c3c‘ and each renainder 31

(in particular, the last remainder is - ho. blbzbabb) are represented in two's con-

plenent code. It is assmed that the dividend and divisor are positive nor-sliced
fractions (i.e. a0 8 co . 0, a1 - c1 - 1). Since 112 is less than or equal to A is

less than 1 and 1/2 is less than or equal to C is less than 1, then the quotient
Q - ql, qzqaqa is a positive nulher lying within the range 1/2 is less than Q is

less than 2, i.e. ql is an integral part of this masher. Bach digit of the quo-
tient q1 is the control signal for the nut row of the natrix that detenines what

operation—addition or subtraction—has to be perforned in this row. Subtraction,

as is evident iron figs. 5.15.1 and 5.15.2, is perforned by forning the two's couple-
nent code of the divisor.

DivisiOn is speeded up in this device, Just as in the device analysed earlier (fig.
5.1.2), not by improving the algorittn for the operation. but by using high-speed
niniature elesents connected by short conductors.

Let us now discuss a nodification to the circuit Just described that allows
achieving an additional increase in the speed of division [6]. The nsin idea of

the sodification consists in eliminating the tine for carry propagation along each
row of the matrix. To this end, first, each renainder ’1 in each row

59

FOR OFFICIAL USE ONLY
POI! OFFICIAL USE ONLY

“no”o:"ng“oaar
~ n-n-n-n-n .
n ai-EQY‘JJ'MW
=Il-ll-ll-ll o

" II v v v v
'7 minim“ ""

, ﬂ-II-II-II- a”

1" $331131?!"
27 ; NWNW«
M m * n5 éuéuén .
5!: a n‘.

"‘5‘ [HE-NB-Nogtgate]

8.553

 

will be computed in the form of two numbers: the number 8. made up of the stepeby-
step sums 33’ and the nunber 3. made up of the step-hy—step carries eJ (the sum of

these two numbers equals the remainder 31), and second. the carry into the sign bit
of the row. the next digit of the quotient and the control signal for the next row
(to add or subtract) will be formed by using a carry advance circuit.

ShOHR in £18. 5.6.3 is a modified iterative array for a 4-bit divisor and an 8-bit

dividend. The array uses three types of cells (A, s and P) and minor complementary
logic.

The operations performed in the i-th row of the matrix (1 - l. 2, ...) correspond
to the operations performed during the next i-th cycle of conventional nonrestoring
division: if q1_1 - l (0), then the divisor c is subtracted (added) from the next

remainder 231_1. In this case, this procedure is performed the following may:

28-1..a. O. - . .2... .s-I‘IH}2B‘ .
2E-c..e.e.. . .0.-. 0 01-:

 
  

‘ . o a C.-. C...‘.
“l'so‘lu'n- - an an '}8 .
5‘ ar..".".. e .0'.-.¢’.-.0 ‘

         

Here n is the number of digits in the divisor.

The divisor is subtracted by adding the two's complement code of the number -c; the

two's complement code is derived by inverting all digits cJ and adding one (q1_1- l)
to the lousorder digit.

60

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The P cells (fig. 5.4.4) contain the logic for advance detenination of the carry
into the sign (zero) hit of the next rasinder. The advance circuit in the i-th

row nust generate the signal

P-D. +R103+ R.R.D.+ ... +R.R. . .. Rum...

where D‘=‘ "I" R,-=s’,+e', are the auxiliary bit functions for origina-
tion of the carry and permission for carry propagation. It is obvious that this
part of the circuit depends on the length of the operands n; for a large length of
n, a multistage carry advance circuit has to he used (shown in fig. 5.10.5 is a
cell, with the use of which the advance circuit will be single-stage only when n
is less than or equal to 3). The P cell in the i-th row of the netrix generates a
carry to the zero bit derived during addition of the nunbers

5’95/3...Sln-|
+
(pelt...€’u—I

   

Pig. 5.4.6.

Key:
1. OR 3. NOT
2. AND ‘. Adder

The 5 cell (fig. 54.4) of the i-th row stars the digits so, eo and co (this am

is equal to 0 or 1 as a function of whether the umber of one‘e song the digits
so, e0 and co is even or odd); the resulting at- is then added to the carry e'o

derived during addition with storage of the carries in the adjacent A eluent

(the structure of this element is shown in fig. 5.6.6). Finally, the result is
susned with the carry obtained in the P eluent. The final sun is the sign bit of
the remainder 31, i.e. the value of U1. The digit qi itself is for-ed by the in-

verter in the 8 cell of the next row.

61

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

As usual in nonrestoring division, the relationship

A/C=Q+BIIM ($615030):
AIC=Q+ (Bs+C)I2‘C wm8s<o).

is observed between the dividend, divisor, quotient and last reminder (in this
case, the renainder 85).

It should be noted that using just one carry advance circuit in each row of a con-
ventional natrix (fig. 5.4.1) would not produce such results; carries would have to
be speeded up in all digits of the ruainder and a large quantity of additional
apparatus would be required for this. It is precisely the combination of forming
the remainder in two-row code and obtaining the advance carry into the sign bit that
allows achieving considerable speed-up of division with Ioderate outlays. It can be
seen from fig. 5.4.3 and 5.4.4 that total operation tine is

"‘(‘A +t'+‘ln-OR )9

where n is the nunber of bits of the quotient; tauA is the delay tine for one A
cell; tauP is the operating tine for a P elelent (here it is assuaed that the

advance circuit is single-stage); and tau!»0R is the delay tine for the EXMSIVE
0R element generating the digit 111.

5.4.3. Graphic-Analytic Method of Division Process Analysis

Before considering the nonrestoring division methods that use sets differing fro-
the classical set (5.4.16), let us introduce into the discussion the graphic repre-
sentations of the zones xi.1 on the plane 31C [15. 17]. These representations allow

us to analyze the connections between the value of r and the structure of the cir-
cuit for selecting the digit a1“.

Let us assume that the bounds of the range (5.4.11) of permissible values of rennin-
ders 31 are the values (5.4.17), i.e. that

"ET «1‘ <34 «=1. 2. .... h). (5.4”)

This means that with given 31 and c. as a1H1 one can select some digit xi
set xi, if

Jfrom the

.c . .
—,‘_ i<8, - t,c < -

r—Il'

i e if
' ° (C QC 5-0 "C
‘r(r.-'Ti')'+T<B‘<7(r-—W+_'_ (5'43"
or
u: (tn—El": (swear. «mac S‘LZ‘LC.
,_-.- - -' ﬁr—"IT ' r— ” '

(5.4.22)

62

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Corresponding to the inequality (5.6.22) is the fig. ‘5‘-“ 5.,
5.6.5 in which on the plane Bic is shaded the zone r —,",',:';:;’/" I.

of. values of the magnitudes of 31 and C with which

(5.6.22) is satisfied. Reflected in the figure is
a certain special case. for which

C...>0. e.<o. 2,0... 75‘.._‘_‘-;‘_I£_ (u—wc >0.

r III—I)

 

Nevertheless, the following presentation is general
in nature.

It is easy to see the correspondence between the fig.
5.6.5 and the terns in the left and right parts of
the double inequality (5.6.22);

— C
the term “707:1,” corresponds to the width of the zone of the digit xi.1

(it is evident that this width is not a function of the value of. xi:I itself), and

.. ' c
the term EVE-{L- corresponds to the horizontal distance between the right

edge of. the zone and the line 61..

And so, if a point with the coordinates of 31, c falls in fig. 5.6.5 within the
shaded zone that corresponds to sane digit :13, then this digit can be selected as
°i+l’ It is evident that for the division process to be realized using acne set
xi of the digits xi), each point within the quadrangle 31761. in fig. 5.6.5 must
enter into the zone of at least one of the digits of the set. For this, on the

plane etc, the zones of the adjacent digits of the set (5.6.7) nust overlap or at

least be tangent to each other. i.e. the shift between zones of each two adjacent
digits xiJ and xi.1 +1 nuat be less than or equal to the width of the zone. Since the

shift between the indicated zones (fig. 5.6.6) is equal to

“l";‘ﬂ’f' then the requirement (£1+I-§;)CI’<(§-£I)CI'('-') Ill” be net, 1.8-

a..-h<(t-—h)l(r—I) (Isl. 2.. . ..m—l). (5.4.23)

Free (5.6.23), one can derive the requirnent of m>r..

In fact , z. _t.<(!. — E.)I(r'— I).
:, —t<(t.—E.)I(r'- I).

s;'—'t.;ee..' Li.ir(r'—'n.
63

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Adding separately the left and right
parts of all of these inequalities,
we get

5- Euéoﬂ-l) (in-“MIU-U.

hence it follows that
my. (5.424)

Shown in fig. 5.1..7 are the zones
of the digits of the set (5.4.16)
used with classical division

(values of 1:11 are indicated in the

upper part of the zones). It is
assmaed that coin - 0. It can be

seen from the figure that the zones
of the digits overlap in such a
way that in the cases of

C(r- -I)(r<8.gC. o<B.<CIr.

—C[r<B.<0. —C<B.<—C(r—l)/r

a certain digit of the set lust be
selected, and namely the digit
(respectively) r-1, 1, -l. -(r-l).

For the cases of
B.-=pclr (pasta, :3. :(r—2n.

which correspond to the bounds of the
zones, one of three digits can be
selected:

:(p-l). 21:9. :!:(o+').

 

In all remaining cases, one of two
possible digits can be selected since
all corresponding sectors of the plane 31c are covered by two zones. Just which of

these digits is selected is a function of the rule adopted for selecting the digits
a .
i

From fig. 5.4.7, we also see that a characteristic feature of set (5.4.16) is that
the zones of the two middle digits (+ l and --1) do not overlap, but are merely tan-
gent to each other. Therefore, in selecting °i+1’ it is necessary to know the sign

of the remainder 81 and consequently. the remainder must he conputed in the niche-

tic unit in the form of one number, i.e. one-row code (the circuit in fig. 5.6.3 is
the exception).

64

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

§.L--------

   

Shown in fig. 5.6.8 are the zones for the particular case of the set (5.6.16) that
corresponds to conventional nonrestoring binary division (r - 2). In this case, the.
zones of the digits xi:I do not overlap (fig. 5.6.8).

The presence of overlap of the zones of the digits xi.1 on the plane 31c reflects the

redundancy of the set xi which leads to the capability of ambiguous representation

of numbers in the number system using the digits xii. This capability. as will be

shown in the next section. in certain cases allows a substantial increase in the
speed of division.

5.6.6. Division Using Synetrical Set of Integers Including Zero

Until recently, in addition to the classical set (5.6.16), only one form of sets xi:
§=(_qs _(q_',s - 0 n —ls 0s In - 0 u 4—]. 4’. (6.4.26)

where q is an integer and satisfies the inequality
r—l

—,-- <q<r — l.

was still being used for representation of the digits of the quotient being formed
in nonrestoring division methods.

The first of the division methods using sets of this fora was the method [18.20] in
which

r=2. :—(-|. 0, +1). ' (5.4545)

65

to: omcuu. use ONLY
l-‘Oll OFHCIAI. USE ONLY

Besides that, a division method [20, 21] was described with the perueters

’21. {q—zl —ID on I. 2}. (5.‘.27)
the method [22] with the parameters

r=4. £=(—3. —2. ~1. o. I. 2. 3) (5.4.23)
and the method [20] with the parneters

In“). §d_7c -6. —5n -4. —3e —2n _'0
' 0. I. 2. 3. 4. 5. 6, 7}. (5.4.29)

In general form the set of the form (5.4.25) was described in work [20].

The sets (5.4.25) when 9 is greater than (r - l)/2 are redundant. In works [18, 19],
there was suggested the method of using this redundancy for set (5.4.26) which con-
sists in beginning to calculate the reminder 3 +1 by formula (5.4.1) in the form of
two-row code in an adder with storage of carried. 1.1:. in the for. of a series of
step-by-step sums and a series of step-by-step carries. This sharply reduces the
time of one cycle and consequently the tine for the whole division.

Shown in fig. 5.4.9 is the arrangement of zones for the set (5.4.26). Redundancy of
the set leads to overlapping of the zones of adjacent digits and allows selecting
a 1+1 based on the simple rule of direct analysis of the high-order bits of the num-

ber 81. With a normalized divisor (1}2<C<l) and a remainder lying within the
range of --C<B.< C. , for proper selection of the digit at”. it is suffi-

cient to know only the four high-order bits of the two-row code of the remainder 31.
If the two indicated four-bit nu-bers are added, then upon obtaining the four-bit
sun 3*1, one can select the digit “1+1 by using a simple table (table 5.4.2).

Table 5.4.2.

'1 'I

"In

0.XXX I I.0XX —l
I.IIX 0 I.XOX -l

The We in the table designate the hits, the values of the digits in which can be

arbitrary. The validity of the rule reflected in the table is confirmed by fig.
5.4.9 fron which it can be seen that since

o<B,_B-,<_}.,

the selection, for example, of 'iﬂ-l’o when I; - 1.110 (i.e. -l/4) cannot lead to an

incorrect result of division since all remainders

-++o<s,<-T'++

'IM

 

 

 

 

 

 

irrespective of the value of c lie in the zone of the digit 112-0.

66

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

The solid vertical lines in this
figure divide the zones of operation
of the decoders that select the digit
a1+1 (in the process it should he

assumed that the value of B: is
plotted along the axis of the
abscissa): left of the line AB is
selected a1+1- -1, between AB and the

axis of the ordinate is selected
a1+1-0, and to the right of the axis

of the ordinate a1+1-+l is selected.

This confirms the evident idea that
the bounds of the zones of operation
of the decoders must pass within the

sectors of overlapping of the zones
of the corresponding digits xij.

 

Shown in fig. 5.6.10 are the zones of the digits xiJ for another of the sets sen-
tioned-(5.4.27). It is evident fron the figure that if a1+1 is selected through

direct analysis of the remainder and divisor. the decoders of the digits in this
case must be substantially more complex. First, it can be seen that in addition to
the remainder 31, the divisor C should also be analyzed since within the sector of

overlap of the zones for the digits 1 and 2, a vertical line cannot pass from the
line EL to the line P6. Second. it can be seen that a relatively large number of
bits of the numbers B and C must be analyzed. In fact. let us assule for simpli-
city that 31 is calculated in the for: of one-row code. The decoder of any

digit xij can be represented as several AND circuits whose outputs are logically

summed in an on circuit. Several hits of the nunbers B and C are fed to each AND
circuit. In the process, for each such AND circuit on the plane 3 C there are one
or more rectangles whose sides are parallel to the axes of the coordinates.
The rectangles corresponding to all the AND circuits of the decoder of acne digit
xij must fully cover over the plane of sic of the sectors. the right and left

bounds of which in the process are made up of the "stairs," which'nust he posi-
tioned within the sectors of overlapping of the zone of the digit xij with the two
adjacent digits of the set xi. Shown in fig. 5.4.10 is one of the possible
subdivisions of the plane into zones of operation of the decoders. It is evident
that the more "steps" the bounds of its zone contain. the more complex the decoder
turns out. hence it follows that the lore complex the decoder, the narrower the

sectors of overlapping of the zone of the digit xii with the zones xij_1 and xi1+1

and the greater the slope of the sectors of oVerlspping.

For the set (5.6.25) with given r and q, the sectors of overlapping of the zones of
the extreme pairs of digits (xi1 and x12. xi._1 and xi.) have the laxinal slopes.

The width of the sector of overlapping for the set (5.6.25), as seen from fig. 5.4.6.
1‘ ”"31 ‘° «e—mc (rm-mg 21—'+|)' c.

r(r-—l) I __'("'

67-

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

With a given 2. the greater q is, the greater is this value. The maximum value
(when q - r—l) is C/r. But even with maximal q. the number of steps in the stairs
increases rapidly as the values of r become larger. This follows from the diminish-
ment of the width of the sector of overlap equal to Oh; the width of the whole
range of remainders when q - r-l and variation of r ruaains constant is:

‘4'.” SIC...

!— r—I my

It is easy to show that for other types of sets xi too when the method of selection
of a 1+1 by direct decoding of 31 and c is used, the decoders become lore complex

(under otherwise equal conditions) as r increases. The quantity of m decoders also,
naturally, increases since I is greater than or equal to r.

In work [23], a division method with the parameters "=2. §=I—2. -l. 0. +1. +2}

was suggested; in this method. the remainder B + is computed in the form of two-row
code, however these two rows are not made up by atep—by-step sums and carries
of a conventional binary adder. The remainder Bid-l is formed in the redundant

binary nmber system (r - 2) with permissible values of the digits -1, 0 and +1.
The remainder is coaputed with high speed since there is no carry propagation in
doing so. But due to the increase in quantity of permissible digits in the set xi
and the complexity of the input circuits of the adder associated with this. this
method apparently has no advantages compared to the methods described in [16. 19].
Another method for selecting the digit at” was suggested in work [20]. It is based

on an analysis of the signs of the approximately computed diff:rences
Bt-MIC (Ia-l. 2. ..., m—I)

where H1 are some constants. For example, for the set (5.4.27). the differences
are computed

3‘4. 34:, 3,4. ;.c, a, -%c. a, — 3—,c (5.4.30)

Given in fig. 5.4.11 on the plane sic are the straight lines. the equation of which

corresponds to the differences (5.10.30) computed for selecting of the digit of the
quotient when the set (5.4.27) is used. The sign of the difference is indicated by
the side of the corresponding straight line on which the point with the coordinates
31, c is located. It is evident that the quantity of constants H3, actually, must

be equal to m-l. each line Iii-ﬂjc must pass within the sector of overlap of zones

of the digits xi-1 and “1+? and the digits “1+1 themselves must in the process be
selected by the rule (let us seems that M|<M1<...<M,._.):

alH=En 1f 31—M.C<0.
alu=Em if 31—“.-.030.

am=5,. 1f [B'—MIC<0'
8‘ —MI-‘C>:0.

68
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

It also follows from the figure that
the error in computing the difference

81 - Hjc must not exceed the distance
between the line 31 - njc - 0 and the

boundary of the sector of overlap of
of the two zones within which this
line must pass.

Since m is greater than or equal to r,
then in general as r increases, the
quantity of the differences of

81-Hjc increases; in the process, the

apparatus difficulties and the time I
needed to select the next r-nary digit '3
of the quotient increase accordingly.

 

In [24]. a method was suggested that

allows achieving addition speed-up in

nonrestoring division when the set

(5.4.26) is used with computation of 31+1 in the form of two-row code. It was sug-

gested that a matrix of one-digit adders be used. in each stage of which there is
determined the next digit a1+1 and the new remainder Bi+1 computed. The gain in

speed in the process can be very great. In fact. when one n-bit adder is used to
compute the two-row code of 31+1, the transmission of the preceding remainder from

the outputs of the adder to its inputs (with simultaneous shift by one position to
the left) with the use of flip-flop registers or delay lines may take no less time

than the computation itself of the new remainder. The matrix of adders in such a
device may also be used for multiplication.

With small values of r (for example, when r is less than or equal to a) and two-row
representation of the remainder, the matrices of adders can evidently be used also
for division with other sets of permissible values of the digits of the quotient.

It follows from relationship (5.6.2) that an increase in the value of r means in
essence a proportional increase in the speed of division (assuming the cycle time
remains unchanged). For example, one, two, three or four hits of the quotient are
determined at once within one cycle when r - 2, 4. 8 or 16 respectively.

The main and essentially sole obstacle to increasing the value of r used in division
is the apparatus complexity (or greater inputs of time) for selecting the next
digit a1+1. In this and the preceding sections, three main methods of selecting

a were described:

1+1
1) repeated subtraction (addition) of c from r31 (for classical division);
2) approximate computation of auxiliary differences of type Bi’“jc3 and

3) direct decoding of the values of Bi and C.

69

FOR 0511ClAl.US£1)NLY
FOR OFFICIAL USE ONLY

Significant increase in time losses or apparatus complexity of the circuit for
selecting a1+ as r increase when the first two methods are used are evident, since
as r increase , the quantity of digits in sets (S.b.16) and (5.4.25) is increased,
and consequently, the number of addition-subtraction procedures increases for both

methods. The increase in quantity and complexity of decoders for selecting a1+1
with direct analysis of Bi and c has already also been mentioned.

Division methods with large values of r will be covered in the next section of this
chapter. In these methods, direct analysis of B and C will be performed in

selecting a1+1. It should be noted that if the 1remainder 31 is formed in the form

of two-row code, then the "staircase" of the decoder must not approach on
the plane 31c closer to the right boundary of the sector of overlap than the dis-

tance corresponding to the maximal difference between the part 3* of the remainder
being analyzed and the precise value of the remainder B . This distance therefore
must not exceed the width of the sector of overlap and even must be substantially
less than it, since otherwise the quantity of "steps" and decoder complexity associ-
ated with it may increase intolerably. With large values of r, decoders of digits
become complicated (even with one-row code of the remainder). The presence of two-
row code of the remainder owing to the indicated circumstance complicates these de-
coders even more since it leads to an additional increase of steps in the "stair-
cases." 0n the other hand, if there are entered in the inputs of the decoders not
the digits of two-row code, but the outputs of an additional adder that adds several
high-order bits of the two-row code (this is done to simplify the decoders), then
the requirement to reduce the maximal difference between 3* and 3 leads to the
necessity of increasing the length of this adder, which in turn réduces the gain in
speed. Therefore, as well as to facilitate the subsequent presentation, let us
assume that B. is computed in the form of one-row code, although the methods to be

presented subsequently are also applicable in the case of two-row code of the
remainder.

5.4.5. Generalized Method of Nonrestoring Division and Investigation of It

Do cribed here is the synchronous method of division suggested in 1966 [17] whose
main feature is the capability of using large values of r while affording high speed
in selecting digits of the quotient a1+1. This method has permitted, in particular,
development of an arithmetic unit that performs division in the number system
with the base of r-16, i.e. that determines within one cycle at once 6 binary
positions of the quotient [15].

It was shown in the preceding section that an attempt to seriously increase the value
of r leads to considerable complexity of the circuit for selecting the digit ‘i+l'

Let us show that a method of selecting a1+1 based on direct decoding of 31 and C

can nevertheless permit switching to considerably large values of r if other sets xi
are used in the process.

This capability is based on the following idea. Since when the set with equally
spaced digits xijis used, the decoders of the individual digits :1} become more com-

plicated as the absolute value of xi.1 increases because of the increase in slope of
the boundaries of the zone of this digit on the plane 31c. then we should switch to

70

FOR OFFICIAL USE ONLY
FOR OPHCIAL USE ONLY

those sets in which the overlap of zones of adjacent digits increases as the abso-
lute values of these digits increase. In the process, the increase in slope will to
a considerable extent be compensated by the increase in overlap so that the quantity
of steps in the "staircases" will not increase rapidly. In other words. we have to
switch from sets (5.6.16) and (5.6.25) that contain only equally spaced numbers to
sets that do not contain equally spaced numbers. The possibility of this solution
is concealed in the inequality (5.6.23) which is the sole limitation imposed on the
difference between the adjacent digits of the set xi and which permits with given
xi1 and xi” including in the set xi any real numbers that satisfy this inequality.

But on the other hand. expanding the overlap sectors leads to an increase in the num-
ber of digits in the set xi which increases the quantity of divisor multiples to be
generated and complicates the input circuits of the adders that compute 31+1. The

optimum (under which the total apparatus of the circuit for selecting ai+1, the cir-

cuit for computing 31+ and the circuit for translating the quotient is minimal) de-
pends on the element s stem used. Therefore, here we can restrict ourselves to Just
a general consideration of the fact that in realizing this method, the overlaps of
the zones of the middle digits of the set xi must be, apparently. less than for the
set (5.6.16) since the decoders of these digits are very simple and they can be made
somewhat more complicated, having obtained as compensation a reduction in the quanti-
ty of digits :1 , but for the extreme digits of the set, the overlaps must be larger
than for the set 5.6.16), although in the process the number of digits in the set

xi also increases.

Before moving an to a discussion of the concrete sets xi, let us clear up the limi-
tations imposed on the extreme digits of these sets, i.e. 0n the values of xi1 and
xi .

II

Let us note that the quotient of B /c is found in the range that depends on h and
on the range (5.6.15) of the quotignt of A/C:

7'7 (”3)“.= (PC. )nls < 9c!- < (€69-1ng 62).!
(5.4.3:)

0n the other hand, 30 must satisfy the inequality (5.6.20). After substituting
A/h . no in (5.6.20), we obtain the requirement

inc/(r—I)<A/h<t..c/(r—n. (5.4.32)

which together with (5.6.15) defines the relationship between the constants h, nil
and xi .
m

Let us consider first the case when (A/C)"n-0 which occurs when the numbers are
represented in fixed-point form. It follows from (5.6.32) and (5.6.15)
that in the process the values of ril and 31' must satisfy the requirements

{“30. (ﬂ433)
in) (A/Chul (""l ) ”I. (53.34)
71

FOR 0F11C1AI.US£10NLY
FOR OFFICIAL USE ONLY

Of course, one can assume that xl and xi are given (and hGEO) and Instead of
inequality (5.4.34) derive from (5.4.32) and (5.4.15) the inequality that imposes a
restriction on the constant h:

.Ig>(A/czmgr—I)le. (5.4.35)

Let us now consider the case when (Alc) is greater than 0 which corresponds to
representation of numbers in floating-psigt form. It follows from (5.4.32) and
(5.4.15) that in the process there can be selected both the value xi is less than
or equal to 0 and :1 is greater than 0. If xi is less than or equil to 0. then
xi. must in design b3 selected on the basis of iequirenenc (5.4.34) or, which is the
same, h must be selected based on (5.4.35). If xi is greater than 0. then from
(5.4.32) and (5.4.15) there must be derived the re irement

(A I0)... (’“I ) fin-<06
<=(AIC)-n(r-4)I§u (5436)

One can assume that (5.4.36) indicates the permissible bounds for h with given xi¥
and xi . One can conversely assume that the value of h is given and the paramete a
x11 and xiIn are selected with regard to the requirements

as (Ale)... (r—n/h;
§m>(A/C) an: 0—1) ”I. (5.4.37)

It can also be seen from (5.4.36) that when x is greater than 0, irrespective of
the value of h there must be met the requirmen

:./§.>(AIC).../WC)... (5.4.33) '

Let us illustrate the meaning of inequalities (5.4.37) and (5.4.38) in the example
of division of the mantissas of A and C of numbers represented in floating-point
form. In this case

N<A<M. N‘C‘M. (5 4.39)

where H and N are constants. and N>o. In the process
”MKA IC<MIN. '(suo)

i.e. the requirnent (5.4.38) in this case has the form
£~RI>(M/N)'.

In fig. 5.4.12. the shaded zone PRST shows the permissible values of A and C. and
in fig. 5.4.13, zone EFGL shows the permissible values of the quantities C and 31.
When

E. -- lN/M) 0-4 I lit. {.- -- (M/N) (1—!) lb.

i.e. in the case of the "boundary" meeting of the requirements (5.4.37) and (5.4.38),
the square PRST after substitution of 30-A/h is transforned into the shaded rectangle
on the plane 3 c. It is evident from the figures that violatiOn of any of the

inequalities 1 (5.4.37) leads to the shaded rectangle in fig. 5.4.13 starting to

go beyond the limits of the zone of permissible values.
7

FOR‘OFFKJAL.USE(NVLY
FOR OFHCIAL USE ONLY

It should he noted that both approaches taken (with the one, it is seemed thst ti

and xi. are given, while with the other, that h is given) differ only uthodologich-
1y.

 

In considering the relationship between h and :11 and 31., it should be noted that
the accepted relationships (5.4.1) and (5.b.3) permit ambiguous description of
the same nethod of division. In fact, the process of dividing the dividend A by the
divisor C using the set xi of digits xi with a certain constant h and reusinders 31
lying within the range (5.4.20) described by the relationships (5.4.1) - (5.1..3).
(5.4.7), (5.4.8). (5.6.11), (5.6.13) - (5.6.15) and (5.5.20) will as before be de-
scribed by these relationships if instead of h, xi and 3 (including 30) we will
consider the values of h/phi. phi xi , phi B where phi is any positive constant.

Thus, for example, the division .ethld defined by the relationships

m. t-{.-2,__..;.. o. ..; 2};

l 2
o<.4gl; a: <C<I; --5-c<8,<-§-C; h-4.
and the method

I I
v-4; l— {—4. 4-7, 0, 27, I};

I
0<A<l; 2-<C<l; —-;-c‘s,<—:-c; use
are the sane sethod inplenentable by the some apparatus.

To achieve uniqueness of description, we shall from now on notste the set xi, as is
essentially done for the sets (5.4.16) and (5.6.25), in such s vey (i.e. select that
constant phi) that. first, all values of xiJ are integers (this is possible since
we are dealing uith rationsl numbers of xiJ ) end second. that the greatest co-son

“V1”: of the numbers °£ ‘11 13 “081 to one. Consequently. the example Just
cited should be written as follows: --.

"Wt-(~10. -9. o. 9. Is); _
I Is lo I
0sA<|i "f<C<I; —-5-c<8,<—3-C; k-T,
(5.4.0)
73

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

   

 

_E
L «t. ._ _ ___-_‘c’_. -_.__ZJ.'£
_Icglsxl 0 _ncnlss
r I r-t
Fig.6AJ4

 

Fig.6.4J5

Let us nave now to a consideration of some sets of xi with a variable "step" between
the digits of xi . The set (5.6.61) is the first of these examples. the arrange-
ment of the zone ofdigits on the plane 31c for this set is shown in fig. 5.6.14.

It can be seen from the figure that thanks to the variable "step" between the digits
of xi , the width of the overlap sector between zones 9 and 16 is wider than between
the zones 0 and 9. After comparing figs. 5.4.14 and 5.6.10, we see that the over-
lap of zones 0 and 9 is less than 0 and 1, but in return the overlap of the extreme
zones 9 and 16 is larger than 1 and 2.

76

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Another example of a synetrical set with unequal positioning of the digits is
show in fig. 5.6.15 for the case r - 16:

;={—-3o. —29. —2s, —27. —26. —25. —24. —23.
—22.—2|,—19.—l7.—-l5.—l3.—Il,—8.-5,
—.2, 2. 5. s, u. l3, l5. I7. 19. 21.22,
23. 24. 25. 26. 27. 28. 29, 30). (5.4.42)

To simplify the figure, the zones of the negative digits are not above fully.

The number of steps in the ideal "staircases” separating the zones of adjacent
digits of the set are indicated in the little circles in this and acne subsequent
figures. By convention a staircase is said to be ideal when all angles are tangent
to the bounds of the overlap sector, i.e. a "staircase" that has the ninimal number
of steps. These values per-it evaluating the complexity of the corresponding
decoders that select the digits of the quotient.“

The maximally per-itted number of steps in the "staircase" is a function of the
el-ent system, the speed required and other circmstances. Let us asme, for in-
stance, thst there should be no sore than 5 steps in ideal "staircases."

Despite the considerable overlapping of the zones of the extreIe digits of the set
(5.6.52), the umber of steps in the ideal "staircases" is still large—up to 7
steps. It can be seen fron fig. 5.6.15 that a further increase in overlap of the
zones cannot yield a substantial decrease in the nuber of steps. In fact, no
matter how snail, for example, the difference xi.-'xi._1. the ”staircase" between

the zones of these tuo digits will still contain at least 6 steps. but even 6
steps, as stipulated above. is too nany. Let us ermine a neth of countering
this difficulty.

A more precise foraulation of the rule for depicting

the "staircase" is desirable for further presentation.

i.e. for the boundary between the zones of operatiOn :
of the decoders of two numbers of the set xi on the

plane 3 c. Refinement concerns the points belonging

directly to the very sections of the lines forning

the "staircase." The rule is explained by fig.

5.6.16. The arrows indicate vhich zone-right or

left--the points situated on the sections of the

"staircases" are considered to fall in. Points of

the plane that are located outside the "staircase"

itself on the right or left of it fall, naturally, '
in the right or left zones. As indicated earlier, Piss E4J6
the "staircase" that separates the zones of opera-

tion of the decoders of the two adjacent digits xij

and xi1+1 of the set xi aust be located vithin

 

* It is noted that after work [17] appeared, the suggestions on using graphic plots
of the zones of the digits of the quotient on plane sic and on astisating the apps-
ratus outlays for the circuit to select the digits of the quotient by the number of
steps in the “staircases" (admittedly. only for sets (5.10.250) were also made in
works [22, 25 and 16].

75

FOR OFFICIAL USE ONLY
FOR OFFNJA1.US£13NLY

the sector of overlap of the zones of these two digits, can touch the bounds of the
sector of overlap, but must not go beyond then.

 

Fig. 5.4.11 Pie. 5.44s

Fran now On, we will follow this sane rule in depicting the zones of digits in other
coordinates.

Let us now show how the decoders that select the digits of a1 can be simplified.
Let on the plane BC eshown (fig. 5.6.17) the zone BIGL of pernitted remainders
and divisors. mibounds of the zones of the individual digits of xi are straight

lines whose equations are written in this for. J
BIS-KC,
where
“arm-+4
fur the right boundary of the zone of _§ and
K- £-
r(r— I "Pg.

for the left zone.

Let us show this entire system of lines in a new system of coordinates, in which
on the axes are plotted the values of 8 -HC and C (fig. 5.4.18). where H is a posi-

tive constant. 0n the plane B C (see fig. 5.6.17), corresponding to the value of H
is the line 06' with the equat on

Br—I!C==0.

The quadrangle EFGL "moves" fro. plane 31c to plane si-nc, C in such a way that the
sections PG and EL keep their length. The sane occurs fro: the zone of any digit
of xi neither its width (with a given C) nor the width of the overlap sectors
changes. But the slopes of the boundaries of all the zones change. In particular.
the slopes of those zones which in fig. 5.b.l7 were located on the right of oc' or
on the left of 00', but closer to OC' than to DC. change in such a way that the new
"staircases," drawn for these zones in the new systen of coordinates, have fewer

76

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

steps than in the old syste-

(it is assmed that each of the
segaents of the lines that nice up
the "staircase" is parallel to one
of the axes of the coordinates).
One can similarly draw in fig.
5.10.17 on the left of 00 another
line DC" with the equation

—B.-—I‘IC=0.

 
   
 

so that in the third systa of
coordinates obtained, -3 -nc. C,
the left zones of the di its of
xi‘1 occupy a favorable position.
As an example, the zones of the
extreme digits of the set (5.4.62)

I
shown earlier in fig. 5.10.15 are : u 3
shovn in fig. 5.“.19 in the system 'u 7"“?
of coordinates B, __ 72’ C. C. . 0 5:5: 44.."

It is seen fron the figure that
the nunber of steps has been
sharply reduced in the ideal
"staircases" for the digits of I3, l5. l7. 19. 2|, 22, 23, 24. 25. N. 27. 28, 29. 30.

918. 5.419

—l3. —l5. .47. —19, —2I. —22. 43. —24. 45.
The zones of the negative digits .-26. _27. —28. __29. _30

occupy precisely the sane position on the plane 3
_ Bl - '2' Cs 0

It follows from what has been said that if in a device for division.shat uses set
(5.4.1.2), except the rauindet 31, the differences 3‘_-;.c, _s,--.2-c

are conputed and the decoders built to select digits 13. 15. 17, .... 30 by decoding
the high-order positions of the values of ‘8 '3 C C

1—7 s s 3
the digits -l3, -15, ~17. ..., -30 by decoding the values of -B:— 70- C

and the digits -8. -S, -2. 2, S and 8 by conventional decoding of 31 and c. then the
decoders of the extreme digits of the set will be significantly sinplified.‘

Since there are now rather feu steps in the "staircases," it is advisable to reduce
the number of digits in the set xi, which in a nuber of cases can yield a substan-

tial gain in apparatus.

_._—_———-——

* ’zcoders like the others cannot be buth for the digits +11 and -ll; these digits
can be selected by the following simple rule: a...'-'+II'"(—il). if Ba>0 (B.<0)

and no other digit of the set xi is selected in the process.

77

FOR OFFICIAL USE ONLY
m omcuL use ONLY

The set in question. (5.4.1.2). can be re- (9 Q
placed. for exanple, by the set

t=l-3o. —27. —24. —-in, 413. —16. ~14,
-—l2. —n, —9. —7. —5. —2. 2. s. 7. 9.
u. 12. I4. I6. 18. 2:. 24. 27. 30). (5.4.43)

the arrangement of zones of which on the
planes

rm; 1:,— -3. c. c; — 13,—} c. c

 

is shown in figs. 5.0.20 and 5.6.21; in i
fig. 5.4.21, two identical figures are :

inposed on each other: one for the zones ._.. .__¢___._._‘.
c‘ positive digits in coordinates ’ h

8, —— -2- C. C. Fig. 5.4.20

and the other for the zones of
the negative digits in
coordinates

-n,.-.; c. c.

The digits ‘11, -9, -7, -5. ‘2’
2, S. 7. 9 and 11 can be
selected by direct decoding of
the values of Bi and C; the
digits 14. 16, 18, 21, 26, 27
and 30 by analysis of

B,—%C and c

and the digits -30, -27, -24,
-21. -l8, ~16, and -14 by
analysis of

_Bl— :6 and C

 

puma:

It is seen from the figures
that in the process, all ideal
"staircases" contain no sore than four steps. The digits ~12 and +12 can be
selected by s rule sinilar to that given earlier for the digits +11 and -11 of the
set (5.4.42).

Let us consider the question of the quantity of binary positions in the supplenentsry
adders that compute the difference of the type 131-86. There is no need for these
differences to be computed precisely. In these adders, it is sufficient to pro-
cess the values represented by several high-order positions of the numbers I . BC.

However, in the process, the rules for designing the decoders of the digits 1xij

78

FOI:OFFNJAI.USEGJNLY
FOR OFFICIAL USE ONLY

and the rules for drawing the "staircases" vithin the sectors of overlap of the
zones of the adjacent digits of the set must be changed in a suitable way.

Let 2' u 2" be the weights of the high-order and lav-order significant binary

positions of the adder that coaputes the difference of the type 13 -ac. Let .us
assune that the negative numbers -nc enter the inputs of the adder in inverse code
and that there is no ring carry circuit in this adder. Let us also stipulate that
the positive and negative numbers at the output of the adder are represented in
sign-and-nsgnitude code and complement code

(complement with respect to 2&1). The approximate nunber 331-86. obtained at out-
puts of the adder will be designated in the form Q3140). in contrast to the pre-
cise number ini-uc.

The values of Bi and ac can be represented in the following fora:
8.-K.2"+B. Hc-K92"+v.

where K1 and K2 are integers, K2 is greater than 0. and beta and ganna satisfy the

inequal ities
0422'. o<v<2'.

-liC. Since this differ-

First let us consider the computation of the difference of 31
it can be assumed that

ence is used to select at”. only when 31 is greater than 0,

the number Bi is positive and represented in sign-and-magnitude code. Let us also
assume that the number 81 is in some register 3. The high-order digits of the num-
ber 31 go from the register B into the adder of all-ac also in sign-and-uagnitude code.

The precise difference of 31-86 is B.-IIC-(K.-K.)2-'Hp—q).
as
In the adder in the process are added the numbers K3" and (enl-Ka-I—‘a-r) .

If K1 is greater the“ ‘2' ‘t the output. of the adder is obtained the negative
number (s.-IIC)°- (K.—K,)2-'- -2-'.

If K1 is less than or equal to K2, then obtained at the adder outputs is the amber
2' . '--- (K.—K.)2-'—2 '-

which co responds to representation in the complement code of the negative number

(8.—-IIC)'- (K.-K,)2' —2".

In both cases
o<a.- IIC—(Bn—IIC)'—2"+(H)(2-2“. (5.4.44)

3*
Since the maximal value of 31 13 - l.C-u(r—l).

the require-eat avtu>:-c.",(,..">3¢ must be satisfied.

79
FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Consequently, the nunber B 1-uc lies on the nuneric axis to the right of the nunber

(B 1*-HC) at a distance less than the value of two one' s of the low-order position

of the adder of 31-80.

Let us now go to the adder of 431-80. Since this adder is used when 31 is less than
0, let us some that K1 is less than 0. The precise difference of 41-80 is

-—s.—Hc- (—K.-Ka)2"—(ﬂ+r)-

Let us also asstne that the number 31 is represented in register 3 in conplaaent
code:

2m-IBd-2M+K.2-I+p

and that the high-order bits of the register 3 are inverted prior to transmission
to the adder of 41-110.

The numbers (2'“---2"'—K.2"-—2")=- (- -K.2"—2") and (2'“-K’2‘""') “

are added in the adder.

If —K.>«K.+2 , then at the adder outputs there is obtained the negative
number -(—D.-IIC)'n.(—K.-Ka)2"-2'9"-

If Ku<Ka+| , the addition result is 2'“-(Kn+K.)2-u;2.2-n'
which corresponds to the representation in conplaent code of the negative number
(—s.—IIC)°-(—x.—K.)2-I—2-2-I.

In both cases
0<Ba—I‘IC- (B.—IIC)'nR-z-L.(p+y)‘2.2-a.

i. e. again the nunber ~81-HC lies on the numeric axis to the right of the nunber
(-Bi-HC)* at a distance that does not exceed the value of two one' s of the low-order

position of the adder of 41-110.

Steming fron what has been said and from fig. 5.5.16 is the following rule for con-
structing "staircases" within the sectors of overlap of the zones of the digits xi

on the plane [Bil - ac. c: "Staircases" aust not go beyond the left boundary of J

the overlap zone and lust not approach closer to the right boundary than the distance
equal to the value of one one of the low-order position of the adder of 331-30.

 

Since the maxi-um value of In” when 31 is less than 0 is ltulcuulU—l).

then 2'") "dean/0'4)».-

so

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

when necessary (for exanple, with snall overlapa of the zones of the digits of X15)
one can compute several differences of the type int-ac with various constants a;

each of these differences can be used to construct decoders of a certain group 'of
digits of xii.

One fine point should be noted in the interpretation of the graphic depiction of
the zones of the digits and the zones of operation of the decoders in the coordi-
nates [31. 418, c: the digit zone boundaries are represented on the asamption

that the precise difference of In!" -3c is plotted on the axis of the abscissas,

and the decoder operation zone boundaries are constructed on the «eruption that*
the value derived at the adder of [81' ~80 outputs, i.e. the value of (”1| -ac) ,

is indicated on the axis of the abscissas.

Usually the assenblies of a device for division are substantially simplified with
a symetrical set of xi (i.e. if xi.1 - dun-3+1; j - l, 2, ..., n/Z with even Is;

1 - l, 2, ..., (rm/2 with odd I). In particular, one canon decoder as shown in
fig. 5.4.22 can be built for the pair of synetrical digits of x13 and “in-144'

The signals +8 and -B are the output signals of the
sign bit of register B, i.e. +B-1 when 31 is
greater than or equal to 0, and --B-1 when 3 is less
than 0. If the set xi is symetrical, then the
assesbly for coeputing 81+ and the assesbly for '5
translating the quotient a e also simplified.

   

Decoder

The use, described in this section, of approximate
differences of the type of 18 41c differs essentially
from the use of siailar diffefences described in Fig.6.422

work [20] (see section 5.4.4). There the approri-ate

differences were coaputed only to detersine the signs

of these differences and the quantity of differences

to be computed increased rapidly as n increased. In our case, the difference of
(131-ﬂ6)* is needed to construct decoders; therefore, not only its sign is used,

but also its nagnitude. The quantity of differences is not large: even for n . 20-
30, it is sufficient to compute two differences of the type of int-ac.

Let us discuss briefly the problas of detecting overflow of the quotient that occurs
during division of fixed-point numbers.

Up to now in this chapter, we have seemed that the dividend A and divisor c are
within the ranges (5.4.13) and (5.6.14), with chin greater than 0. However. during
division of fixed-point numbers. the

true dividend A‘k and divisor c’ are located in the range
Kd‘zsk. Kc'sk (5.4.45)

a a
and therefore before beginning the division. A and c must be translated into A and
C. In the process. the ratio of these two values must be preserved.

81

FOR OFFICIAL USE ONLY
H)" OFF" 1:“ INF ()Nl \

An overflow signal must be generated if the quotient uceeds the value of B. This
may occur both when C*-0 and when c* f 0. The first situation causes no apparatus
difficulties. Let us consider in more detail the case of 6* f 0.

e n
The simplest implementation of the procedure for translating A and C into A and C

is the normalization of the divisor c* and the same shift to the left of the
dividend M:

A up'A‘. C =p’C‘. (5.4.46)

Here p is the base of the number system used for number representation in the na-
chine; f is the number of zeros before the high-order significant digit in the
n-position number 6*. It is evident that if 6* i 0. then '

0<I<n—l. (5.4.47)

*
Let us assume that A and 0* are translated into A and c by using normalisation.

An overflow can be detected by various methods. For sample. the following method
can be used. Since C is less than or equal to R. let us compare A and 32. If

A>R’. (5.4.43)

then let us assume that an overflow occurs. But if A is less than or equal to R2,

this does not mean that there is no overflow.

Let us require that fulfill-ant of the inequality

u.<e..cu./(r—l). (5.4.49)
be automatically provided for when A is less than or equal to 32. Since in fixed-
point division, (A/C).1n-O. then xi1 is less than or equal to 0 and therefore ful-

fillment of the inequality (5.6.b9) means that the point with the coordinates 30, c
lulls on the plane Bic in the zone of permissible values. Since we now some

that A is less than or equal to 32. then, after substituting 30-A/h-leh in (5.10.109).
we obtain the requirement

1: >R’(r-— I "Cut... (5.4.50)
Shaded in fig. 5.4.23 is the
rectangle on the plane AC, in
which the point with coordi- c
nates A, c may he found, and sum

the rectangle on the plane
31C, in which the point 30,6

 

may fall when 5-i- |
I
= 2 —
II R (r ”(G-.5... a n ‘
82

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

Thus, the constant h should be selected vith regard to requirasent (5.4.50). in
the process. division will be correctly performed for all k cycles (i.e. all 3
will be found in the range of permissible values), after which will raisin out}
checking the inequality .n. - . __._____

hQ>R. I win)

the fulfillment of which sh‘mld be evaluated as an indication of overflow.

An example of application of this neth of overflow detection will be described
in section 5.4.6.

5.6.6. Example of Realization of Generalized Method of Nonrestoring Division

Let us briefly consider the structure of a device for division built on the basis
of results presented in this chapter.

The division method implemented in the indicated aritI-etic unit and the unit it-
self have the following parameters [15, 17]: p . 2. n - 28. point is fixed in
front of the high-order position, r - 16. h - l, k - 7,

(.4030. —29. -2s. —27. —26. —24. -!2. -l9. —I0. —|3.

-- - - —2. . Io.I3.I6.19.22.24.as.21.a.29.30).
'0' 8' 5' 2' s 1‘ (6.4.62)

It is evident that n - 1 - 2‘28 and therefore the initial dividend'Af and divisor

e
c are located in the ranges
‘ w'alé'z-ﬂ. «act—r-

at
(the case of c -0 is not considered here).

After normalization of the numbers A. and c‘. the values of A and C are located in
the ranges ‘

«new—24. 2-‘(6‘1—2'“.
Le. Cull-‘2". CDII-"‘2-u.

If A is greater than or equal to l, i.e. if A is greater than 82 + 2"28

overflow signal is generated. It is evident that in the process,

A‘IC‘ is greater than 1. But if
“‘14”. 2"<C‘I-2"',

, then on

then division proceeds correctly for all 7 cycles since the selected velue of h
provides for fulfillment of the inequality (5.6.69).

At the end of the division operation. a check is made of the inequality (5.10.51)
which in this case has the form

h0>l .

83

FOR OFFICIAL USE ONLY
FOR OFF“ I“. USE ONLY

to “535 ~ ’Is
5: ....§5:E 2 ﬁe!
: r ====neeee u Mme.

 

P13 . 5.4.24

If hQ is greater than or equal to 1, then an overflow indication is also generated.

The range (5.4.20) of permissible values of remainders 31 has the form
-—2C<D«<2€.

The middle digits of the set xi (digits -8, -5, -2, 2. 5 and 8) are selected by
using decoders that analyze the high-order positions of the values of 31 and C.
The arrangement of the zones of these digits and the zones of operation of the
corresponding decoders on the plane 31c is shown in fig. 5.4.24.

Two supplenentary adders that compute differences of the type of ipi-ﬂc, namely the
d ifferences of

31-c and ~31-C
are used in the unit to select the extreme digits of the set xi (the digits -30.
-29, -28. -27, -26, -24, -22, -l9. -l6. ~13, 13, 16, 19, 22. 24. 26, 27, 28, 29
and 30).

The arrangement of the zones of the extreme digits of the set (5.4.52) and the
zones of operatiOn of the corresponding decoders on the plane In I ~c. C is shown

in fig. 5.4.25. The decoders of the extreme digits are construcéed in accordance
with the fig. 5.4.22. Le. combined in pairs.

The double supplementary adder of Inil - C contains 9 positions; the weights of
the high-order and low-order positions of this adder equal 1 and 2-8 respectively.

Therefore, the "staircases" of the decoders in fig. 5.4.25 must not approach (and

do not approach) closer to the right boundary of the sector of overlap of the
zones than by 2 .

84

FOR OFFICIAL USE ONLY
FTNI(NWN(1AI.USE|DNLN

The digit ~10 (+10) is selected automatically uhsn B is less. than 0 (B is
greater than or equal to 0) and when no other digit 3: set xi is selected in the
process. The decoders of the digits xi . just as all the other assemblies in the
arithmetic unit are built with the potential system of elements, which contains a
NOT gate and an F shaper (amplifier), implemented by a transistor current switch
circuit, emitter followers and diode AND and OR logic circuits. A circuit for se-
lecting the digit x112--8 is shown as an exaaple in fig. 5.4.26. One can trace

the correspondence of this circuit to the zone shown in fig. 5.4.24. Positions of
the numbers are numbered from left to right: 0 (neight l). 1 (Height 2.1),

2 (weight 2.2) etc. The signal -3 is the output of the sign register 3 and equals
1 when 81 is less than 0. The auxiliary signals D1. D2 and 03 are generated by

the individual circuits in such a way that
D1 = 1 when 1/2 is less than or equal to c is less than 37/64,
02 . 1 when 45/64 is less than or equal to c is less than 53/64, and
D3 = 1 when 53/64 is less than or equal to c is less than 1.

o n n n
-.---. -. -._ .1
u} n34“. 430.04% at. D; 4440,4454“

 

Key:
1. [all nine b10cks On this level represent] AND circuits

Quotient digit decoders contain from 22 to 80 diodes each. The decoders of +2 and
-2 (22 diodes each) and of :;4 (24 diodes) have the simplest circuits; decoders of
+5 and -5 (80 diodes each) have the most complex circuits.

85

FOR OFFICIAL USE ONLY
FINI¢JFFIC1AI.I£SEI(NULY

   

Key: Key:
1. Register c l. Adder 3C
2. Circuit to conpute 31+1 2. Circuit to for. P1 and P2
3. Adder of 181[ - c 3. Register P
b. Adder Sal
a. Decoders to select s1+1 5. Adder 9.2
5. Circuit to form and translate 6. Register R

quotient

Table 5.6.3.

HHF+e=>
———— L“! '
31390“ N,

 

 

A block diagram of a unit for division is shown in fig. 5.6.27; the circuit that
computes the next remainder 81+1 that enters the unit is shown in fig. 5.4.28.

The values of the multiples P1 and P2 of the divisor C, selected from the set

1’1 ' (mac, 3:246. use, :06. o}

92 . (ac. :30. :20. o)

86

FOR 0FT1C1AI.USEGDNLY
FOR OFFICIAL USE ONLY

by the rules defined by table 5.6.3 provide for fulfillment of the relationship

P1 + P2 ' “1+1

As seen from the table, each of the nultiples Pl or P2 is for-ed fro. the amber c

shifted by the needed number of positions. or the number 36 generated by the
auxiliary adder 3C.

C.

Look-ahead carries have been organized in adder 8-2.

The circuit that translates the quotient Q into binary form is essentially a 7-bit
binary adder. The values of 2:13 of the set (5.6.52) are 5-bit binary nunbers. A

direct exhaustive search of all possible cases shows that in addition of two binary
numbers

I
2 “1"" + l1+u"“"
hi

the carry run does not exceed three hits, and the borrow run, seven bits. A 3-bit
carry is obtained, for example, if 'i - 19 or 27, and s1+1 is greater than or equal

 

 

to 16: c
x. . -xx0l! 0- Eons-l
+ In.
Ixxxx — q, no-I-n

 

x. . . xxmxxxx— 2‘. one“

A 7-bit borrow run occurs if «31 - 5, 13 or 29. 'i+l - -16, and a1+2 is less than 0:

 

 

‘
x...><|o|.— 21.164
.I. l-l _
-ulmm.-... ------- - -- hum. ‘-'
{fuxnmmm H‘
| ._.._.-.__' :Ké’ﬁ’ﬁéz——*——“"'“" "
IQ?
x--.X"IIIIIXXXXX-— Emu-I

Ill

The 7-bit adder in the circuit that translates the quotient is built with the use
of parallel-parallel logic, i.e. there are no carry or borrow signals in the cir-
cuit, and the tine to for- all seven hits of the m is the delay tins of one

active element .

The successful combination of sultiplication ad division operations in the arith-
netic unit developed should be noted. Multiplication is performed in 5 cycles;
during each cycle, the product of the Inultiplicand by 6 mccesaive digits of the
Iultiplier A is added to the running sun of the partial products. In the process,

87

FOR OFFICIAL USE ONLY
FOR OFFICIAL USE ONLY

the same adders Sml, 8:12 and 3C (fig. 5.10.28), the same multiples P and P of the
multiplicand C (in the multiplication operation, another two va1ues of the multiple
P2 equal to :9. are used). and the same registers B and P are used. The apparatus.

installed in an aritl’netic unit just for the division operation (circuit to trans-
late the quotient. adders of tpt-C and decoders to select the digit a1+1) and not

used in other operations (multiplication. addition, subtraction, shifts and logic
operations) makes up only 10 percent of the total unit size. This indicates that
under certain conditions, the described division methods can be successfully com-
bined with the well-known methods for performing the other operations without
requiring substantial additional outlays for equipment.

It should be noted that at present there are apparently no other machines, in the
aritluetic units of vhich, synchronous methods of nonrestoring division vould
afford obtaining four or at least three binary digits of the quotient at once in
one cycle.

Obtaining more than four bits of the quotient in a cycle can be effected by units
that perform division by using iterations (cycles), during each of which, multi-
plication operations are performed (see section 5.3). In such units, the number
of quotient bits obtained can, for example, be doubled after each cycle. Bouever,
use of these methods is warranted only in arithmetic units that perform multipli-
cation at very high speed. Conversely. the generalized method of synchronous
nonrestoring division permits considerably raising the speed of division in arith-
mctic units that use relatively inexpensive (in the sense of apparatus outlays)
methods for speeding up multiplication and which contain therefore a relatively
small amount of hardware.

For Chapter 1 3131.1:

1. Glushkov, V. M.; Kapitonova. Yu. V. and Letichevskiy. A. A., "Theory of Data
Structures and Synchronous Parallel Computations," KIBERNHIRA. Mo 6, 1976.
pp 2-15.

2. Glivenko. Ye. V., "A Principle of Parallel Computations," PROGRMMIROVANIYE,
No l, 1977, pp 3-9.

3. Kartsev. M. A., "Problems of Structure of Multiprocessor Computing Systems,"
VOPROSY RADIOELEKTRONIKI. SBR. BVT. No 5-6. 1970, pp 3-19.

4. (Enslow), F. 6., ed.. "Multiprocessor Systems and Parallel Computations,"
translated from English. Moacov. Mir, 1976, 383 pages.

5. (Baytser). 8., "Computer Systems Architecture," translated from English,
Moscow. Mir. 1976. Vol 1. 498 pages; Vol 2. 566 pages.

6. Baer. J. L. and Estrin. G. A., "A Priory Scheduling of Bi-logic Graph Models
of Computations." INTERNET. 1969. PP 119-127.

7. Beer. J. L. and Bstrin, 6., “Bounds for Maximum Parallelin in a Bilogic Graph
Model of Computation." IEEE TRANS. COMPUT., Vol 0-18. No 11, 1969. PP 1012-1014.

8. Martin, D. and Estrin. G..'1knels of Computations and Systems Evaluation of
Vertex Probabilities in Graph Models of Computations." J. ACM, Vol 14, Mo 2.
1967. pp 281-300. 88

FOR OFFICIAL USE ONLY
9.

10.

14.

“W 071-11 1 U V!" IN" \

a

Colovkin. D. A., "Structure of Probabilistic Mel and Malyaia of Parallel
Couputational Processes." IZV. All 8883. Immune namrnn, lo 3.
1973. pp M6. .

Golovkin, D. A.. "A Clara of Dyn-ie multidilenaional Models.” W8!
mmnmmm. sen. m. No 7, 1973. PP 25-30.

Yevreinov. l. V. and Koaarev, Yu. 6., "Odnorodnyye miveraal'nyye vychialitel'-
nyye aiet-y vyaokoy proizvoditel'noati" [Manama General-Purpoae nigh-
‘l'hrwghput Capote: Systems]. Novosibirak, Daub, 1966. 308 pages.

Poapelov, D. A., "Vvedeniye v teoriyu vychialitel'nykh out." [Introduction
to Theory of Couputer Systems], ”ocean. Sovetalnoye radio. 1972. 280 mu.

Golubev-Novozhilov, Yu.c ., "lhogonaehinnyya unplekay vychialitel'nykh
aiatel" [Hultiaachine Couplexea of Computer Syetua]. loam. Swat-bye radio,
1967, (02b pages.

Karteev. H. A.. ”Paralleling of Iterative mutational Algoritha," MS!
RADIOWKI. 53R. m. No 9. 1971, pp 36-39.

For Chapter 2

1.

2.
3.

lo.

5.

6.

7.

8.
9.

lo.

11.

Kartaev. H. A., "Arkhitektura toifrovykh vychialitel'nykh main" [Digital
Colputer Architecture], Hoecov. Nauka, 1978, 296 pages.

[Sue as Chapl, Ref 4]

Crane, B. A.; Cilnartin, ll. 3.; Buttenhoff, J. 3.; ﬂux, 3. 'r. and Shively, R.

1’... "PM Computer Architecture," in "mow-72, 6th Annual 1m Colput. Soc.
Int. Conf., San Francisco, 1972, pp 57-60.

Bwnaen. A. J. and Troy. J. I... ”Introduction to the Architecture of a -
288-Blenent PEPE." in ”'roc. Sag-ore Couputer Cont. on Parallel Proceeainz."
Springer-Vedas, NY. 1973. pp 162-169.

Slotnick. D. 1..; Borck, W. C. and acneynolda, R. C.. "The Solo-on Cupoter,“
in 3'1962 Pall Joint Computer Cont. APIPS Proc.. Vol 22, Huhimton. 1962.
PP 97-108a

Barnes, G. IL; Brawn, R. IL; Kato,'ll.; luck. J.: Slocuick. D. 1.. and Stoker,
R. A" ”The ILLIAC IV Computer,” 1m M8. oamrr.. V01 0-17, NO 8, 1968,
pp 766-757.

Dookniaht. H. J.; Dennenberg, s. A.; McIntyre. D. 8.; 3-01), A. II. and Slotnick,
D. I... "The ILLIAC IV Syeten,” not. 0! 1m. Vol 60, no lo, 1972. pp 369-388.

VOPROSY BADIOELmIKI. m. m. lo 9, 1980.

Hartin, D. P. and Batrin. 6., "Marinate on Models of Computation and Syr-
ta.g" 1m Ms. We. V01 “.16.“ 1. 1967, Pp 59-69.

ﬂoor, A. K. and Fulton, R. L, ”Input of CD0 STAR-100 Capoter on Pinite
ﬂuent Systems," J. SWOT. DIV. PROC. m. SOC. CIV. use” Vol 101, Do 1.,
1975. pp 731-750.

chap 1, Ref 3
Abel, N. 8.; Budnik, P. P.; Kuck. D. J.; Karaoke. 1.; northoote, R. 8. and Vil-

helnaon, R. 3.. "MIL: A Language for an Array Proceaain; Canter,” in
"Spring Joint Coaputer Canterance." 1969. pp 57-73.

89

FOR OFFICIAL USE ONLY
13.
1‘.
15.

16.

I“! "Fl-10.“. US}? ON] \

Wu, 1... "The Parallel hecution of D0 Loops,” MICAHONS 0? 111: Am,
Vol 17, No 2, 1974, pp 83-93.

Laurie, D. 8.; Lay-an, 1:; Deer. D. and Randal, J. 11., "clypnir: A Progr-ing
Language for Illiac-IV." CACM, Vol 18, No 3, 1975, pp 157-166.

Kartaev, H. A., "Arifnetika taifrovykh naahin" [Digital Conputer Arithetic],
Moscow, lauka, 1969, S76 pagea.

Kartaev. H. A., "14-10 Computer," DAD, Vol 265, No 2. 1979, pp 309-312.

For Chapter 3

1.

2.

3.

5.

6.

7.

9.

10.

11.

12.
13.

14.

15.

weinbergar, A. and Saith, J. I... "A One-Microaecond Adder Doing One-ﬂagacycle
Circuitry,” 1R3 TRANS. 0N mom. mun. Vol 80-5. No 2, 1956, pp 65-73.

Rove, H. D., "A New Approach to nigh-Speed Logic, in "Proc. of the Heat Joint
Conputer Cont,” San Pranciaco-N‘Y, 1959, pp 277-283.

80 Solid State Division, "Aritl-etic Arraya Doing Standard 008/108 Building
Blocks,” 1973, pp 373-378.

Zhuk, A. I. and Zhuk, V. 1., "Circulation of Signala through Carry Circuit in
Addera of Inverae Codes," VOPROSY RADIOWI. 883. M. lo 6, 1968.
pp 26-33.

Potankin. I. 8., "St-atory'.’ [Addera], Hiniatry of Higher and Secondary
Specialized Education of the USSR. Hoacou Order of Lenin Power Engineering
Institute, Moscow, 1975, 66 pages.

wilkea. M. V., "Autonatic Digital Computers." London, human and Co" 1958,
305 pages.-

Horgan, L. P. and Jarvia, D. 3.. ”Tranaiator Logic Doing Current Switching and
Routing techniquea and Ira Application to a Peat-Carry Propagation Adder,"
1128 11806.. Vol 106, No 29, Pt. 3. 1959. pp 667-668.

Let-Ian, M. and Darla, IL, "Skip Techniquea for nigh-Speed Carry Propagation in
Binary Aritllnetic Unite," 18! M8. ON moi-non. c0901., Vol 80-10, ['0 4.
1961, pp 691-699.

Heijn, a. 1. and seam, . . c.. "The Philips (to-pater Paacal,” m mus. on
mm. 00:901.. Vol zc-lo. no 2, 1961, pp 175-183.

Hajeraky, 8., "0n Deternination of Opti-al Diatributiona of Carry Skipa in
Adders," 1m TRANS. mun. Vol 16, No l. 1967, pp 65-58.

Nadler, H., "A High-Speed Electronic Arithetic Unit for Autonatic Caputing
Hachinea, " AC‘l'A TECHNICA, Vol 1, No 6. 1956, pp 666-678; Vol 2, No 1, 1957.
pp 101-102.

Pat. No 3230354 (USA), NKI 235-164.

Sclanakv, 3., ”Conditional-Sun Addition Logic," 1!!! TRANS. ON ELECTRON. comm"
Vol 36-9. No 2, 1960. pp 226-231.

Dedrij, 0. 3., "Carry-Select Adder," 1113 M8. ON ELECTRON. mm" Vol 30-11,
"0 3, 1962, pp 340-366.

Delyakov, H. I. and Drik, V. A.. "Definition of Optiha1 Paruatera of e Peat
Adder," VOPROSY RADIOKLEKTRODIII. 833. m. No 9. 1970, pp 62-66.

90

FOR OFFICIAL USE ONLY
For
1.

8.

10.

11.

12.

13.

14.

15.

16.

17.

18.

FOR OFFICIAL USE ONLY

Chapter a
[sane as 2-15].

Khetagurov, Ya. A., "Circuit for Reducing Multiplication Tine," in "Vychisli-
tel'naya tekhnika" [Computer Technology], noscov, Atoaizdat. 1960, pp 68-53.

Kartsev, H. A.. "Arifaeticheakiye ustroystva elektronnykb tsifrovykh ushin"
[Aritlnetic Units for Electronic Digital Ooaputera], Hoscou, Pinatgiz, 1958,
158 pages.

Brik, V. A. and Lushpin. L. 1., "Structure of 1.81 Simultaneous nultipliers,"
VOPROSY RADIOELEKTRONIKI. SBR. BVT, No 11, 197‘. pp 61-52.

Dean. K. J ., "Versatile Multiplier Arrays," ELECTROﬂIC LETTERS, ’lol 6, lo 16,
1968, pp 333-334.

Hoff-an, J. C.; Lacaze, 8. and Csillag, P., "multiplier parralele a circuits
logiques iteratifs,” ELECTRONIC LETTERS. Vol lo, No 9, 1968, p 178.

Bandyopadhyay, 8.: Basu, S. and Choudhury, A. K.. "An Iterative Array for
Multiplication of Signed Binary Numbers," 1833 TRANS. WOT" Vol 21, No 8,
1972, pp 921-922.

Khetagurov. Ya. A.; Popov, Yu. A. and Lyubentsov, V. 11., ”An Array for Multi-
plication," in "Voprosy vychislitel'noy nataatiki i vychialitel'noy tekhniki"
[Probla-s of Computational Hathenatics and Computer Technology], Hoscov,
Mashgiz, 1963, pp 157-165.

Erik, V. A., "On the Speed of Pyranids of Adders in Hultipliera for Digital
Computers," VOPROSY RADIOEBKTRONIKI. 833. m. No 5-6, 1970. pp 79-87.

Brik, V. A.; Borisov, Yu. H. and Tanetov, G. 1., "Pyrmid of Adder: for the
Arithletic Unit of a Digital Computer," in "BIenenty i ustroyatva upravlyayu-
shchikh nashin" [Elaents and Devices for Control Counters], Moscow, 1966,

pp 159-166.

Majithia, J. C. and Kitai, 8., "An Iterative Array for multiplication of
Signed Binary Numbers," 1:!!! TRANS. WT” Vol 20, No 2, 1971, pp 214-216.

Deegan, I. 1)., "Cellular Multiplier for Signed Binary Nubers," WC
LETTERS, Vol 7. No 151, 1971, pp 636-1037.

Kingsbury, u. c., "High-Speed Binary Multiplier," ELECTRONIC Larrrns, Vol 7,
up 10. 1971, pp 277-273.

Springer, J. and Alfke, P., "Parallel liultiplier Gets Boost from 10 Iterative
Logic,” ELECTRONICS, Vol 63, No 21, 1970, pp 89.93.

Habibi, A. and Hintz, P. A., "Fast Multipliers," It“ TRANS. MIL, V01 19,
No 2, 1970. PP 153-157.

Stylianos, P., "A loO-ns 17-bit by 17-bit Array Hultiplier," I- TRANS. cam”
Vol 20, No 1., 1971, pp 662-447.

Khrapchenko, V. 11., “Methods of Speeding Up Aritl-etic Operations Based on
Translation of Multirov Code," VOPROSY “010813!an 8311. VII EVT, No 8,
1965, pp 121-1410.

Hallace, C. S., "A Suggestion for a Past Hu1t1p1ier," 1m TRANS. MEL,
Vol ac-13, No 1. 1966, pp 14-17.

91

FOR OFFICIAL USE ONLY
19 .
20.

21.

22.

23.

26.

25.

26.

27.

28.

29.

30.

31.

32.

33.

36.

35.

36.

37.

38.

39.

FOR OFFICIAL USE ONLY

Patent 126668 (USSR), published in Bulletin of Inventions, No 5, 1960.

Jacobsohn, D., "A Suggestion for a Past Mltiplier," I- TRANS. mun.
Vol EC-lJ, No 6, 1966, pp 756-755.

Dadda, L., "Some Schaes for Parallel Kultipliers," ALTA FREQUENZA, Vol 36,
No 5, 1965, pp 369-356.

Ksrtsev, K. A., "A Device for Fast Hultiplication and Division,” VOPROSY
RADIOELEKTROUIKI. SER. XII OBSﬂCIIETEKIINICEESEAYA, No 12, 1959, pp 63-61.

Gex. A., "Multiplier-Divider Cellular Array," ELECTRONIC LETTERS, Vol 7,
No 15, 1971, pp 662-466.

Deegan, I., "Concise Cellular Array for Hultiplication and Division,"
ELECTRONIC LETTERS, Vol 7, No 23, 1971, pp 702-706.

Henel, A.. "Making Small Ron's Do Hath Quickly. Cheaply and Easily,"
ELECTRONICS, Vol 63, No 10, 1970, pp 106-111.

JohnsOn, 11., "Improved Binary Hultiplicstion Systaa," ELECTRONIC LETTERS,
Vol 9, No 1, 1973, pp 6-7.

Patent 3670956 (USA). HKI GO6f7/52.

Landon, T. and Aapinal, D., ”So-e Aspects of the Design of a Simultaneous
Multiplier," in "Proc. IFIP Congr., New York City. 1965," Vol 2, Washington,
D.c., Spartan Books; London, Hauillan and Co., 1966, pp 660-661.

Moron, I. 6., "Some Questions of Simultaneous Multiplication,” in
"Vychislitel'naya matenatika i tekhnika" [Conputer Hathastics and Technology],
Kiev, AN UkSSR, 1962, pp 85-96.

Bennie, F. c., "Iterative Arrays of Logical Circuits." New York, MIT Press;
London, Wiley. 1961, 262 pages.

Cappa. H. and Rancher, V.C., "An Augmented Iterative Array for nigh-Speed
Binary Division," lEEE TRANS. COMPUTH Vol 22, No 2, 1973. PP 172-175.

Guild, H. IL, "Some Cellular Logic Arrays for Nan-Restoring Binary Division,"
THE RADIO AND ELECTRONIC ENGINEER, V01 39. N0 6, 1970, pp 365-368.

HaJithia, J. c., "Nonrestoring Binary Division Using a Cellular Array,"
ELECTRONIC LETTERS, V01 6, No 10, 1970, pp 303-306.

Dean, R. J .. "Binary Division Using a Data-Dependent Iterative Array,"
ELECTRJNIC LETTERS, Vol 6, No 16, 1968, pp 283486.

Dean, K. J ., "Cellular Logic Array for Extracting Square Roots,"
ELECTRONIC LETTERS, Vol 6, No 15, 1968, pp 316-315.

Devries, R. C. and Chao. H. IL. "Fully Iterative Array for Extracting Square
Roots,“ ELECTRONIC LETTERS, Vol 6, No 8, 1970, pp 255-256.

Dean. K. J ., "Logical Circuits for Use in Iterative Arrays,"
ELECTRONIC LETTERS, Vol 5, No 5. 1968, pp 81-82.

Dean, K.J., "Cellular Logical Array for Obtaining the Square of a Binary Nun.
ber," ELECTRONIC LETTERS, Vol 5, No 16, 1969, pp 370-371.

Anderson. S. 17.; Earle, J.G.; Goldscluidt. R.E. and Powers, 1). 11., "The In!
System/360, Model 91. Floating-Point Execution Unit," IBH J. RES. AND DEVELOP-
MENT, Vol 11, No l, 1967, pp 36-53.

92

FOR OFFICIAL USE ONLY
1.0.

61.

69..

43.

(do.

(05.

46.

10".

For

1.
2.

3.
lo.
So

6.
7.
8.

9.

10.

11.

FOR OFFICIAL USE ONLY

(Buchholz), V., ed., ”Design of High-Speed Systems. Couple: (Stretch),"
translated from English, edited by A. I. Kitov, Moscow, Mir, 1965, 368 pages.

Erik, V. A. and Lengnik, ‘1‘. M., "Analysis of 'Decay' Processes in Array
Multipliers," VOPROSY RADIOELBUBONIKI. 833. M, No 9, 1971, pp 65-69.

Khrapchenko, V. M., "A Method for Translating Multirov Code to One-Row,"
DOKLADY AN SSSR, V01 1108, No 2, 1963, pp 296-299.

Ofnan, Yu., "Algoritlllic Couplexity of Discrete Functions," 00mm AN SSSR,
Vol us, No l, 1962, pp 48-51.

Borisov, Yu. M., "Apparatus Methods of Second Order for Speeding Up Multiplica-
tion," in ”Vychislitel'naya tekhnika, algoritly i siatcny upravleniya" [Catapu-
ter Technology, Algoriths and Control Systems], Transactions of Conference of
INEUM [Institute of Electronic Control Machines], July 1966, Moscow, mm,
1967, pp 5-19.

Brik, V. A. and Lushpin, L. 1., "TranslatiOn of Multirov Code into M-Row by
Using One-Type Assemblies," VOPROSY RADIOBLBCTROIIIKI. 8BR. M, No 7, 1973,
pp 910-116.

Brik, V. A., "Some Canon Properties of Multilayer Arrays," VOPROSY RADIO-
ELEKTRONIKI. SBR. M, No 6, 1978, pp 61-69.

Stenzel, H. J.; Kubitz, H. J. and Garcia, G. 11., "A Capsct nigh-Speed
Parallel Multiplication Schene," IBBB TRANS. WOT“ Vol 26, No 10. 1977,
pp 968-957.

Chapter 5

Patent 232913418 (USA) NKI 235-156.

Akushskiy, I. Ya., 'Thogoregistrovyye skhay vypolneniya arifneticheskikh
operatsiy: Voprosy teorii mtaaticheskikh lashin. Sbornik pervyy" [Multi-
register Circuits for Performing Arithmetic Operations: Problems of Theory of
of Matheaatical Machines. First Collection], ed. by Yu. Ya. Bazilevskiy,
Moscow, Fizmatgiz, 1958, pp 192-218.

[sane as 4-34].
[sane as 10-31].

Stefanelly, R. A., "A Suggestion for a nigh-Speed Parallel Binary Divider,"
IEBE TRANS. COMPUTH Vol C-21, No 1, 1972, pp 102-55.

[sane as 4-18] .

[sale as 4-17].

Flynn, M. J ., "Very High-Speed Couputing Systn," PIOC. OF THE 1m. Vol 56,
No 12, 1966, pp 1901-1909.

Almad, M., "Iterative Sch-ea for High-Speed Division," WT. J., Vol 15,
No 1., 1972, pp 333-336.

Shahal, Z. and Riesel. 2., "A More on Division AlgoritIus Based on Multiplica-
tion," IBBE TRANS. COMPUTH Vol C-21, No 5, 1972, pp 513-516.

[same as 10-39] .

93

FOR OFFICIAL USE ONLY
12.

13.

16.

15.

16.

17.

18.

19.

20.

21.

21.
23.

26.
25.

FOR 0FFNJA1.USEIDNLV

Brik, V. A.; Csvrilin, V. A.; Zhuk, V. 1.; Zlatnikov, V. M.; Kislinakiy, V. A.;
Lengnik, T. M.; Lushpin, L. 1. and Petrova, G. M., "Multiprocessor Arithmetic
Unit," VOPROSY RADIOELECTROMIKI. SBR. BVT, Mo 5. 1972, pp 56-67.

Kartsev, M. A., "Arifmetika tsifrovykh mashin" [Digital Computer Arithmetic],
Moscow, Mauka, 1959, 576 pages.

(Berks, A.; Goldstein, G. and Rey-an, 6.), "Preliminary Consideration of Logic

Design of an Electronic Computing Device," KIDERMETICEESRIY SDORMIK, Mo 9,
Moscow, Mir, Mo 9, 1964, pp 7-67.

Brik, V. A.; Cavrilin, V. A.; Zhuk, V. 1.; Zakharov, V. 0.; Lushpin, L. I. and
Petrova, G. M., "High-Speed Arithmetic Unit," VOPEOSY RADIOELERTRONIRI. SIR.

Atkins. D. E., "The Analysis and-Design of a Class of Quotient Digit Selectors,"
5th Annual IEEE Int. Comput. Soc. Conf., Boston, Mass., 1971; Conf. dig.,
New York, 1971, pp 201.202.

Erik, V. A., "A Method of Monrestoring Division," Digital Computer Technology
and programming, ed. by A. 1. Kitov, Moscow, Sov. radio, Mo 5, 1969, pp 72-86.

Nadler, M., "A High-Speed Electronic Arithmetic Unit for Automatic Computing
Machines, ACTA TECHNICA, Vol 1, Mo 6, 1956, pp 666-678; Vol 2, Mo 1, 1957,
pp 101-102.

Kartsev, M. A., "A Method of Binary Division," in "Msterialy nauchno-tekhn.
konferentsii 'Movyye razrabotki v oblasti vychislitel'noy matematiki i
vychislitel'noy tekhniki'" [Materials from the Scientific and Technical Confer-
ence on "New Developments in Computational Mathematics and Computer Technology"],
Kiev, VTs AN UkSSR, 1960, pp 409-618.

Robertson, J. 3., "A New Class of Digital Division Methods," IRE TRANS. ON
ELECTRON. COMPUT., Vol sc-7, No 3, 1958, pp 218-222.

Brailovskiy, V. L. and Clukhov, Yu. M., "Methods of Monrastoring Division,“
VOPROSY RADIOBLBKTRONIKI. SER. XII, OBSHCHETBKHNICHESKAYA, Mo 13. 1951, pp 40.59.

Patent 3621218 (USA).

Soceneantu, A. and Toma, C. 1., "Cellular Logic Array for Redundant Binary
Division," PROC. IEE, Vol 119, Mo 10, 1972, pp 1452-1456.

[same as 4-22].

Atkins, D. 3., "Higher-Radix Division Using Estimates of the Divisor and Partial
Remainders," 1m: ms. m.,Vol c-17, Mo 10. 1968, pp 925-934.

5

For Chapter 6

1.

3O

Gramolin, V. V., "Enhancing the Regularity of Computer Units with the Use of
Special Arithmetics," Transactions of the Moscow Institute of Rail Transport
Engineers, No 395, "Problems of Theory of Computing Systems,“ 1971, pp 73-83.

Karasik, V.M., "Some Problems of Design of L81 Digital Computers," VOPROSY
RADIOELEKTRONIKI. SER. EVT, No 1, 1971, pp 3-13.

Zeydenberg, V. K.; Matveyenko, M. A. and Tarovatove, Ye. V., "Survey of Foreign
Computer Technology as of 1971," Moscow, Institute of Precision Mechanics and

Computer Technology, 1971, 316 pages.
96

FOR OFFNJA1.USEGDNIN
5.
6.

8.

10.

11.

12.

13.
110.

15.
16.
17.
18.
19.

2°.
21.
22.

23.
26.

25.

FOR OFFICIAL USE ONLY

Cloyd, B. M., 'TBDS/LSI Throughout," in ”1533 Int. Convent. Dig.,” New York,
NY. 1971," New York, NY, 1971, pp 74-75.

urn SCIENTIST, 3/v, No 846. 1973. -

Al'tnan, "Functional Approach to Design of LSI Circuits," BLBKTBDNIKA, No 17,
1975, p 58.

Tarovatova, Ye. V.; Golovnya, Ye. V. and Hatveyenko, N. A., "Foreign Computer
Technology in 1975," ed. by V. K. Zeydenberg, Moscow, Institute of Drecision
Mechanics and Computer Technology ineni S. A. Lebedev, USSR Acadeny of
Sciences, 1976, 275 pages.

Prsngishvili, I. v.; Abramova, N. A.;Babicheva,Ye. V. and Ignatushchenko, V.
V., ”Hikroelektronika i odnorodnyye struktury dlye postroyeniya logicbeskikh
i vychislitel'nykh ustroystv" [Microelectronics and Homogeneous Structures
for Building Arithmetic and Logic Dnits], Moscow, Hanks, 1967, 228 pages.

Dukhnich, Ye. I. and Hsksrevich, O. B., "LSI Circuits and Software for Digital
Integrating Structures," in "Vychislitel'nyye sisteny i sredy" [Conputer Sys-
tens and Environments], Taranrog, 1972, pp 433-635.

Zeydenberg, V. K.; Hatveyenko. N. A. and Tarovatova, Ye. V., "Obror zarubezh-
noy vychislitel'noy tekhniki po sostoyaniyu ns 1972" [Survey of Foreign
Computer technology as of 1972], Moscov, Institute of Precision Mechanics

and Computer Technology, 1972, 355 pages.

Arluckle, W. L. and Hattson, R. C., "Hacromodularity: A Design Concept to and
Computer Generation Gaps,“ COHPUTBR DESIGN, Vol 9, No 8, 1970, pp 69-79.

Russo, R. L., "0n the Tradeoff between Logic Performance and Circuit-to-Pin
Ratio for L81," 188E TRANS. couwur., Vol 21, No 2, 1972, pp 1&7-153.

(Sane as 3-3];

Belkov, H. 8.; Bratal‘skiy, Ye. A. and Lushpin, L. 1., "Method of Building a
Superparallel Adder," VOPmSY RADIOBLEKTRDNIKI. SBR. EVT, No 7, 1975, pp 65-71.

(Same'as 5-13].
[Same as 6-19].
[Same as é-lS].
[Same as 6-16].

Brik, V. A. and Lushpin, L. 1., "Method of Translating Hultirov Code by Using
Binary Adders,” VOPROSY RADIOELBKTBONIKI. 88R. BVT, No 6, 1977, pp 119-124.

[Same as 10-45] .
[Same as 4-25].
[Same as 6-26].
[Same as 6-27].

"The TTL Data Book Supplement to CC-éOl for Design Engineers,” Deutschland,
Texas Instruments, 1973.

Belkov, H. 8.; Bratal'skiy, Ye. A.; Brik, V. A.; Lushpin, L. I. and Pakhunov,
V. N., "Development of LSI System for Building Digital Computer Assenblies,"
VOPROSY RADIOELEKTRONIKI. 3511. m. No 7. 1975, pp 72-80.

95

FOR OFFICIAL USE ONLY
26.

FOR OFFICIAL USE ONLY

Patent 3866030 (USA). HKI G06f7/39.

For Chapter 7

1.

2.

3.

[9.

5.

6.

McKeeman, H. H., "Representation Error for Real Numbers in Binary Computer
Arithmetic," IEEE TRANS. COMPUT., Vol 16. No 5, 1967, pp 682-683.

Ila-ling, R. H., "Ntherical Hethods for Scientists and Imgineers," New York,
HcGraw-Hill Book Co., 1962, 411 pages.

Potemkin, 1. S.,'"Postroyenie funktsional'nykh uzlov na potentsial'nykh
sistemakh elementov" [Building Functional Assemblies with Potential Systems of
Elements], Moscow, MEI [Moscow Power Engineering Institute], 1976, 126 pages.

[Same as 2-15].

Brik, V. A., "Precisioa of Performance of Floating-Point Addition-Subtraction
Operations," VOPROSY RADIOELBKTRONIKI. SEE. EVT, No 5. 1972, pp 74-81.

Khrapchenko, V. H., "Estimating Error of Binary Multiplication," in "Problems
of Cybernetics," ed.by A. A. Lyapunov, Moscow, Pizmatgiz. No 10, 1963,
pp 165-177.

Subject Index

Adder-accumulator, 325
Adders, carry bypass, 142, 166

carry select, 153
coincidence-type, 325

conditional sum, 131

high-speed LSI, 280

optimization of structure of, 155
parallel, 325

parallel-parallel, 142

pyramid carry, 149

simultaneous carry, 13S
superparsllel, 127

ovovvvnvv

I
Algebra of logic, 312
Arithnetic and logic units and assemblies for digital computers, 312
Arithmetic unit for RAB-251 digital computer, 276
Arrays, iterative, 176

, processor for reforming. S3, 88

Assemblies, functional with potential elements, 325

Circuits, address decoding, 306

bipolar logic, 277

codes of operation of integrated, SN 54181, 285
large-scale integrated (LSI), 275

criteria of optimality of LSI, 278

for checking homogeneity of sample, 55, 86
minimization of connections between, 307
two-dimensional array integrated, 307

woo-.v.

Complexes, multimachine, 39
Computer, digital. elements and assemblies of, 323

96

FOR‘0FF"3AI.USEEONLY
_Computing systems, 36. 39
combined, 98
conveyor (mainline), 56, 69, 105
efficiency of, 10, 61, 68, 77, 80
mixed, 105
multiprocessor, 101
programming of, 112
speed of, 10, 12, 98
. rated, 10
, actual user, 10
, actual system, 10
, throughput of, 8
, type 1. Al
. type II, 42
, type III, 67
, type IV, a9
Conjunction (AND, logical product), 313
Counter, parallel, 199

Division, addition-subtraction method of, 325

, classical method of, 234
high-speed devices for, 221
iterative formula method of, 226
non-fast method of, 341
nonrestoring, 230. 269, 363

, generalized method of, 254

, graphic-analytic method of analysis of, 242
nonrestoring method of, 230, 254
restoring, 222, 363
short restoring method of, 222
Stefanelly methods of, 225

, using symmetrical set of integers, 2‘6
Divergence factor of problems, 18
Disjunction (OR, logical sum), 313

Efficiency, system, 11
Elements, potential system of, 322
, pulse system of, 323
Error, absolute, of number representation, 319
, apparatus, with floating-point addition-subtraction, 336
, relative, of number representation, 319

Flip-flop, 324

Function, of equivalence, 313
, of negation (NOT, inversion), 313
, of nonequivalence, 313

Implication, 313
Integral operations, 15
Inverter, 313

Logic, algebra of, 312
, parallel-parallel, 137

Masks, mechanism of, 50

u-vooovo

O...

coco
FOR OFFICIAL USE ONLY

Multiplication, non—fast method of, 336
Multipliers. add processes in homogeneous simultaneous array, 180
, "decay" processes in homogeneous simultaneous array, 195
, high-speed synchronous, 162
, multilayer simultaneous, 197, 295
, with parallel adders, 290
, simultaneous (00), 165, 174
, basic structure of, 206
, simultaneous array, 175, 180, 195
, simultaneOus LSI, 290

Number, fixed-point, 315
, division example of, 363, 365
,addition-subtraction example of, 327
, floating-point, 317
, division example of, 346, 346
Operations, geometric control, 56
, indicator of association of related, 27

Parallelism, artificial, 29

of independent branches, 21

of related operations, 26, 115

, depth of, 28
of set of objects, 15
, natural, lb, 117
Parallel-serial processing, apparatus for, 51
Peirce function (OR-NOT, NOR), 313
Products, negative partial, 168
Program, layer-parallel form of, 22
, quantitative characteristics of, 24

Rank of problem, 17
Register, flip-flop, 324
, shift, 326

Self-duality, property of, 179
Set, functionally complete, 313
Sheffer stroke (RAND), 313
Speed, actual, 10
, rated, 10

Structures, economical, 208
Switch, 324
Synchronous methods of performing operations, 126
System with one instruction stream and one data stream (CPR-CPD), 42

with one instruction stream and multiple data streams (OPK-HPD), 42
Systems, multiprocessor with column control, 66, 68

, multiprocessor with separate control, 61

with multiple instruction streams and multiple data streams (HPK-HPD), 62

Throughput, efficiency of, 11
, means for high, 275
, system, 8
, user, 10, an

98

FOR 0FFNJAI.US£(JNLY
FOR OFFICIAL USE ONLY

Translation of logic lormulns. 316

of multirou code. 295

Translators , "-92 , 296

Pretaco

Table of Contents

1. Problem of Organization of Parallel Computations

1.1.

1.2.

Initial Propositions

1.1.1. Computing Systems and Purposes of Their Development

1.1.2. Throughput of Computing Systems. Basic Concepts and
Definitions

Features of Computing Problems That Permit Organization of

Parallel Computations

1.2.1. Natural Parallelism and Parallelism of a Set of Objects

1.2.2. Parallelism of Independent Branches

1.2.3. Parallelism of Related Operations

1.2.4. Artificial Parallelism

2. Structures of Computing Systems

2.1.

Principles of Organization of Computing Systems

2.1.1. Hultimachine Complexes and Multiprocessor Systems with
Separate Control (Type I and 11 Systems) . -

2.1.2. Hultiprooessor Systems with Common Control Oriented to
Parallelism of Related Operations (Type 111 System)

2.1.3. Hultiprocessor Systems with Common Control Oriented to
Natural Parallelism (Type IV System)

2.1.4. Conveyor (Mainline) Computing Systems

99

FOR OFFICIAI.lEﬂE(NVLY
So

2.2.
.2.1.
.2.2.
.2.3.
2020‘.

B
2
2
2

FOR OFFICIAL USE ONLY

[ficiency of Computing Systems

General Considerations

Efficiency of Type I and 11 Computing Systems
Efficiency of Type III Computing Systems
Efficiency of Type IV Computing Systems

2.3. Combined Computing Systems

2.3.1.

2.3.2.
2.3.3.

Problem of Building a Computing System with

Maximal User Speed

Multiprocessor Combined System
Conveyor and Mixed Combined Systems

2.4. Additional Remarks

2.4.1.
2.4.2.

0n Programming for Computing Systems
0n Hardware Features

High-Speed Synchronous Adding Devices
3.1. Super Parallel Adders

3.2. Parallel-Parallel Adders

3.3. Carry Bypass Adders

3.3.1.

Optimal Structures of Carry Bypass Adders

3.4. Pyramid Carry Adders

3.5. Conditional Sum Adders

3.6. Carry Select Adders

3.7. Example of Optimization of Adder Structure

High-Speed Synchronous Multipliers

4.1. Decreasing the Time for Adding Partial Products
4.2. Preliminary Formation of Multiples of Multiplicand
4.3. Use of Negative Partial Products

4.3.1.

4.3.2.

Method of Multiplication by Group of q Bits of Multiplier
witn Decoding of q+l Bits of Multiplier
Method of Multiplication from Lou-Order Bits of Multiplier

4.4. Analysis and Technique of Building Simultaneous Multipliers

4.4.1.
4.4.2.

4.4.3.

4.4.4.

Classification of Simultaneous Multipliers

Analysis of Processes of Adding Partial Products in
Homogeneous Simultaneous Array Multipliers

Analysis of Processes of "Decay" in Homogeneous
Simultaneous Array Multipliers

Multilayer Simultaneous Array Multipliers

High-Speed Synchronous Dividers

5.1. Methods of Short Restoring Division
5.2. Stefanelly's Methods

5.3. Performing Division by Multiplication

5.4. Short Nonrestoring Division

5.4.1.

General Description of Monrestoring Division

Classical Method of Division

Graphic-Analytic Method of Analysis of Processes of Division
Division Using Symmetrical Set of Integers Including Zero
Generalized Method of Nonrestoring Division and
Investigation of It

Example of Implementation of Generalized Method of
Nonrestoring Division

100

FOR OFPI '
FOR OFFICIAL USE ONLY

6. Construction of Basic Assemblies of Computing Hardware with High
Throughput Based on Large-Scale Integrated Circuits

6.1.
6.2.
6.3.

7. Hnthem
and As
7.1.

Bibliograp
Subject In

COPYRIGHT:

8565

Criteria for Optimality of Large-Scale Integrated Circuits

Construction of High-Speed Adders with LSI Circuits

Construction of Simultaneous Multipliers with LSI Circuits

6.3.1. Construction of Multilayer Simultaneous Multipliers by
Using Parallel Adders

6.3.2. Method of Constructing Multilayer Simultaneous Multipliers
by Using N-€>2 Converters

6.3.3. Compound SimultaneOus Multipliers with LSI Circuits

Construction of Shifters, Decoders and Switches with LSI Circuits

Optimization of Structure of Two-Dimensional Array Integrated Cir-
cuits

atical Principles for Construction of Logic and Arithmetic Units
semblics for Digital Computers

Principles of Algebra of Logic

Representation of Numbers with Fixed Point

Representation of Numbers with Floating Point

Precision of Representation of Numbers

Elements and Assemblies of Digital Computers

Principal Methods of Non-Fast Addition-Subtraction

Principal Methods of Non-Past Multiplication

Principal Methods of Non-Fast Division

by
dex

Izdatel’stvo "Radio 1 svyaz'”, 1981

C80: 8144/1812

- gun -

101

FOR OFFICIAL USE ONLY